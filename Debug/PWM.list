
PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a08  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004b14  08004b14  00014b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b80  08004b80  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  08004b80  08004b80  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b80  08004b80  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b80  08004b80  00014b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b84  08004b84  00014b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08004b88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  200000a8  08004c30  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08004c30  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bcde  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f9f  00000000  00000000  0002bdaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  0002dd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  0002eac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f8d  00000000  00000000  0002f740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dab4  00000000  00000000  000476cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ad8d  00000000  00000000  00055181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dff0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a94  00000000  00000000  000dff60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a8 	.word	0x200000a8
 8000128:	00000000 	.word	0x00000000
 800012c:	08004afc 	.word	0x08004afc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ac 	.word	0x200000ac
 8000148:	08004afc 	.word	0x08004afc

0800014c <setTimer1>:
int counter4;
int timer4_flag;

int TIMER_CYCLE=10;

void setTimer1(int duration){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	counter1=duration/TIMER_CYCLE;
 8000154:	4b07      	ldr	r3, [pc, #28]	; (8000174 <setTimer1+0x28>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	687a      	ldr	r2, [r7, #4]
 800015a:	fb92 f3f3 	sdiv	r3, r2, r3
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <setTimer1+0x2c>)
 8000160:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 8000162:	4b06      	ldr	r3, [pc, #24]	; (800017c <setTimer1+0x30>)
 8000164:	2200      	movs	r2, #0
 8000166:	601a      	str	r2, [r3, #0]
}
 8000168:	bf00      	nop
 800016a:	370c      	adds	r7, #12
 800016c:	46bd      	mov	sp, r7
 800016e:	bc80      	pop	{r7}
 8000170:	4770      	bx	lr
 8000172:	bf00      	nop
 8000174:	20000000 	.word	0x20000000
 8000178:	200000c4 	.word	0x200000c4
 800017c:	200000c8 	.word	0x200000c8

08000180 <setTimer2>:

void setTimer2(int duration){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	counter2=duration/TIMER_CYCLE;
 8000188:	4b07      	ldr	r3, [pc, #28]	; (80001a8 <setTimer2+0x28>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	687a      	ldr	r2, [r7, #4]
 800018e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000192:	4a06      	ldr	r2, [pc, #24]	; (80001ac <setTimer2+0x2c>)
 8000194:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 8000196:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <setTimer2+0x30>)
 8000198:	2200      	movs	r2, #0
 800019a:	601a      	str	r2, [r3, #0]
}
 800019c:	bf00      	nop
 800019e:	370c      	adds	r7, #12
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr
 80001a6:	bf00      	nop
 80001a8:	20000000 	.word	0x20000000
 80001ac:	200000cc 	.word	0x200000cc
 80001b0:	200000d0 	.word	0x200000d0

080001b4 <setTimer3>:

void setTimer3(int duration){
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
	counter3=duration/TIMER_CYCLE;
 80001bc:	4b07      	ldr	r3, [pc, #28]	; (80001dc <setTimer3+0x28>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	687a      	ldr	r2, [r7, #4]
 80001c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80001c6:	4a06      	ldr	r2, [pc, #24]	; (80001e0 <setTimer3+0x2c>)
 80001c8:	6013      	str	r3, [r2, #0]
	timer3_flag=0;
 80001ca:	4b06      	ldr	r3, [pc, #24]	; (80001e4 <setTimer3+0x30>)
 80001cc:	2200      	movs	r2, #0
 80001ce:	601a      	str	r2, [r3, #0]
}
 80001d0:	bf00      	nop
 80001d2:	370c      	adds	r7, #12
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	20000000 	.word	0x20000000
 80001e0:	200000d4 	.word	0x200000d4
 80001e4:	200000d8 	.word	0x200000d8

080001e8 <setTimer4>:

void setTimer4(int duration){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	counter4=duration/TIMER_CYCLE;
 80001f0:	4b07      	ldr	r3, [pc, #28]	; (8000210 <setTimer4+0x28>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	687a      	ldr	r2, [r7, #4]
 80001f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80001fa:	4a06      	ldr	r2, [pc, #24]	; (8000214 <setTimer4+0x2c>)
 80001fc:	6013      	str	r3, [r2, #0]
	timer4_flag=0;
 80001fe:	4b06      	ldr	r3, [pc, #24]	; (8000218 <setTimer4+0x30>)
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	20000000 	.word	0x20000000
 8000214:	200000dc 	.word	0x200000dc
 8000218:	200000e0 	.word	0x200000e0

0800021c <TimerRun>:

void TimerRun(){
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	if(counter1>0){
 8000220:	4b21      	ldr	r3, [pc, #132]	; (80002a8 <TimerRun+0x8c>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	2b00      	cmp	r3, #0
 8000226:	dd0b      	ble.n	8000240 <TimerRun+0x24>
		counter1--;
 8000228:	4b1f      	ldr	r3, [pc, #124]	; (80002a8 <TimerRun+0x8c>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	3b01      	subs	r3, #1
 800022e:	4a1e      	ldr	r2, [pc, #120]	; (80002a8 <TimerRun+0x8c>)
 8000230:	6013      	str	r3, [r2, #0]
		if(counter1<=0){
 8000232:	4b1d      	ldr	r3, [pc, #116]	; (80002a8 <TimerRun+0x8c>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	2b00      	cmp	r3, #0
 8000238:	dc02      	bgt.n	8000240 <TimerRun+0x24>
			timer1_flag=1;
 800023a:	4b1c      	ldr	r3, [pc, #112]	; (80002ac <TimerRun+0x90>)
 800023c:	2201      	movs	r2, #1
 800023e:	601a      	str	r2, [r3, #0]
		}
	}

	if(counter2>0){
 8000240:	4b1b      	ldr	r3, [pc, #108]	; (80002b0 <TimerRun+0x94>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	2b00      	cmp	r3, #0
 8000246:	dd0b      	ble.n	8000260 <TimerRun+0x44>
		counter2--;
 8000248:	4b19      	ldr	r3, [pc, #100]	; (80002b0 <TimerRun+0x94>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	3b01      	subs	r3, #1
 800024e:	4a18      	ldr	r2, [pc, #96]	; (80002b0 <TimerRun+0x94>)
 8000250:	6013      	str	r3, [r2, #0]
		if(counter2<=0){
 8000252:	4b17      	ldr	r3, [pc, #92]	; (80002b0 <TimerRun+0x94>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	dc02      	bgt.n	8000260 <TimerRun+0x44>
			timer2_flag=1;
 800025a:	4b16      	ldr	r3, [pc, #88]	; (80002b4 <TimerRun+0x98>)
 800025c:	2201      	movs	r2, #1
 800025e:	601a      	str	r2, [r3, #0]
		}
	}

	if(counter3>0){
 8000260:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <TimerRun+0x9c>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	2b00      	cmp	r3, #0
 8000266:	dd0b      	ble.n	8000280 <TimerRun+0x64>
		counter3--;
 8000268:	4b13      	ldr	r3, [pc, #76]	; (80002b8 <TimerRun+0x9c>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	3b01      	subs	r3, #1
 800026e:	4a12      	ldr	r2, [pc, #72]	; (80002b8 <TimerRun+0x9c>)
 8000270:	6013      	str	r3, [r2, #0]
		if(counter3<=0){
 8000272:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <TimerRun+0x9c>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	2b00      	cmp	r3, #0
 8000278:	dc02      	bgt.n	8000280 <TimerRun+0x64>
			timer3_flag=1;
 800027a:	4b10      	ldr	r3, [pc, #64]	; (80002bc <TimerRun+0xa0>)
 800027c:	2201      	movs	r2, #1
 800027e:	601a      	str	r2, [r3, #0]
		}
	}

	if(counter4>0){
 8000280:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <TimerRun+0xa4>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	dd0b      	ble.n	80002a0 <TimerRun+0x84>
		counter4--;
 8000288:	4b0d      	ldr	r3, [pc, #52]	; (80002c0 <TimerRun+0xa4>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	3b01      	subs	r3, #1
 800028e:	4a0c      	ldr	r2, [pc, #48]	; (80002c0 <TimerRun+0xa4>)
 8000290:	6013      	str	r3, [r2, #0]
		if(counter4<=0){
 8000292:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <TimerRun+0xa4>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	2b00      	cmp	r3, #0
 8000298:	dc02      	bgt.n	80002a0 <TimerRun+0x84>
			timer4_flag=1;
 800029a:	4b0a      	ldr	r3, [pc, #40]	; (80002c4 <TimerRun+0xa8>)
 800029c:	2201      	movs	r2, #1
 800029e:	601a      	str	r2, [r3, #0]
		}
	}
}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	200000c4 	.word	0x200000c4
 80002ac:	200000c8 	.word	0x200000c8
 80002b0:	200000cc 	.word	0x200000cc
 80002b4:	200000d0 	.word	0x200000d0
 80002b8:	200000d4 	.word	0x200000d4
 80002bc:	200000d8 	.word	0x200000d8
 80002c0:	200000dc 	.word	0x200000dc
 80002c4:	200000e0 	.word	0x200000e0

080002c8 <button1_reading>:
/* 	BUTTON1 PARAMETER START */
int debounceButton1Buffer2=NORMAL_STATE;
int debounceButton1Buffer1=NORMAL_STATE;
int button1Buffer=NORMAL_STATE;
/* 	BUTTON1 PARAMETER END */
void button1_reading(){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	debounceButton1Buffer2 =debounceButton1Buffer1;
 80002cc:	4b0b      	ldr	r3, [pc, #44]	; (80002fc <button1_reading+0x34>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a0b      	ldr	r2, [pc, #44]	; (8000300 <button1_reading+0x38>)
 80002d2:	6013      	str	r3, [r2, #0]
	debounceButton1Buffer1 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80002d4:	2102      	movs	r1, #2
 80002d6:	480b      	ldr	r0, [pc, #44]	; (8000304 <button1_reading+0x3c>)
 80002d8:	f001 fee4 	bl	80020a4 <HAL_GPIO_ReadPin>
 80002dc:	4603      	mov	r3, r0
 80002de:	461a      	mov	r2, r3
 80002e0:	4b06      	ldr	r3, [pc, #24]	; (80002fc <button1_reading+0x34>)
 80002e2:	601a      	str	r2, [r3, #0]
	if(debounceButton1Buffer1 == debounceButton1Buffer2)
 80002e4:	4b05      	ldr	r3, [pc, #20]	; (80002fc <button1_reading+0x34>)
 80002e6:	681a      	ldr	r2, [r3, #0]
 80002e8:	4b05      	ldr	r3, [pc, #20]	; (8000300 <button1_reading+0x38>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	d103      	bne.n	80002f8 <button1_reading+0x30>
		button1Buffer = debounceButton1Buffer1;
 80002f0:	4b02      	ldr	r3, [pc, #8]	; (80002fc <button1_reading+0x34>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a04      	ldr	r2, [pc, #16]	; (8000308 <button1_reading+0x40>)
 80002f6:	6013      	str	r3, [r2, #0]
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	20000008 	.word	0x20000008
 8000300:	20000004 	.word	0x20000004
 8000304:	40010800 	.word	0x40010800
 8000308:	2000000c 	.word	0x2000000c

0800030c <button2_reading>:
int debounceButton2Buffer1=NORMAL_STATE;
int button2Buffer=NORMAL_STATE;
int counterForButton2Press1s=1000;
int flagForButton2Press1s=0;
/* 	BUTTON2 PARAMETER END */
void button2_reading(){
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	debounceButton2Buffer2 =debounceButton2Buffer1;
 8000310:	4b1a      	ldr	r3, [pc, #104]	; (800037c <button2_reading+0x70>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a1a      	ldr	r2, [pc, #104]	; (8000380 <button2_reading+0x74>)
 8000316:	6013      	str	r3, [r2, #0]
	debounceButton2Buffer1 = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8000318:	2110      	movs	r1, #16
 800031a:	481a      	ldr	r0, [pc, #104]	; (8000384 <button2_reading+0x78>)
 800031c:	f001 fec2 	bl	80020a4 <HAL_GPIO_ReadPin>
 8000320:	4603      	mov	r3, r0
 8000322:	461a      	mov	r2, r3
 8000324:	4b15      	ldr	r3, [pc, #84]	; (800037c <button2_reading+0x70>)
 8000326:	601a      	str	r2, [r3, #0]
	if(debounceButton2Buffer1 == debounceButton2Buffer2)
 8000328:	4b14      	ldr	r3, [pc, #80]	; (800037c <button2_reading+0x70>)
 800032a:	681a      	ldr	r2, [r3, #0]
 800032c:	4b14      	ldr	r3, [pc, #80]	; (8000380 <button2_reading+0x74>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	429a      	cmp	r2, r3
 8000332:	d103      	bne.n	800033c <button2_reading+0x30>
		button2Buffer = debounceButton2Buffer1;
 8000334:	4b11      	ldr	r3, [pc, #68]	; (800037c <button2_reading+0x70>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a13      	ldr	r2, [pc, #76]	; (8000388 <button2_reading+0x7c>)
 800033a:	6013      	str	r3, [r2, #0]

	if(button2Buffer == PRESSED_STATE){
 800033c:	4b12      	ldr	r3, [pc, #72]	; (8000388 <button2_reading+0x7c>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d10d      	bne.n	8000360 <button2_reading+0x54>
	//if a button is pressed, we start counting
		if(counterForButton2Press1s >0){
 8000344:	4b11      	ldr	r3, [pc, #68]	; (800038c <button2_reading+0x80>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2b00      	cmp	r3, #0
 800034a:	dd05      	ble.n	8000358 <button2_reading+0x4c>
			counterForButton2Press1s=counterForButton2Press1s-TIMER_CYCLE;
 800034c:	4b0f      	ldr	r3, [pc, #60]	; (800038c <button2_reading+0x80>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	3b0a      	subs	r3, #10
 8000352:	4a0e      	ldr	r2, [pc, #56]	; (800038c <button2_reading+0x80>)
 8000354:	6013      	str	r3, [r2, #0]
		}
	}else if(button2Buffer == NORMAL_STATE){
		counterForButton2Press1s = 1000;
		flagForButton2Press1s = 0;
	}
}
 8000356:	e00e      	b.n	8000376 <button2_reading+0x6a>
			flagForButton2Press1s = 1;
 8000358:	4b0d      	ldr	r3, [pc, #52]	; (8000390 <button2_reading+0x84>)
 800035a:	2201      	movs	r2, #1
 800035c:	601a      	str	r2, [r3, #0]
}
 800035e:	e00a      	b.n	8000376 <button2_reading+0x6a>
	}else if(button2Buffer == NORMAL_STATE){
 8000360:	4b09      	ldr	r3, [pc, #36]	; (8000388 <button2_reading+0x7c>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	2b01      	cmp	r3, #1
 8000366:	d106      	bne.n	8000376 <button2_reading+0x6a>
		counterForButton2Press1s = 1000;
 8000368:	4b08      	ldr	r3, [pc, #32]	; (800038c <button2_reading+0x80>)
 800036a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800036e:	601a      	str	r2, [r3, #0]
		flagForButton2Press1s = 0;
 8000370:	4b07      	ldr	r3, [pc, #28]	; (8000390 <button2_reading+0x84>)
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	20000014 	.word	0x20000014
 8000380:	20000010 	.word	0x20000010
 8000384:	40010800 	.word	0x40010800
 8000388:	20000018 	.word	0x20000018
 800038c:	2000001c 	.word	0x2000001c
 8000390:	200000e4 	.word	0x200000e4

08000394 <button3_reading>:
/* 	BUTTON3 PARAMETER START */
int debounceButton3Buffer2=NORMAL_STATE;
int debounceButton3Buffer1=NORMAL_STATE;
int button3Buffer=NORMAL_STATE;
/* 	BUTTON3 PARAMETER END */
void button3_reading(){
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
	debounceButton3Buffer2 =debounceButton3Buffer1;
 8000398:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <button3_reading+0x34>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a0b      	ldr	r2, [pc, #44]	; (80003cc <button3_reading+0x38>)
 800039e:	6013      	str	r3, [r2, #0]
	debounceButton3Buffer1 = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 80003a0:	2101      	movs	r1, #1
 80003a2:	480b      	ldr	r0, [pc, #44]	; (80003d0 <button3_reading+0x3c>)
 80003a4:	f001 fe7e 	bl	80020a4 <HAL_GPIO_ReadPin>
 80003a8:	4603      	mov	r3, r0
 80003aa:	461a      	mov	r2, r3
 80003ac:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <button3_reading+0x34>)
 80003ae:	601a      	str	r2, [r3, #0]
	if(debounceButton3Buffer1 == debounceButton3Buffer2)
 80003b0:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <button3_reading+0x34>)
 80003b2:	681a      	ldr	r2, [r3, #0]
 80003b4:	4b05      	ldr	r3, [pc, #20]	; (80003cc <button3_reading+0x38>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d103      	bne.n	80003c4 <button3_reading+0x30>
		button3Buffer = debounceButton3Buffer1;
 80003bc:	4b02      	ldr	r3, [pc, #8]	; (80003c8 <button3_reading+0x34>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a04      	ldr	r2, [pc, #16]	; (80003d4 <button3_reading+0x40>)
 80003c2:	6013      	str	r3, [r2, #0]
}
 80003c4:	bf00      	nop
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	20000024 	.word	0x20000024
 80003cc:	20000020 	.word	0x20000020
 80003d0:	40010c00 	.word	0x40010c00
 80003d4:	20000028 	.word	0x20000028

080003d8 <button4_reading>:
/* 	BUTTON4 PARAMETER START */
int debounceButton4Buffer2=NORMAL_STATE;
int debounceButton4Buffer1=NORMAL_STATE;
int button4Buffer=NORMAL_STATE;
/* 	BUTTON4 PARAMETER END */
void button4_reading(){
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	debounceButton4Buffer2 =debounceButton4Buffer1;
 80003dc:	4b0b      	ldr	r3, [pc, #44]	; (800040c <button4_reading+0x34>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a0b      	ldr	r2, [pc, #44]	; (8000410 <button4_reading+0x38>)
 80003e2:	6013      	str	r3, [r2, #0]
	debounceButton4Buffer1 = HAL_GPIO_ReadPin(Button4_GPIO_Port, Button4_Pin);
 80003e4:	2101      	movs	r1, #1
 80003e6:	480b      	ldr	r0, [pc, #44]	; (8000414 <button4_reading+0x3c>)
 80003e8:	f001 fe5c 	bl	80020a4 <HAL_GPIO_ReadPin>
 80003ec:	4603      	mov	r3, r0
 80003ee:	461a      	mov	r2, r3
 80003f0:	4b06      	ldr	r3, [pc, #24]	; (800040c <button4_reading+0x34>)
 80003f2:	601a      	str	r2, [r3, #0]
	if(debounceButton4Buffer1 == debounceButton4Buffer2)
 80003f4:	4b05      	ldr	r3, [pc, #20]	; (800040c <button4_reading+0x34>)
 80003f6:	681a      	ldr	r2, [r3, #0]
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <button4_reading+0x38>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	429a      	cmp	r2, r3
 80003fe:	d103      	bne.n	8000408 <button4_reading+0x30>
		button4Buffer = debounceButton4Buffer1;
 8000400:	4b02      	ldr	r3, [pc, #8]	; (800040c <button4_reading+0x34>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a04      	ldr	r2, [pc, #16]	; (8000418 <button4_reading+0x40>)
 8000406:	6013      	str	r3, [r2, #0]
}
 8000408:	bf00      	nop
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20000030 	.word	0x20000030
 8000410:	2000002c 	.word	0x2000002c
 8000414:	40010800 	.word	0x40010800
 8000418:	20000034 	.word	0x20000034

0800041c <button1_pressed>:

int button1_pressed(){
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
	return (button1Buffer == PRESSED_STATE);
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <button1_pressed+0x1c>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	2b00      	cmp	r3, #0
 8000426:	bf0c      	ite	eq
 8000428:	2301      	moveq	r3, #1
 800042a:	2300      	movne	r3, #0
 800042c:	b2db      	uxtb	r3, r3
}
 800042e:	4618      	mov	r0, r3
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	2000000c 	.word	0x2000000c

0800043c <button2_pressed>:

int button2_pressed(){
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
	return (button2Buffer == PRESSED_STATE);
 8000440:	4b05      	ldr	r3, [pc, #20]	; (8000458 <button2_pressed+0x1c>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	bf0c      	ite	eq
 8000448:	2301      	moveq	r3, #1
 800044a:	2300      	movne	r3, #0
 800044c:	b2db      	uxtb	r3, r3
}
 800044e:	4618      	mov	r0, r3
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	20000018 	.word	0x20000018

0800045c <button2_pressed_1s>:
int button2_pressed_1s(){
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
	return (flagForButton2Press1s == 1);
 8000460:	4b05      	ldr	r3, [pc, #20]	; (8000478 <button2_pressed_1s+0x1c>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	bf0c      	ite	eq
 8000468:	2301      	moveq	r3, #1
 800046a:	2300      	movne	r3, #0
 800046c:	b2db      	uxtb	r3, r3
}
 800046e:	4618      	mov	r0, r3
 8000470:	46bd      	mov	sp, r7
 8000472:	bc80      	pop	{r7}
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	200000e4 	.word	0x200000e4

0800047c <button3_pressed>:

int button3_pressed(){
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
	return (button3Buffer == PRESSED_STATE);
 8000480:	4b05      	ldr	r3, [pc, #20]	; (8000498 <button3_pressed+0x1c>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2b00      	cmp	r3, #0
 8000486:	bf0c      	ite	eq
 8000488:	2301      	moveq	r3, #1
 800048a:	2300      	movne	r3, #0
 800048c:	b2db      	uxtb	r3, r3
}
 800048e:	4618      	mov	r0, r3
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	20000028 	.word	0x20000028

0800049c <button4_pressed>:

int button4_pressed(){
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
	return (button4Buffer == PRESSED_STATE);
 80004a0:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <button4_pressed+0x1c>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	bf0c      	ite	eq
 80004a8:	2301      	moveq	r3, #1
 80004aa:	2300      	movne	r3, #0
 80004ac:	b2db      	uxtb	r3, r3
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	20000034 	.word	0x20000034

080004bc <fsm_for_input_processing>:
void ToggleRED();
void ToggleGREEN();
void ToggleYELLOW();


void fsm_for_input_processing(UART_HandleTypeDef*huart,TIM_HandleTypeDef*htim3){
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	6039      	str	r1, [r7, #0]
	switch(state){
 80004c6:	4b96      	ldr	r3, [pc, #600]	; (8000720 <fsm_for_input_processing+0x264>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	2b07      	cmp	r3, #7
 80004cc:	f200 8489 	bhi.w	8000de2 <fsm_for_input_processing+0x926>
 80004d0:	a201      	add	r2, pc, #4	; (adr r2, 80004d8 <fsm_for_input_processing+0x1c>)
 80004d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004d6:	bf00      	nop
 80004d8:	080004f9 	.word	0x080004f9
 80004dc:	08000593 	.word	0x08000593
 80004e0:	080007c7 	.word	0x080007c7
 80004e4:	080008df 	.word	0x080008df
 80004e8:	08000a3d 	.word	0x08000a3d
 80004ec:	08000b5b 	.word	0x08000b5b
 80004f0:	08000c41 	.word	0x08000c41
 80004f4:	08000d93 	.word	0x08000d93
	case INIT:
		print=0;
 80004f8:	4b8a      	ldr	r3, [pc, #552]	; (8000724 <fsm_for_input_processing+0x268>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
		/* INIT PORT OUTPUT START */
		turnOffSingleLed();
 80004fe:	f000 fd7b 	bl	8000ff8 <turnOffSingleLed>
		/* INIT PORT OUTPUT END */

		/* INITIALIZE TEMPORARY DURATION START */
		red_temp_dur=RED_DURATION;
 8000502:	4b89      	ldr	r3, [pc, #548]	; (8000728 <fsm_for_input_processing+0x26c>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a89      	ldr	r2, [pc, #548]	; (800072c <fsm_for_input_processing+0x270>)
 8000508:	6013      	str	r3, [r2, #0]
		yellow_temp_dur=YELLOW_DURATION;
 800050a:	4b89      	ldr	r3, [pc, #548]	; (8000730 <fsm_for_input_processing+0x274>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a89      	ldr	r2, [pc, #548]	; (8000734 <fsm_for_input_processing+0x278>)
 8000510:	6013      	str	r3, [r2, #0]
		green_temp_dur=GREEN_DURATION;
 8000512:	4b89      	ldr	r3, [pc, #548]	; (8000738 <fsm_for_input_processing+0x27c>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a89      	ldr	r2, [pc, #548]	; (800073c <fsm_for_input_processing+0x280>)
 8000518:	6013      	str	r3, [r2, #0]
		/* INITIALIZE TEMPORARY DURATION END */

		/* INITIALIZE COUNT START */
		leds_way1_count[0]=RED_DURATION;
 800051a:	4b83      	ldr	r3, [pc, #524]	; (8000728 <fsm_for_input_processing+0x26c>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a88      	ldr	r2, [pc, #544]	; (8000740 <fsm_for_input_processing+0x284>)
 8000520:	6013      	str	r3, [r2, #0]
		leds_way1_count[1]=GREEN_DURATION;
 8000522:	4b85      	ldr	r3, [pc, #532]	; (8000738 <fsm_for_input_processing+0x27c>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a86      	ldr	r2, [pc, #536]	; (8000740 <fsm_for_input_processing+0x284>)
 8000528:	6053      	str	r3, [r2, #4]
		leds_way1_count[2]=YELLOW_DURATION;
 800052a:	4b81      	ldr	r3, [pc, #516]	; (8000730 <fsm_for_input_processing+0x274>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a84      	ldr	r2, [pc, #528]	; (8000740 <fsm_for_input_processing+0x284>)
 8000530:	6093      	str	r3, [r2, #8]
		turnOnRed1();
 8000532:	f000 fdf1 	bl	8001118 <turnOnRed1>
		current_led_way1=RED;
 8000536:	4b83      	ldr	r3, [pc, #524]	; (8000744 <fsm_for_input_processing+0x288>)
 8000538:	2200      	movs	r2, #0
 800053a:	701a      	strb	r2, [r3, #0]
		leds_way2_count[0]=RED_DURATION;
 800053c:	4b7a      	ldr	r3, [pc, #488]	; (8000728 <fsm_for_input_processing+0x26c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a81      	ldr	r2, [pc, #516]	; (8000748 <fsm_for_input_processing+0x28c>)
 8000542:	6013      	str	r3, [r2, #0]
		leds_way2_count[1]=GREEN_DURATION;
 8000544:	4b7c      	ldr	r3, [pc, #496]	; (8000738 <fsm_for_input_processing+0x27c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a7f      	ldr	r2, [pc, #508]	; (8000748 <fsm_for_input_processing+0x28c>)
 800054a:	6053      	str	r3, [r2, #4]
		leds_way2_count[2]=YELLOW_DURATION;
 800054c:	4b78      	ldr	r3, [pc, #480]	; (8000730 <fsm_for_input_processing+0x274>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a7d      	ldr	r2, [pc, #500]	; (8000748 <fsm_for_input_processing+0x28c>)
 8000552:	6093      	str	r3, [r2, #8]
		turnOnGreen2();
 8000554:	f000 fe1c 	bl	8001190 <turnOnGreen2>
		current_led_way2=GREEN;
 8000558:	4b7c      	ldr	r3, [pc, #496]	; (800074c <fsm_for_input_processing+0x290>)
 800055a:	2202      	movs	r2, #2
 800055c:	701a      	strb	r2, [r3, #0]
		PES_LED_OFF();
 800055e:	f000 fdb3 	bl	80010c8 <PES_LED_OFF>
		/* INITIALIZE COUNT END */

		state=MODE1;
 8000562:	4b6f      	ldr	r3, [pc, #444]	; (8000720 <fsm_for_input_processing+0x264>)
 8000564:	2201      	movs	r2, #1
 8000566:	701a      	strb	r2, [r3, #0]
		setTimer4(1000);  //SET TIMER4 FOR COUNT DOWN
 8000568:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800056c:	f7ff fe3c 	bl	80001e8 <setTimer4>

		/* PES_LED SETUP START */
		pes_led_period=(RED_DURATION+YELLOW_DURATION+GREEN_DURATION)*2;
 8000570:	4b6d      	ldr	r3, [pc, #436]	; (8000728 <fsm_for_input_processing+0x26c>)
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	4b6e      	ldr	r3, [pc, #440]	; (8000730 <fsm_for_input_processing+0x274>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	441a      	add	r2, r3
 800057a:	4b6f      	ldr	r3, [pc, #444]	; (8000738 <fsm_for_input_processing+0x27c>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4413      	add	r3, r2
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	4a73      	ldr	r2, [pc, #460]	; (8000750 <fsm_for_input_processing+0x294>)
 8000584:	6013      	str	r3, [r2, #0]
		pes_led_count=pes_led_period;
 8000586:	4b72      	ldr	r3, [pc, #456]	; (8000750 <fsm_for_input_processing+0x294>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a72      	ldr	r2, [pc, #456]	; (8000754 <fsm_for_input_processing+0x298>)
 800058c:	6013      	str	r3, [r2, #0]
		/* PES_LED_SETUP END */
		break;
 800058e:	f000 bc28 	b.w	8000de2 <fsm_for_input_processing+0x926>
	case MODE1:
		/* COUNT DOWN START */
		if(timer4_flag==1){
 8000592:	4b71      	ldr	r3, [pc, #452]	; (8000758 <fsm_for_input_processing+0x29c>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2b01      	cmp	r3, #1
 8000598:	d121      	bne.n	80005de <fsm_for_input_processing+0x122>
			setTimer4(1000);
 800059a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800059e:	f7ff fe23 	bl	80001e8 <setTimer4>
			pes_led_count--;
 80005a2:	4b6c      	ldr	r3, [pc, #432]	; (8000754 <fsm_for_input_processing+0x298>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	3b01      	subs	r3, #1
 80005a8:	4a6a      	ldr	r2, [pc, #424]	; (8000754 <fsm_for_input_processing+0x298>)
 80005aa:	6013      	str	r3, [r2, #0]
			trafficLightCount(leds_way1_count,&current_led_way1);
 80005ac:	4965      	ldr	r1, [pc, #404]	; (8000744 <fsm_for_input_processing+0x288>)
 80005ae:	4864      	ldr	r0, [pc, #400]	; (8000740 <fsm_for_input_processing+0x284>)
 80005b0:	f000 fcd0 	bl	8000f54 <trafficLightCount>
			trafficLightCount(leds_way2_count,&current_led_way2);
 80005b4:	4965      	ldr	r1, [pc, #404]	; (800074c <fsm_for_input_processing+0x290>)
 80005b6:	4864      	ldr	r0, [pc, #400]	; (8000748 <fsm_for_input_processing+0x28c>)
 80005b8:	f000 fccc 	bl	8000f54 <trafficLightCount>
			displaySingleLedsMode1();
 80005bc:	f000 fc9e 	bl	8000efc <displaySingleLedsMode1>
			HAL_UART_Transmit(huart, traffic_light_num,
			sprintf(traffic_light_num,"!7SEG:%d%d#\r",led_buffer1[0],led_buffer1[1]), 100);
 80005c0:	4b66      	ldr	r3, [pc, #408]	; (800075c <fsm_for_input_processing+0x2a0>)
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	4b65      	ldr	r3, [pc, #404]	; (800075c <fsm_for_input_processing+0x2a0>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	4965      	ldr	r1, [pc, #404]	; (8000760 <fsm_for_input_processing+0x2a4>)
 80005ca:	4866      	ldr	r0, [pc, #408]	; (8000764 <fsm_for_input_processing+0x2a8>)
 80005cc:	f003 fe1c 	bl	8004208 <siprintf>
 80005d0:	4603      	mov	r3, r0
			HAL_UART_Transmit(huart, traffic_light_num,
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	2364      	movs	r3, #100	; 0x64
 80005d6:	4963      	ldr	r1, [pc, #396]	; (8000764 <fsm_for_input_processing+0x2a8>)
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f003 f958 	bl	800388e <HAL_UART_Transmit>
		}
		/* COUNT DOWN END */

		/* UART TRANSMIT START */
		if(current_led_way1==RED){
 80005de:	4b59      	ldr	r3, [pc, #356]	; (8000744 <fsm_for_input_processing+0x288>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d105      	bne.n	80005f2 <fsm_for_input_processing+0x136>
			update_led_buffer(leds_way1_count[0]);
 80005e6:	4b56      	ldr	r3, [pc, #344]	; (8000740 <fsm_for_input_processing+0x284>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fe10 	bl	8001210 <update_led_buffer>
 80005f0:	e012      	b.n	8000618 <fsm_for_input_processing+0x15c>
		}else if(current_led_way1==GREEN){
 80005f2:	4b54      	ldr	r3, [pc, #336]	; (8000744 <fsm_for_input_processing+0x288>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b02      	cmp	r3, #2
 80005f8:	d105      	bne.n	8000606 <fsm_for_input_processing+0x14a>
			update_led_buffer(leds_way1_count[1]);
 80005fa:	4b51      	ldr	r3, [pc, #324]	; (8000740 <fsm_for_input_processing+0x284>)
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 fe06 	bl	8001210 <update_led_buffer>
 8000604:	e008      	b.n	8000618 <fsm_for_input_processing+0x15c>
		}else if(current_led_way1==YELLOW){
 8000606:	4b4f      	ldr	r3, [pc, #316]	; (8000744 <fsm_for_input_processing+0x288>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d104      	bne.n	8000618 <fsm_for_input_processing+0x15c>
			update_led_buffer(leds_way1_count[2]);
 800060e:	4b4c      	ldr	r3, [pc, #304]	; (8000740 <fsm_for_input_processing+0x284>)
 8000610:	689b      	ldr	r3, [r3, #8]
 8000612:	4618      	mov	r0, r3
 8000614:	f000 fdfc 	bl	8001210 <update_led_buffer>
		}

		HAL_UART_Transmit(huart, traffic_light_num,
		sprintf(traffic_light_num,"!7SEG:%d%d#\r",led_buffer1[0],led_buffer1[1]), 100);
 8000618:	4b50      	ldr	r3, [pc, #320]	; (800075c <fsm_for_input_processing+0x2a0>)
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	4b4f      	ldr	r3, [pc, #316]	; (800075c <fsm_for_input_processing+0x2a0>)
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	494f      	ldr	r1, [pc, #316]	; (8000760 <fsm_for_input_processing+0x2a4>)
 8000622:	4850      	ldr	r0, [pc, #320]	; (8000764 <fsm_for_input_processing+0x2a8>)
 8000624:	f003 fdf0 	bl	8004208 <siprintf>
 8000628:	4603      	mov	r3, r0
		HAL_UART_Transmit(huart, traffic_light_num,
 800062a:	b29a      	uxth	r2, r3
 800062c:	2364      	movs	r3, #100	; 0x64
 800062e:	494d      	ldr	r1, [pc, #308]	; (8000764 <fsm_for_input_processing+0x2a8>)
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f003 f92c 	bl	800388e <HAL_UART_Transmit>
		/* UART TRANSMIT END */


		/*EXECUTE INPUT BUTTON1 START */
		if(button1_executed==0){
 8000636:	4b4c      	ldr	r3, [pc, #304]	; (8000768 <fsm_for_input_processing+0x2ac>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d124      	bne.n	8000688 <fsm_for_input_processing+0x1cc>
			if(button1_pressed()==TRUE){
 800063e:	f7ff feed 	bl	800041c <button1_pressed>
 8000642:	4603      	mov	r3, r0
 8000644:	2b01      	cmp	r3, #1
 8000646:	d12b      	bne.n	80006a0 <fsm_for_input_processing+0x1e4>
				print=0;
 8000648:	4b36      	ldr	r3, [pc, #216]	; (8000724 <fsm_for_input_processing+0x268>)
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
				state=MODE2;
 800064e:	4b34      	ldr	r3, [pc, #208]	; (8000720 <fsm_for_input_processing+0x264>)
 8000650:	2202      	movs	r2, #2
 8000652:	701a      	strb	r2, [r3, #0]
				button1_executed=1;
 8000654:	4b44      	ldr	r3, [pc, #272]	; (8000768 <fsm_for_input_processing+0x2ac>)
 8000656:	2201      	movs	r2, #1
 8000658:	601a      	str	r2, [r3, #0]
				setTimer1(250);   //set timer for red led blinking
 800065a:	20fa      	movs	r0, #250	; 0xfa
 800065c:	f7ff fd76 	bl	800014c <setTimer1>
				/* INITIALIZE TEMP DURATION START */
				red_temp_dur=RED_DURATION;
 8000660:	4b31      	ldr	r3, [pc, #196]	; (8000728 <fsm_for_input_processing+0x26c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a31      	ldr	r2, [pc, #196]	; (800072c <fsm_for_input_processing+0x270>)
 8000666:	6013      	str	r3, [r2, #0]
				yellow_temp_dur=YELLOW_DURATION;
 8000668:	4b31      	ldr	r3, [pc, #196]	; (8000730 <fsm_for_input_processing+0x274>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a31      	ldr	r2, [pc, #196]	; (8000734 <fsm_for_input_processing+0x278>)
 800066e:	6013      	str	r3, [r2, #0]
				green_temp_dur=GREEN_DURATION;
 8000670:	4b31      	ldr	r3, [pc, #196]	; (8000738 <fsm_for_input_processing+0x27c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a31      	ldr	r2, [pc, #196]	; (800073c <fsm_for_input_processing+0x280>)
 8000676:	6013      	str	r3, [r2, #0]
				/* INITIALIZE TEMP DURATION END */
				turnOffSingleLed();
 8000678:	f000 fcbe 	bl	8000ff8 <turnOffSingleLed>
				PES_LED_OFF();
 800067c:	f000 fd24 	bl	80010c8 <PES_LED_OFF>
				flag_pes=0;
 8000680:	4b3a      	ldr	r3, [pc, #232]	; (800076c <fsm_for_input_processing+0x2b0>)
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	e00b      	b.n	80006a0 <fsm_for_input_processing+0x1e4>
			}
		}else if(button1_executed==1){
 8000688:	4b37      	ldr	r3, [pc, #220]	; (8000768 <fsm_for_input_processing+0x2ac>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d107      	bne.n	80006a0 <fsm_for_input_processing+0x1e4>
			if(button1_pressed()==FALSE){
 8000690:	f7ff fec4 	bl	800041c <button1_pressed>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d102      	bne.n	80006a0 <fsm_for_input_processing+0x1e4>
				button1_executed=0;
 800069a:	4b33      	ldr	r3, [pc, #204]	; (8000768 <fsm_for_input_processing+0x2ac>)
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
			}
		}
		/*EXECUTE INPUT BUTTON1 END */

		/* PES LED EXCUTION START */
		if(button4_pressed()==1){
 80006a0:	f7ff fefc 	bl	800049c <button4_pressed>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d111      	bne.n	80006ce <fsm_for_input_processing+0x212>
			if(button4_executed==0){
 80006aa:	4b31      	ldr	r3, [pc, #196]	; (8000770 <fsm_for_input_processing+0x2b4>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d115      	bne.n	80006de <fsm_for_input_processing+0x222>
				flag_pes=1;
 80006b2:	4b2e      	ldr	r3, [pc, #184]	; (800076c <fsm_for_input_processing+0x2b0>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	601a      	str	r2, [r3, #0]
				button4_executed=1;
 80006b8:	4b2d      	ldr	r3, [pc, #180]	; (8000770 <fsm_for_input_processing+0x2b4>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
				timer2_flag = 1;
 80006be:	4b2d      	ldr	r3, [pc, #180]	; (8000774 <fsm_for_input_processing+0x2b8>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	601a      	str	r2, [r3, #0]
				pes_led_count=pes_led_period;
 80006c4:	4b22      	ldr	r3, [pc, #136]	; (8000750 <fsm_for_input_processing+0x294>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a22      	ldr	r2, [pc, #136]	; (8000754 <fsm_for_input_processing+0x298>)
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	e007      	b.n	80006de <fsm_for_input_processing+0x222>
			}
		}else if(button4_pressed()==0){
 80006ce:	f7ff fee5 	bl	800049c <button4_pressed>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d102      	bne.n	80006de <fsm_for_input_processing+0x222>
			button4_executed=0;
 80006d8:	4b25      	ldr	r3, [pc, #148]	; (8000770 <fsm_for_input_processing+0x2b4>)
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
		}

		if(flag_pes==1){
 80006de:	4b23      	ldr	r3, [pc, #140]	; (800076c <fsm_for_input_processing+0x2b0>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	f040 8378 	bne.w	8000dd8 <fsm_for_input_processing+0x91c>
			if(current_led_way1==RED){
 80006e8:	4b16      	ldr	r3, [pc, #88]	; (8000744 <fsm_for_input_processing+0x288>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d145      	bne.n	800077c <fsm_for_input_processing+0x2c0>
				PES_LED_ON();
 80006f0:	f000 fcc2 	bl	8001078 <PES_LED_ON>
				if (leds_way1_count[0] <= 3){
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <fsm_for_input_processing+0x284>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b03      	cmp	r3, #3
 80006fa:	dc4c      	bgt.n	8000796 <fsm_for_input_processing+0x2da>
					if (timer2_flag == 1){
 80006fc:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <fsm_for_input_processing+0x2b8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d148      	bne.n	8000796 <fsm_for_input_processing+0x2da>
						pwm = pwm +250;
 8000704:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <fsm_for_input_processing+0x2bc>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	33fa      	adds	r3, #250	; 0xfa
 800070a:	4a1b      	ldr	r2, [pc, #108]	; (8000778 <fsm_for_input_processing+0x2bc>)
 800070c:	6013      	str	r3, [r2, #0]
						__HAL_TIM_SetCompare(htim3, TIM_CHANNEL_1, pwm);
 800070e:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <fsm_for_input_processing+0x2bc>)
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	635a      	str	r2, [r3, #52]	; 0x34
						setTimer2(30);
 8000718:	201e      	movs	r0, #30
 800071a:	f7ff fd31 	bl	8000180 <setTimer2>
 800071e:	e03a      	b.n	8000796 <fsm_for_input_processing+0x2da>
 8000720:	20000140 	.word	0x20000140
 8000724:	20000174 	.word	0x20000174
 8000728:	20000120 	.word	0x20000120
 800072c:	20000134 	.word	0x20000134
 8000730:	20000124 	.word	0x20000124
 8000734:	20000138 	.word	0x20000138
 8000738:	20000128 	.word	0x20000128
 800073c:	2000013c 	.word	0x2000013c
 8000740:	20000144 	.word	0x20000144
 8000744:	20000141 	.word	0x20000141
 8000748:	20000154 	.word	0x20000154
 800074c:	20000150 	.word	0x20000150
 8000750:	2000012c 	.word	0x2000012c
 8000754:	20000130 	.word	0x20000130
 8000758:	200000e0 	.word	0x200000e0
 800075c:	2000017c 	.word	0x2000017c
 8000760:	08004b14 	.word	0x08004b14
 8000764:	200000e8 	.word	0x200000e8
 8000768:	20000160 	.word	0x20000160
 800076c:	20000168 	.word	0x20000168
 8000770:	2000016c 	.word	0x2000016c
 8000774:	200000d0 	.word	0x200000d0
 8000778:	2000011c 	.word	0x2000011c
					}
				}
			}else{
				PES_LED_RED();
 800077c:	f000 fc90 	bl	80010a0 <PES_LED_RED>
				timer2_flag = 1;
 8000780:	4b9d      	ldr	r3, [pc, #628]	; (80009f8 <fsm_for_input_processing+0x53c>)
 8000782:	2201      	movs	r2, #1
 8000784:	601a      	str	r2, [r3, #0]
				pwm = 0;
 8000786:	4b9d      	ldr	r3, [pc, #628]	; (80009fc <fsm_for_input_processing+0x540>)
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SetCompare(htim3, TIM_CHANNEL_1, pwm);
 800078c:	4b9b      	ldr	r3, [pc, #620]	; (80009fc <fsm_for_input_processing+0x540>)
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	635a      	str	r2, [r3, #52]	; 0x34
			}
			if(pes_led_count<=0 && current_led_way1!=RED){
 8000796:	4b9a      	ldr	r3, [pc, #616]	; (8000a00 <fsm_for_input_processing+0x544>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	f300 831c 	bgt.w	8000dd8 <fsm_for_input_processing+0x91c>
 80007a0:	4b98      	ldr	r3, [pc, #608]	; (8000a04 <fsm_for_input_processing+0x548>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	f000 8317 	beq.w	8000dd8 <fsm_for_input_processing+0x91c>
				PES_LED_OFF();
 80007aa:	f000 fc8d 	bl	80010c8 <PES_LED_OFF>
				pwm = 0;
 80007ae:	4b93      	ldr	r3, [pc, #588]	; (80009fc <fsm_for_input_processing+0x540>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
				flag_pes=0;
 80007b4:	4b94      	ldr	r3, [pc, #592]	; (8000a08 <fsm_for_input_processing+0x54c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SetCompare(htim3, TIM_CHANNEL_1, pwm);
 80007ba:	4b90      	ldr	r3, [pc, #576]	; (80009fc <fsm_for_input_processing+0x540>)
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	635a      	str	r2, [r3, #52]	; 0x34
			}
		}
		/* PES LED EXCUTION END */
		break;
 80007c4:	e308      	b.n	8000dd8 <fsm_for_input_processing+0x91c>
	case MODE2:
		/* UART TRANSMIT START */
		update_led_buffer(red_temp_dur);
 80007c6:	4b91      	ldr	r3, [pc, #580]	; (8000a0c <fsm_for_input_processing+0x550>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 fd20 	bl	8001210 <update_led_buffer>
		if(print==0){
 80007d0:	4b8f      	ldr	r3, [pc, #572]	; (8000a10 <fsm_for_input_processing+0x554>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d111      	bne.n	80007fc <fsm_for_input_processing+0x340>
			HAL_UART_Transmit(huart, traffic_light_num,
			sprintf(traffic_light_num,"!7SEG:%d%d#\r",led_buffer1[0],led_buffer1[1]), 100);
 80007d8:	4b8e      	ldr	r3, [pc, #568]	; (8000a14 <fsm_for_input_processing+0x558>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4b8d      	ldr	r3, [pc, #564]	; (8000a14 <fsm_for_input_processing+0x558>)
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	498d      	ldr	r1, [pc, #564]	; (8000a18 <fsm_for_input_processing+0x55c>)
 80007e2:	488e      	ldr	r0, [pc, #568]	; (8000a1c <fsm_for_input_processing+0x560>)
 80007e4:	f003 fd10 	bl	8004208 <siprintf>
 80007e8:	4603      	mov	r3, r0
			HAL_UART_Transmit(huart, traffic_light_num,
 80007ea:	b29a      	uxth	r2, r3
 80007ec:	2364      	movs	r3, #100	; 0x64
 80007ee:	498b      	ldr	r1, [pc, #556]	; (8000a1c <fsm_for_input_processing+0x560>)
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f003 f84c 	bl	800388e <HAL_UART_Transmit>
			print=1;
 80007f6:	4b86      	ldr	r3, [pc, #536]	; (8000a10 <fsm_for_input_processing+0x554>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	601a      	str	r2, [r3, #0]
		}
		/* UART TRANSMIT END */

		/* BLINK SINGLE RED LED START */
		if(timer1_flag==1){
 80007fc:	4b88      	ldr	r3, [pc, #544]	; (8000a20 <fsm_for_input_processing+0x564>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d119      	bne.n	8000838 <fsm_for_input_processing+0x37c>
			setTimer1(250);
 8000804:	20fa      	movs	r0, #250	; 0xfa
 8000806:	f7ff fca1 	bl	800014c <setTimer1>
			if(led_state==0){
 800080a:	4b86      	ldr	r3, [pc, #536]	; (8000a24 <fsm_for_input_processing+0x568>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d107      	bne.n	8000822 <fsm_for_input_processing+0x366>
				turnOnRed1();
 8000812:	f000 fc81 	bl	8001118 <turnOnRed1>
				turnOnRed2();
 8000816:	f000 fccb 	bl	80011b0 <turnOnRed2>
				led_state=1;
 800081a:	4b82      	ldr	r3, [pc, #520]	; (8000a24 <fsm_for_input_processing+0x568>)
 800081c:	2201      	movs	r2, #1
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	e00a      	b.n	8000838 <fsm_for_input_processing+0x37c>
			}else if(led_state==1){
 8000822:	4b80      	ldr	r3, [pc, #512]	; (8000a24 <fsm_for_input_processing+0x568>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d106      	bne.n	8000838 <fsm_for_input_processing+0x37c>
				turnOff1();
 800082a:	f000 fc9d 	bl	8001168 <turnOff1>
				turnOff2();
 800082e:	f000 fcdf 	bl	80011f0 <turnOff2>
				led_state=0;
 8000832:	4b7c      	ldr	r3, [pc, #496]	; (8000a24 <fsm_for_input_processing+0x568>)
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
			}
		}
		/* BLINK SINGLE RED LED END */

		/*EXECUTE INPUT BUTTON1 START */
		if(button1_executed==0){
 8000838:	4b7b      	ldr	r3, [pc, #492]	; (8000a28 <fsm_for_input_processing+0x56c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d110      	bne.n	8000862 <fsm_for_input_processing+0x3a6>
			if(button1_pressed()==TRUE){
 8000840:	f7ff fdec 	bl	800041c <button1_pressed>
 8000844:	4603      	mov	r3, r0
 8000846:	2b01      	cmp	r3, #1
 8000848:	d117      	bne.n	800087a <fsm_for_input_processing+0x3be>
				state=MODE3;
 800084a:	4b78      	ldr	r3, [pc, #480]	; (8000a2c <fsm_for_input_processing+0x570>)
 800084c:	2203      	movs	r2, #3
 800084e:	701a      	strb	r2, [r3, #0]
				button1_executed=1;
 8000850:	4b75      	ldr	r3, [pc, #468]	; (8000a28 <fsm_for_input_processing+0x56c>)
 8000852:	2201      	movs	r2, #1
 8000854:	601a      	str	r2, [r3, #0]
				turnOffSingleLed();
 8000856:	f000 fbcf 	bl	8000ff8 <turnOffSingleLed>
				print=0;
 800085a:	4b6d      	ldr	r3, [pc, #436]	; (8000a10 <fsm_for_input_processing+0x554>)
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	e00b      	b.n	800087a <fsm_for_input_processing+0x3be>
			}
		}else if(button1_executed==1){
 8000862:	4b71      	ldr	r3, [pc, #452]	; (8000a28 <fsm_for_input_processing+0x56c>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d107      	bne.n	800087a <fsm_for_input_processing+0x3be>
			if(button1_pressed()==FALSE){
 800086a:	f7ff fdd7 	bl	800041c <button1_pressed>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d102      	bne.n	800087a <fsm_for_input_processing+0x3be>
				button1_executed=0;
 8000874:	4b6c      	ldr	r3, [pc, #432]	; (8000a28 <fsm_for_input_processing+0x56c>)
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
			}
		}
		/*EXECUTE INPUT BUTTON1 END */

		/*EXECUTE INPUT BUTTON3 START */
		if(button3_pressed()==TRUE){
 800087a:	f7ff fdff 	bl	800047c <button3_pressed>
 800087e:	4603      	mov	r3, r0
 8000880:	2b01      	cmp	r3, #1
 8000882:	d105      	bne.n	8000890 <fsm_for_input_processing+0x3d4>
			state=UPDATE_DURATION;
 8000884:	4b69      	ldr	r3, [pc, #420]	; (8000a2c <fsm_for_input_processing+0x570>)
 8000886:	2207      	movs	r2, #7
 8000888:	701a      	strb	r2, [r3, #0]
			LedToChange=RED;
 800088a:	4b69      	ldr	r3, [pc, #420]	; (8000a30 <fsm_for_input_processing+0x574>)
 800088c:	2200      	movs	r2, #0
 800088e:	701a      	strb	r2, [r3, #0]
		}
		/*EXECUTE INPUT BUTTON3 END */

		/*EXECUTE INPUT BUTTON2 START */
		if(button2_pressed()==TRUE){
 8000890:	f7ff fdd4 	bl	800043c <button2_pressed>
 8000894:	4603      	mov	r3, r0
 8000896:	2b01      	cmp	r3, #1
 8000898:	d108      	bne.n	80008ac <fsm_for_input_processing+0x3f0>
			state=INCREASE;
 800089a:	4b64      	ldr	r3, [pc, #400]	; (8000a2c <fsm_for_input_processing+0x570>)
 800089c:	2205      	movs	r2, #5
 800089e:	701a      	strb	r2, [r3, #0]
			LedToChange=RED;
 80008a0:	4b63      	ldr	r3, [pc, #396]	; (8000a30 <fsm_for_input_processing+0x574>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
			button2_increase1=0;
 80008a6:	4b63      	ldr	r3, [pc, #396]	; (8000a34 <fsm_for_input_processing+0x578>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
		}
		/*EXECUTE INPUT BUTTON2 END */
		//TO DO
		/* UART TRANSMIT START */
		if(LedToChange==RED){
 80008ac:	4b60      	ldr	r3, [pc, #384]	; (8000a30 <fsm_for_input_processing+0x574>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d104      	bne.n	80008be <fsm_for_input_processing+0x402>
			update_led_buffer(red_temp_dur);
 80008b4:	4b55      	ldr	r3, [pc, #340]	; (8000a0c <fsm_for_input_processing+0x550>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 fca9 	bl	8001210 <update_led_buffer>
		}
		HAL_UART_Transmit(huart, traffic_light_num,
				sprintf(traffic_light_num,"!7SEG:%d%d#\r",led_buffer1[0],led_buffer1[1]), 100);
 80008be:	4b55      	ldr	r3, [pc, #340]	; (8000a14 <fsm_for_input_processing+0x558>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	4b54      	ldr	r3, [pc, #336]	; (8000a14 <fsm_for_input_processing+0x558>)
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	4954      	ldr	r1, [pc, #336]	; (8000a18 <fsm_for_input_processing+0x55c>)
 80008c8:	4854      	ldr	r0, [pc, #336]	; (8000a1c <fsm_for_input_processing+0x560>)
 80008ca:	f003 fc9d 	bl	8004208 <siprintf>
 80008ce:	4603      	mov	r3, r0
		HAL_UART_Transmit(huart, traffic_light_num,
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	2364      	movs	r3, #100	; 0x64
 80008d4:	4951      	ldr	r1, [pc, #324]	; (8000a1c <fsm_for_input_processing+0x560>)
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f002 ffd9 	bl	800388e <HAL_UART_Transmit>
		/* UART TRANSMIT END */

		break;
 80008dc:	e281      	b.n	8000de2 <fsm_for_input_processing+0x926>
	case MODE3:
		/* UART TRANSMIT START */
		update_led_buffer(green_temp_dur);
 80008de:	4b56      	ldr	r3, [pc, #344]	; (8000a38 <fsm_for_input_processing+0x57c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 fc94 	bl	8001210 <update_led_buffer>
		if(print==0){
 80008e8:	4b49      	ldr	r3, [pc, #292]	; (8000a10 <fsm_for_input_processing+0x554>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d111      	bne.n	8000914 <fsm_for_input_processing+0x458>
			HAL_UART_Transmit(huart, traffic_light_num,
			sprintf(traffic_light_num,"!7SEG:%d%d#\r",led_buffer1[0],led_buffer1[1]), 100);
 80008f0:	4b48      	ldr	r3, [pc, #288]	; (8000a14 <fsm_for_input_processing+0x558>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	4b47      	ldr	r3, [pc, #284]	; (8000a14 <fsm_for_input_processing+0x558>)
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	4947      	ldr	r1, [pc, #284]	; (8000a18 <fsm_for_input_processing+0x55c>)
 80008fa:	4848      	ldr	r0, [pc, #288]	; (8000a1c <fsm_for_input_processing+0x560>)
 80008fc:	f003 fc84 	bl	8004208 <siprintf>
 8000900:	4603      	mov	r3, r0
			HAL_UART_Transmit(huart, traffic_light_num,
 8000902:	b29a      	uxth	r2, r3
 8000904:	2364      	movs	r3, #100	; 0x64
 8000906:	4945      	ldr	r1, [pc, #276]	; (8000a1c <fsm_for_input_processing+0x560>)
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f002 ffc0 	bl	800388e <HAL_UART_Transmit>
			print=1;
 800090e:	4b40      	ldr	r3, [pc, #256]	; (8000a10 <fsm_for_input_processing+0x554>)
 8000910:	2201      	movs	r2, #1
 8000912:	601a      	str	r2, [r3, #0]
		}
		/* UART TRANSMIT END */
		/* BLINK SINGLE GREEN LED START */
		if(timer1_flag==1){
 8000914:	4b42      	ldr	r3, [pc, #264]	; (8000a20 <fsm_for_input_processing+0x564>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d119      	bne.n	8000950 <fsm_for_input_processing+0x494>
			setTimer1(250);
 800091c:	20fa      	movs	r0, #250	; 0xfa
 800091e:	f7ff fc15 	bl	800014c <setTimer1>
			if(led_state==0){
 8000922:	4b40      	ldr	r3, [pc, #256]	; (8000a24 <fsm_for_input_processing+0x568>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d107      	bne.n	800093a <fsm_for_input_processing+0x47e>
				turnOnGreen1();
 800092a:	f000 fbe1 	bl	80010f0 <turnOnGreen1>
				turnOnGreen2();
 800092e:	f000 fc2f 	bl	8001190 <turnOnGreen2>
				led_state=1;
 8000932:	4b3c      	ldr	r3, [pc, #240]	; (8000a24 <fsm_for_input_processing+0x568>)
 8000934:	2201      	movs	r2, #1
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	e00a      	b.n	8000950 <fsm_for_input_processing+0x494>
			}else if(led_state==1){
 800093a:	4b3a      	ldr	r3, [pc, #232]	; (8000a24 <fsm_for_input_processing+0x568>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d106      	bne.n	8000950 <fsm_for_input_processing+0x494>
				turnOff1();
 8000942:	f000 fc11 	bl	8001168 <turnOff1>
				turnOff2();
 8000946:	f000 fc53 	bl	80011f0 <turnOff2>
				led_state=0;
 800094a:	4b36      	ldr	r3, [pc, #216]	; (8000a24 <fsm_for_input_processing+0x568>)
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
		}
		/* BLINK SINGLE GREEN LED END */


		/*EXECUTE INPUT BUTTON1 START */
		if(button1_executed==0){
 8000950:	4b35      	ldr	r3, [pc, #212]	; (8000a28 <fsm_for_input_processing+0x56c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d110      	bne.n	800097a <fsm_for_input_processing+0x4be>
			if(button1_pressed()==TRUE){
 8000958:	f7ff fd60 	bl	800041c <button1_pressed>
 800095c:	4603      	mov	r3, r0
 800095e:	2b01      	cmp	r3, #1
 8000960:	d117      	bne.n	8000992 <fsm_for_input_processing+0x4d6>
				state=MODE4;
 8000962:	4b32      	ldr	r3, [pc, #200]	; (8000a2c <fsm_for_input_processing+0x570>)
 8000964:	2204      	movs	r2, #4
 8000966:	701a      	strb	r2, [r3, #0]
				button1_executed=1;
 8000968:	4b2f      	ldr	r3, [pc, #188]	; (8000a28 <fsm_for_input_processing+0x56c>)
 800096a:	2201      	movs	r2, #1
 800096c:	601a      	str	r2, [r3, #0]
				turnOffSingleLed();
 800096e:	f000 fb43 	bl	8000ff8 <turnOffSingleLed>
				print=0;
 8000972:	4b27      	ldr	r3, [pc, #156]	; (8000a10 <fsm_for_input_processing+0x554>)
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	e00b      	b.n	8000992 <fsm_for_input_processing+0x4d6>
			}
		}else if(button1_executed==1){
 800097a:	4b2b      	ldr	r3, [pc, #172]	; (8000a28 <fsm_for_input_processing+0x56c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d107      	bne.n	8000992 <fsm_for_input_processing+0x4d6>
			if(button1_pressed()==FALSE){
 8000982:	f7ff fd4b 	bl	800041c <button1_pressed>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d102      	bne.n	8000992 <fsm_for_input_processing+0x4d6>
				button1_executed=0;
 800098c:	4b26      	ldr	r3, [pc, #152]	; (8000a28 <fsm_for_input_processing+0x56c>)
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
			}
		}
		/*EXECUTE INPUT BUTTON1 END */

		/*EXECUTE INPUT BUTTON3 START */
		if(button3_pressed()==TRUE){
 8000992:	f7ff fd73 	bl	800047c <button3_pressed>
 8000996:	4603      	mov	r3, r0
 8000998:	2b01      	cmp	r3, #1
 800099a:	d105      	bne.n	80009a8 <fsm_for_input_processing+0x4ec>
			state=UPDATE_DURATION;
 800099c:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <fsm_for_input_processing+0x570>)
 800099e:	2207      	movs	r2, #7
 80009a0:	701a      	strb	r2, [r3, #0]
			LedToChange=GREEN;
 80009a2:	4b23      	ldr	r3, [pc, #140]	; (8000a30 <fsm_for_input_processing+0x574>)
 80009a4:	2202      	movs	r2, #2
 80009a6:	701a      	strb	r2, [r3, #0]
		}
		/*EXECUTE INPUT BUTTON3 END */

		/*EXECUTE INPUT BUTTON2 START */
		if(button2_pressed()==TRUE){
 80009a8:	f7ff fd48 	bl	800043c <button2_pressed>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d108      	bne.n	80009c4 <fsm_for_input_processing+0x508>
			state=INCREASE;
 80009b2:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <fsm_for_input_processing+0x570>)
 80009b4:	2205      	movs	r2, #5
 80009b6:	701a      	strb	r2, [r3, #0]
			LedToChange=GREEN;
 80009b8:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <fsm_for_input_processing+0x574>)
 80009ba:	2202      	movs	r2, #2
 80009bc:	701a      	strb	r2, [r3, #0]
			button2_increase1=0;
 80009be:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <fsm_for_input_processing+0x578>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
		}
		/*EXECUTE INPUT BUTTON2 END */
		//TO DO
		/* UART TRANSMIT START */
		if(LedToChange==GREEN){
 80009c4:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <fsm_for_input_processing+0x574>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d104      	bne.n	80009d6 <fsm_for_input_processing+0x51a>
			update_led_buffer(green_temp_dur);
 80009cc:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <fsm_for_input_processing+0x57c>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f000 fc1d 	bl	8001210 <update_led_buffer>
		}
		HAL_UART_Transmit(huart, traffic_light_num,
				sprintf(traffic_light_num,"!7SEG:%d%d#\r",led_buffer1[0],led_buffer1[1]), 100);
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <fsm_for_input_processing+0x558>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <fsm_for_input_processing+0x558>)
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	490e      	ldr	r1, [pc, #56]	; (8000a18 <fsm_for_input_processing+0x55c>)
 80009e0:	480e      	ldr	r0, [pc, #56]	; (8000a1c <fsm_for_input_processing+0x560>)
 80009e2:	f003 fc11 	bl	8004208 <siprintf>
 80009e6:	4603      	mov	r3, r0
		HAL_UART_Transmit(huart, traffic_light_num,
 80009e8:	b29a      	uxth	r2, r3
 80009ea:	2364      	movs	r3, #100	; 0x64
 80009ec:	490b      	ldr	r1, [pc, #44]	; (8000a1c <fsm_for_input_processing+0x560>)
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f002 ff4d 	bl	800388e <HAL_UART_Transmit>
		/* UART TRANSMIT END */
		break;
 80009f4:	e1f5      	b.n	8000de2 <fsm_for_input_processing+0x926>
 80009f6:	bf00      	nop
 80009f8:	200000d0 	.word	0x200000d0
 80009fc:	2000011c 	.word	0x2000011c
 8000a00:	20000130 	.word	0x20000130
 8000a04:	20000141 	.word	0x20000141
 8000a08:	20000168 	.word	0x20000168
 8000a0c:	20000134 	.word	0x20000134
 8000a10:	20000174 	.word	0x20000174
 8000a14:	2000017c 	.word	0x2000017c
 8000a18:	08004b14 	.word	0x08004b14
 8000a1c:	200000e8 	.word	0x200000e8
 8000a20:	200000c8 	.word	0x200000c8
 8000a24:	20000170 	.word	0x20000170
 8000a28:	20000160 	.word	0x20000160
 8000a2c:	20000140 	.word	0x20000140
 8000a30:	20000178 	.word	0x20000178
 8000a34:	20000164 	.word	0x20000164
 8000a38:	2000013c 	.word	0x2000013c
	case MODE4:
		/* UART TRANSMIT START */
		update_led_buffer(yellow_temp_dur);
 8000a3c:	4b94      	ldr	r3, [pc, #592]	; (8000c90 <fsm_for_input_processing+0x7d4>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f000 fbe5 	bl	8001210 <update_led_buffer>
		if(print==0){
 8000a46:	4b93      	ldr	r3, [pc, #588]	; (8000c94 <fsm_for_input_processing+0x7d8>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d111      	bne.n	8000a72 <fsm_for_input_processing+0x5b6>
			HAL_UART_Transmit(huart, traffic_light_num,
			sprintf(traffic_light_num,"!7SEG:%d%d#\r",led_buffer1[0],led_buffer1[1]), 100);
 8000a4e:	4b92      	ldr	r3, [pc, #584]	; (8000c98 <fsm_for_input_processing+0x7dc>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	4b91      	ldr	r3, [pc, #580]	; (8000c98 <fsm_for_input_processing+0x7dc>)
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	4991      	ldr	r1, [pc, #580]	; (8000c9c <fsm_for_input_processing+0x7e0>)
 8000a58:	4891      	ldr	r0, [pc, #580]	; (8000ca0 <fsm_for_input_processing+0x7e4>)
 8000a5a:	f003 fbd5 	bl	8004208 <siprintf>
 8000a5e:	4603      	mov	r3, r0
			HAL_UART_Transmit(huart, traffic_light_num,
 8000a60:	b29a      	uxth	r2, r3
 8000a62:	2364      	movs	r3, #100	; 0x64
 8000a64:	498e      	ldr	r1, [pc, #568]	; (8000ca0 <fsm_for_input_processing+0x7e4>)
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f002 ff11 	bl	800388e <HAL_UART_Transmit>
			print=1;
 8000a6c:	4b89      	ldr	r3, [pc, #548]	; (8000c94 <fsm_for_input_processing+0x7d8>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	601a      	str	r2, [r3, #0]
		}
		/* UART TRANSMIT END */
		/* BLINK SINGLE YELLOW LED START */
		if(timer1_flag==1){
 8000a72:	4b8c      	ldr	r3, [pc, #560]	; (8000ca4 <fsm_for_input_processing+0x7e8>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d119      	bne.n	8000aae <fsm_for_input_processing+0x5f2>
			setTimer1(250);
 8000a7a:	20fa      	movs	r0, #250	; 0xfa
 8000a7c:	f7ff fb66 	bl	800014c <setTimer1>
			if(led_state==0){
 8000a80:	4b89      	ldr	r3, [pc, #548]	; (8000ca8 <fsm_for_input_processing+0x7ec>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d107      	bne.n	8000a98 <fsm_for_input_processing+0x5dc>
				turnOnYellow1();
 8000a88:	f000 fb5a 	bl	8001140 <turnOnYellow1>
				turnOnYellow2();
 8000a8c:	f000 fba0 	bl	80011d0 <turnOnYellow2>
				led_state=1;
 8000a90:	4b85      	ldr	r3, [pc, #532]	; (8000ca8 <fsm_for_input_processing+0x7ec>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	e00a      	b.n	8000aae <fsm_for_input_processing+0x5f2>
			}else if(led_state==1){
 8000a98:	4b83      	ldr	r3, [pc, #524]	; (8000ca8 <fsm_for_input_processing+0x7ec>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d106      	bne.n	8000aae <fsm_for_input_processing+0x5f2>
				turnOff1();
 8000aa0:	f000 fb62 	bl	8001168 <turnOff1>
				turnOff2();
 8000aa4:	f000 fba4 	bl	80011f0 <turnOff2>
				led_state=0;
 8000aa8:	4b7f      	ldr	r3, [pc, #508]	; (8000ca8 <fsm_for_input_processing+0x7ec>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
			}
		}
		/* BLINK SINGLE GREEN LED END */

		/*EXECUTE INPUT BUTTON1 START */
		if(button1_executed==0){
 8000aae:	4b7f      	ldr	r3, [pc, #508]	; (8000cac <fsm_for_input_processing+0x7f0>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d113      	bne.n	8000ade <fsm_for_input_processing+0x622>
			if(button1_pressed()==TRUE){
 8000ab6:	f7ff fcb1 	bl	800041c <button1_pressed>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d11a      	bne.n	8000af6 <fsm_for_input_processing+0x63a>
				state=INIT;
 8000ac0:	4b7b      	ldr	r3, [pc, #492]	; (8000cb0 <fsm_for_input_processing+0x7f4>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
				button1_executed=1;
 8000ac6:	4b79      	ldr	r3, [pc, #484]	; (8000cac <fsm_for_input_processing+0x7f0>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	601a      	str	r2, [r3, #0]
				setTimer1(0); //turn off or reset timer 1
 8000acc:	2000      	movs	r0, #0
 8000ace:	f7ff fb3d 	bl	800014c <setTimer1>
				turnOffSingleLed();
 8000ad2:	f000 fa91 	bl	8000ff8 <turnOffSingleLed>
				print=0;
 8000ad6:	4b6f      	ldr	r3, [pc, #444]	; (8000c94 <fsm_for_input_processing+0x7d8>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	e00b      	b.n	8000af6 <fsm_for_input_processing+0x63a>
			}
		}else if(button1_executed==1){
 8000ade:	4b73      	ldr	r3, [pc, #460]	; (8000cac <fsm_for_input_processing+0x7f0>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d107      	bne.n	8000af6 <fsm_for_input_processing+0x63a>
			if(button1_pressed()==FALSE){
 8000ae6:	f7ff fc99 	bl	800041c <button1_pressed>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d102      	bne.n	8000af6 <fsm_for_input_processing+0x63a>
				button1_executed=0;
 8000af0:	4b6e      	ldr	r3, [pc, #440]	; (8000cac <fsm_for_input_processing+0x7f0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
			}
		}
		/*EXECUTE INPUT BUTTON1 END */

		/*EXECUTE INPUT BUTTON3 START */
		if(button3_pressed()==TRUE){
 8000af6:	f7ff fcc1 	bl	800047c <button3_pressed>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d105      	bne.n	8000b0c <fsm_for_input_processing+0x650>
			state=UPDATE_DURATION;
 8000b00:	4b6b      	ldr	r3, [pc, #428]	; (8000cb0 <fsm_for_input_processing+0x7f4>)
 8000b02:	2207      	movs	r2, #7
 8000b04:	701a      	strb	r2, [r3, #0]
			LedToChange=YELLOW;
 8000b06:	4b6b      	ldr	r3, [pc, #428]	; (8000cb4 <fsm_for_input_processing+0x7f8>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	701a      	strb	r2, [r3, #0]
		}
		/*EXECUTE INPUT BUTTON3 END */

		/*EXECUTE INPUT BUTTON2 START */
		if(button2_pressed()==TRUE){
 8000b0c:	f7ff fc96 	bl	800043c <button2_pressed>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d108      	bne.n	8000b28 <fsm_for_input_processing+0x66c>
			state=INCREASE;
 8000b16:	4b66      	ldr	r3, [pc, #408]	; (8000cb0 <fsm_for_input_processing+0x7f4>)
 8000b18:	2205      	movs	r2, #5
 8000b1a:	701a      	strb	r2, [r3, #0]
			LedToChange=YELLOW;
 8000b1c:	4b65      	ldr	r3, [pc, #404]	; (8000cb4 <fsm_for_input_processing+0x7f8>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	701a      	strb	r2, [r3, #0]
			button2_increase1=0;
 8000b22:	4b65      	ldr	r3, [pc, #404]	; (8000cb8 <fsm_for_input_processing+0x7fc>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
		}
		/*EXECUTE INPUT BUTTON2 END */
		//TO DO
		/* UART TRANSMIT START */
		if(LedToChange==YELLOW){
 8000b28:	4b62      	ldr	r3, [pc, #392]	; (8000cb4 <fsm_for_input_processing+0x7f8>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d104      	bne.n	8000b3a <fsm_for_input_processing+0x67e>
			update_led_buffer(yellow_temp_dur);
 8000b30:	4b57      	ldr	r3, [pc, #348]	; (8000c90 <fsm_for_input_processing+0x7d4>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 fb6b 	bl	8001210 <update_led_buffer>
		}
		HAL_UART_Transmit(huart, traffic_light_num,
			sprintf(traffic_light_num,"!7SEG:%d%d#\r",led_buffer1[0],led_buffer1[1]), 100);
 8000b3a:	4b57      	ldr	r3, [pc, #348]	; (8000c98 <fsm_for_input_processing+0x7dc>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	4b56      	ldr	r3, [pc, #344]	; (8000c98 <fsm_for_input_processing+0x7dc>)
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	4956      	ldr	r1, [pc, #344]	; (8000c9c <fsm_for_input_processing+0x7e0>)
 8000b44:	4856      	ldr	r0, [pc, #344]	; (8000ca0 <fsm_for_input_processing+0x7e4>)
 8000b46:	f003 fb5f 	bl	8004208 <siprintf>
 8000b4a:	4603      	mov	r3, r0
		HAL_UART_Transmit(huart, traffic_light_num,
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	2364      	movs	r3, #100	; 0x64
 8000b50:	4953      	ldr	r1, [pc, #332]	; (8000ca0 <fsm_for_input_processing+0x7e4>)
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f002 fe9b 	bl	800388e <HAL_UART_Transmit>
		/* UART TRANSMIT END */
		break;
 8000b58:	e143      	b.n	8000de2 <fsm_for_input_processing+0x926>
	case INCREASE:
		/* BLINK SINGLE LED START */
		if(timer1_flag==1){
 8000b5a:	4b52      	ldr	r3, [pc, #328]	; (8000ca4 <fsm_for_input_processing+0x7e8>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d107      	bne.n	8000b72 <fsm_for_input_processing+0x6b6>
			setTimer1(250);
 8000b62:	20fa      	movs	r0, #250	; 0xfa
 8000b64:	f7ff faf2 	bl	800014c <setTimer1>
			ledBlinking(LedToChange);
 8000b68:	4b52      	ldr	r3, [pc, #328]	; (8000cb4 <fsm_for_input_processing+0x7f8>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 fa4b 	bl	8001008 <ledBlinking>
		}
		/* BLINK SINGLE LED END */

		/* EXECUTE INPUT BUTTON2 START */
		if(button2_pressed_1s()==TRUE){
 8000b72:	f7ff fc73 	bl	800045c <button2_pressed_1s>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d10a      	bne.n	8000b92 <fsm_for_input_processing+0x6d6>
			print=0;
 8000b7c:	4b45      	ldr	r3, [pc, #276]	; (8000c94 <fsm_for_input_processing+0x7d8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
			state=INCREASE_500MS;
 8000b82:	4b4b      	ldr	r3, [pc, #300]	; (8000cb0 <fsm_for_input_processing+0x7f4>)
 8000b84:	2206      	movs	r2, #6
 8000b86:	701a      	strb	r2, [r3, #0]
			setTimer3(500);
 8000b88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b8c:	f7ff fb12 	bl	80001b4 <setTimer3>
 8000b90:	e01c      	b.n	8000bcc <fsm_for_input_processing+0x710>
		}else if(button2_pressed()==FALSE){
 8000b92:	f7ff fc53 	bl	800043c <button2_pressed>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d116      	bne.n	8000bca <fsm_for_input_processing+0x70e>
			switch(LedToChange){
 8000b9c:	4b45      	ldr	r3, [pc, #276]	; (8000cb4 <fsm_for_input_processing+0x7f8>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d00a      	beq.n	8000bba <fsm_for_input_processing+0x6fe>
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	dc11      	bgt.n	8000bcc <fsm_for_input_processing+0x710>
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d002      	beq.n	8000bb2 <fsm_for_input_processing+0x6f6>
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d008      	beq.n	8000bc2 <fsm_for_input_processing+0x706>
 8000bb0:	e00c      	b.n	8000bcc <fsm_for_input_processing+0x710>
				case RED:
					state=MODE2;
 8000bb2:	4b3f      	ldr	r3, [pc, #252]	; (8000cb0 <fsm_for_input_processing+0x7f4>)
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	701a      	strb	r2, [r3, #0]
					break;
 8000bb8:	e008      	b.n	8000bcc <fsm_for_input_processing+0x710>
				case GREEN:
					state=MODE3;
 8000bba:	4b3d      	ldr	r3, [pc, #244]	; (8000cb0 <fsm_for_input_processing+0x7f4>)
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	701a      	strb	r2, [r3, #0]
					break;
 8000bc0:	e004      	b.n	8000bcc <fsm_for_input_processing+0x710>
				case YELLOW:
					state=MODE4;
 8000bc2:	4b3b      	ldr	r3, [pc, #236]	; (8000cb0 <fsm_for_input_processing+0x7f4>)
 8000bc4:	2204      	movs	r2, #4
 8000bc6:	701a      	strb	r2, [r3, #0]
					break;
 8000bc8:	e000      	b.n	8000bcc <fsm_for_input_processing+0x710>
			}
		}
 8000bca:	bf00      	nop
		/* EXECUTE INPUT BUTTON2 START */

		/* INCREASE DURATION START */
		if(button2_increase1==0){
 8000bcc:	4b3a      	ldr	r3, [pc, #232]	; (8000cb8 <fsm_for_input_processing+0x7fc>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	f040 8103 	bne.w	8000ddc <fsm_for_input_processing+0x920>
			increaseTempDur(LedToChange);
 8000bd6:	4b37      	ldr	r3, [pc, #220]	; (8000cb4 <fsm_for_input_processing+0x7f8>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 f918 	bl	8000e10 <increaseTempDur>
			button2_increase1=1;
 8000be0:	4b35      	ldr	r3, [pc, #212]	; (8000cb8 <fsm_for_input_processing+0x7fc>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	601a      	str	r2, [r3, #0]

		/* UART TRANSMIT START */
			switch(LedToChange){
 8000be6:	4b33      	ldr	r3, [pc, #204]	; (8000cb4 <fsm_for_input_processing+0x7f8>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d00c      	beq.n	8000c08 <fsm_for_input_processing+0x74c>
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	dc16      	bgt.n	8000c20 <fsm_for_input_processing+0x764>
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d002      	beq.n	8000bfc <fsm_for_input_processing+0x740>
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d00c      	beq.n	8000c14 <fsm_for_input_processing+0x758>
 8000bfa:	e011      	b.n	8000c20 <fsm_for_input_processing+0x764>
				case RED:
					update_led_buffer(red_temp_dur);
 8000bfc:	4b2f      	ldr	r3, [pc, #188]	; (8000cbc <fsm_for_input_processing+0x800>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 fb05 	bl	8001210 <update_led_buffer>
					break;
 8000c06:	e00b      	b.n	8000c20 <fsm_for_input_processing+0x764>
				case GREEN:
					update_led_buffer(green_temp_dur);
 8000c08:	4b2d      	ldr	r3, [pc, #180]	; (8000cc0 <fsm_for_input_processing+0x804>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f000 faff 	bl	8001210 <update_led_buffer>
					break;
 8000c12:	e005      	b.n	8000c20 <fsm_for_input_processing+0x764>
				case YELLOW:
					update_led_buffer(yellow_temp_dur);
 8000c14:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <fsm_for_input_processing+0x7d4>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 faf9 	bl	8001210 <update_led_buffer>
					break;
 8000c1e:	bf00      	nop
			}
			HAL_UART_Transmit(huart, traffic_light_num,
			sprintf(traffic_light_num,"!7SEG:%d%d#\r",led_buffer1[0],led_buffer1[1]), 100);
 8000c20:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <fsm_for_input_processing+0x7dc>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <fsm_for_input_processing+0x7dc>)
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	491c      	ldr	r1, [pc, #112]	; (8000c9c <fsm_for_input_processing+0x7e0>)
 8000c2a:	481d      	ldr	r0, [pc, #116]	; (8000ca0 <fsm_for_input_processing+0x7e4>)
 8000c2c:	f003 faec 	bl	8004208 <siprintf>
 8000c30:	4603      	mov	r3, r0
			HAL_UART_Transmit(huart, traffic_light_num,
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	2364      	movs	r3, #100	; 0x64
 8000c36:	491a      	ldr	r1, [pc, #104]	; (8000ca0 <fsm_for_input_processing+0x7e4>)
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f002 fe28 	bl	800388e <HAL_UART_Transmit>
		}
		/* UART TRANSMIT END */
		/* INCREASE DURATION END */
		//TO DO
		break;
 8000c3e:	e0cd      	b.n	8000ddc <fsm_for_input_processing+0x920>
	case INCREASE_500MS:
		/* BLINK SINGLE LED START */
		if(timer1_flag==1){
 8000c40:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <fsm_for_input_processing+0x7e8>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d107      	bne.n	8000c58 <fsm_for_input_processing+0x79c>
			setTimer1(250);
 8000c48:	20fa      	movs	r0, #250	; 0xfa
 8000c4a:	f7ff fa7f 	bl	800014c <setTimer1>
			ledBlinking(LedToChange);
 8000c4e:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <fsm_for_input_processing+0x7f8>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 f9d8 	bl	8001008 <ledBlinking>
		}
		/* BLINK SINGLE LED END */

		/* EXECUTE INPUT BUTTON2 START */
		if(button2_pressed()==FALSE){
 8000c58:	f7ff fbf0 	bl	800043c <button2_pressed>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d130      	bne.n	8000cc4 <fsm_for_input_processing+0x808>
			switch(LedToChange){
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <fsm_for_input_processing+0x7f8>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d00a      	beq.n	8000c80 <fsm_for_input_processing+0x7c4>
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	dc2b      	bgt.n	8000cc6 <fsm_for_input_processing+0x80a>
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d002      	beq.n	8000c78 <fsm_for_input_processing+0x7bc>
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d008      	beq.n	8000c88 <fsm_for_input_processing+0x7cc>
 8000c76:	e026      	b.n	8000cc6 <fsm_for_input_processing+0x80a>
				case RED:
					state=MODE2;
 8000c78:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <fsm_for_input_processing+0x7f4>)
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	701a      	strb	r2, [r3, #0]
					break;
 8000c7e:	e022      	b.n	8000cc6 <fsm_for_input_processing+0x80a>
				case GREEN:
					state=MODE3;
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <fsm_for_input_processing+0x7f4>)
 8000c82:	2203      	movs	r2, #3
 8000c84:	701a      	strb	r2, [r3, #0]
					break;
 8000c86:	e01e      	b.n	8000cc6 <fsm_for_input_processing+0x80a>
				case YELLOW:
					state=MODE4;
 8000c88:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <fsm_for_input_processing+0x7f4>)
 8000c8a:	2204      	movs	r2, #4
 8000c8c:	701a      	strb	r2, [r3, #0]
					break;
 8000c8e:	e01a      	b.n	8000cc6 <fsm_for_input_processing+0x80a>
 8000c90:	20000138 	.word	0x20000138
 8000c94:	20000174 	.word	0x20000174
 8000c98:	2000017c 	.word	0x2000017c
 8000c9c:	08004b14 	.word	0x08004b14
 8000ca0:	200000e8 	.word	0x200000e8
 8000ca4:	200000c8 	.word	0x200000c8
 8000ca8:	20000170 	.word	0x20000170
 8000cac:	20000160 	.word	0x20000160
 8000cb0:	20000140 	.word	0x20000140
 8000cb4:	20000178 	.word	0x20000178
 8000cb8:	20000164 	.word	0x20000164
 8000cbc:	20000134 	.word	0x20000134
 8000cc0:	2000013c 	.word	0x2000013c
			}
		}
 8000cc4:	bf00      	nop
		/* EXECUTE INPUT BUTTON2 START */

		/* INCREASE TEMP DURATION START */
		if(timer3_flag==1){
 8000cc6:	4b49      	ldr	r3, [pc, #292]	; (8000dec <fsm_for_input_processing+0x930>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d134      	bne.n	8000d38 <fsm_for_input_processing+0x87c>
			setTimer3(500);
 8000cce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cd2:	f7ff fa6f 	bl	80001b4 <setTimer3>
			increaseTempDur(LedToChange);
 8000cd6:	4b46      	ldr	r3, [pc, #280]	; (8000df0 <fsm_for_input_processing+0x934>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 f898 	bl	8000e10 <increaseTempDur>
			/* UART TRANSMIT START */
				switch(LedToChange){
 8000ce0:	4b43      	ldr	r3, [pc, #268]	; (8000df0 <fsm_for_input_processing+0x934>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d00c      	beq.n	8000d02 <fsm_for_input_processing+0x846>
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	dc16      	bgt.n	8000d1a <fsm_for_input_processing+0x85e>
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d002      	beq.n	8000cf6 <fsm_for_input_processing+0x83a>
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d00c      	beq.n	8000d0e <fsm_for_input_processing+0x852>
 8000cf4:	e011      	b.n	8000d1a <fsm_for_input_processing+0x85e>
					case RED:
						update_led_buffer(red_temp_dur);
 8000cf6:	4b3f      	ldr	r3, [pc, #252]	; (8000df4 <fsm_for_input_processing+0x938>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 fa88 	bl	8001210 <update_led_buffer>
						break;
 8000d00:	e00b      	b.n	8000d1a <fsm_for_input_processing+0x85e>
					case GREEN:
						update_led_buffer(green_temp_dur);
 8000d02:	4b3d      	ldr	r3, [pc, #244]	; (8000df8 <fsm_for_input_processing+0x93c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f000 fa82 	bl	8001210 <update_led_buffer>
						break;
 8000d0c:	e005      	b.n	8000d1a <fsm_for_input_processing+0x85e>
					case YELLOW:
						update_led_buffer(yellow_temp_dur);
 8000d0e:	4b3b      	ldr	r3, [pc, #236]	; (8000dfc <fsm_for_input_processing+0x940>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 fa7c 	bl	8001210 <update_led_buffer>
						break;
 8000d18:	bf00      	nop
				}
				HAL_UART_Transmit(huart, traffic_light_num,
				sprintf(traffic_light_num,"!7SEG:%d%d#\r",led_buffer1[0],led_buffer1[1]), 100);
 8000d1a:	4b39      	ldr	r3, [pc, #228]	; (8000e00 <fsm_for_input_processing+0x944>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	4b38      	ldr	r3, [pc, #224]	; (8000e00 <fsm_for_input_processing+0x944>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	4938      	ldr	r1, [pc, #224]	; (8000e04 <fsm_for_input_processing+0x948>)
 8000d24:	4838      	ldr	r0, [pc, #224]	; (8000e08 <fsm_for_input_processing+0x94c>)
 8000d26:	f003 fa6f 	bl	8004208 <siprintf>
 8000d2a:	4603      	mov	r3, r0
				HAL_UART_Transmit(huart, traffic_light_num,
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	2364      	movs	r3, #100	; 0x64
 8000d30:	4935      	ldr	r1, [pc, #212]	; (8000e08 <fsm_for_input_processing+0x94c>)
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f002 fdab 	bl	800388e <HAL_UART_Transmit>
			/* UART TRANSMIT END */

		/* INCREASE TEMP DURATION END */
		//TO DO
		/* UART TRANSMIT START */
		if(LedToChange==RED){
 8000d38:	4b2d      	ldr	r3, [pc, #180]	; (8000df0 <fsm_for_input_processing+0x934>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d105      	bne.n	8000d4c <fsm_for_input_processing+0x890>
			update_led_buffer(red_temp_dur);
 8000d40:	4b2c      	ldr	r3, [pc, #176]	; (8000df4 <fsm_for_input_processing+0x938>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 fa63 	bl	8001210 <update_led_buffer>
 8000d4a:	e012      	b.n	8000d72 <fsm_for_input_processing+0x8b6>
		}else if(LedToChange==GREEN){
 8000d4c:	4b28      	ldr	r3, [pc, #160]	; (8000df0 <fsm_for_input_processing+0x934>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d105      	bne.n	8000d60 <fsm_for_input_processing+0x8a4>
			update_led_buffer(green_temp_dur);
 8000d54:	4b28      	ldr	r3, [pc, #160]	; (8000df8 <fsm_for_input_processing+0x93c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f000 fa59 	bl	8001210 <update_led_buffer>
 8000d5e:	e008      	b.n	8000d72 <fsm_for_input_processing+0x8b6>
		}else if(LedToChange==YELLOW){
 8000d60:	4b23      	ldr	r3, [pc, #140]	; (8000df0 <fsm_for_input_processing+0x934>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d104      	bne.n	8000d72 <fsm_for_input_processing+0x8b6>
			update_led_buffer(yellow_temp_dur);
 8000d68:	4b24      	ldr	r3, [pc, #144]	; (8000dfc <fsm_for_input_processing+0x940>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 fa4f 	bl	8001210 <update_led_buffer>
		}

		HAL_UART_Transmit(huart, traffic_light_num,
				sprintf(traffic_light_num,"!7SEG:%d%d#\r",led_buffer1[0],led_buffer1[1]), 100);
 8000d72:	4b23      	ldr	r3, [pc, #140]	; (8000e00 <fsm_for_input_processing+0x944>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	4b22      	ldr	r3, [pc, #136]	; (8000e00 <fsm_for_input_processing+0x944>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	4922      	ldr	r1, [pc, #136]	; (8000e04 <fsm_for_input_processing+0x948>)
 8000d7c:	4822      	ldr	r0, [pc, #136]	; (8000e08 <fsm_for_input_processing+0x94c>)
 8000d7e:	f003 fa43 	bl	8004208 <siprintf>
 8000d82:	4603      	mov	r3, r0
		HAL_UART_Transmit(huart, traffic_light_num,
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	2364      	movs	r3, #100	; 0x64
 8000d88:	491f      	ldr	r1, [pc, #124]	; (8000e08 <fsm_for_input_processing+0x94c>)
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f002 fd7f 	bl	800388e <HAL_UART_Transmit>

		/* UART TRANSMIT END */
		break;
 8000d90:	e027      	b.n	8000de2 <fsm_for_input_processing+0x926>
	case UPDATE_DURATION:
		updateDuration(LedToChange);
 8000d92:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <fsm_for_input_processing+0x934>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 f880 	bl	8000e9c <updateDuration>
		if(button3_pressed()==FALSE){
 8000d9c:	f7ff fb6e 	bl	800047c <button3_pressed>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d116      	bne.n	8000dd4 <fsm_for_input_processing+0x918>
			switch(LedToChange){
 8000da6:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <fsm_for_input_processing+0x934>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d00a      	beq.n	8000dc4 <fsm_for_input_processing+0x908>
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	dc16      	bgt.n	8000de0 <fsm_for_input_processing+0x924>
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d002      	beq.n	8000dbc <fsm_for_input_processing+0x900>
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d008      	beq.n	8000dcc <fsm_for_input_processing+0x910>
					state=MODE4;
					break;
			}
		}
		//TO DO
		break;
 8000dba:	e011      	b.n	8000de0 <fsm_for_input_processing+0x924>
					state=MODE2;
 8000dbc:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <fsm_for_input_processing+0x950>)
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	701a      	strb	r2, [r3, #0]
					break;
 8000dc2:	e008      	b.n	8000dd6 <fsm_for_input_processing+0x91a>
					state=MODE3;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <fsm_for_input_processing+0x950>)
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	701a      	strb	r2, [r3, #0]
					break;
 8000dca:	e004      	b.n	8000dd6 <fsm_for_input_processing+0x91a>
					state=MODE4;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <fsm_for_input_processing+0x950>)
 8000dce:	2204      	movs	r2, #4
 8000dd0:	701a      	strb	r2, [r3, #0]
					break;
 8000dd2:	e000      	b.n	8000dd6 <fsm_for_input_processing+0x91a>
		}
 8000dd4:	bf00      	nop
		break;
 8000dd6:	e003      	b.n	8000de0 <fsm_for_input_processing+0x924>
		break;
 8000dd8:	bf00      	nop
 8000dda:	e002      	b.n	8000de2 <fsm_for_input_processing+0x926>
		break;
 8000ddc:	bf00      	nop
 8000dde:	e000      	b.n	8000de2 <fsm_for_input_processing+0x926>
		break;
 8000de0:	bf00      	nop
	}
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200000d8 	.word	0x200000d8
 8000df0:	20000178 	.word	0x20000178
 8000df4:	20000134 	.word	0x20000134
 8000df8:	2000013c 	.word	0x2000013c
 8000dfc:	20000138 	.word	0x20000138
 8000e00:	2000017c 	.word	0x2000017c
 8000e04:	08004b14 	.word	0x08004b14
 8000e08:	200000e8 	.word	0x200000e8
 8000e0c:	20000140 	.word	0x20000140

08000e10 <increaseTempDur>:


void increaseTempDur(enum LED color){
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
	switch(color){
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d020      	beq.n	8000e62 <increaseTempDur+0x52>
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	dc30      	bgt.n	8000e86 <increaseTempDur+0x76>
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d002      	beq.n	8000e2e <increaseTempDur+0x1e>
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d00d      	beq.n	8000e48 <increaseTempDur+0x38>
			green_temp_dur++;
			if(red_temp_dur>99)
				green_temp_dur=1;
			break;
	}
}
 8000e2c:	e02b      	b.n	8000e86 <increaseTempDur+0x76>
			red_temp_dur++;
 8000e2e:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <increaseTempDur+0x80>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	3301      	adds	r3, #1
 8000e34:	4a16      	ldr	r2, [pc, #88]	; (8000e90 <increaseTempDur+0x80>)
 8000e36:	6013      	str	r3, [r2, #0]
			if(red_temp_dur>99)
 8000e38:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <increaseTempDur+0x80>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b63      	cmp	r3, #99	; 0x63
 8000e3e:	dd1d      	ble.n	8000e7c <increaseTempDur+0x6c>
				red_temp_dur=1;
 8000e40:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <increaseTempDur+0x80>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	601a      	str	r2, [r3, #0]
			break;
 8000e46:	e019      	b.n	8000e7c <increaseTempDur+0x6c>
			yellow_temp_dur++;
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <increaseTempDur+0x84>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	4a11      	ldr	r2, [pc, #68]	; (8000e94 <increaseTempDur+0x84>)
 8000e50:	6013      	str	r3, [r2, #0]
			if(yellow_temp_dur>99)
 8000e52:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <increaseTempDur+0x84>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2b63      	cmp	r3, #99	; 0x63
 8000e58:	dd12      	ble.n	8000e80 <increaseTempDur+0x70>
				yellow_temp_dur=1;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <increaseTempDur+0x84>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	601a      	str	r2, [r3, #0]
			break;
 8000e60:	e00e      	b.n	8000e80 <increaseTempDur+0x70>
			green_temp_dur++;
 8000e62:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <increaseTempDur+0x88>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	3301      	adds	r3, #1
 8000e68:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <increaseTempDur+0x88>)
 8000e6a:	6013      	str	r3, [r2, #0]
			if(red_temp_dur>99)
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <increaseTempDur+0x80>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b63      	cmp	r3, #99	; 0x63
 8000e72:	dd07      	ble.n	8000e84 <increaseTempDur+0x74>
				green_temp_dur=1;
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <increaseTempDur+0x88>)
 8000e76:	2201      	movs	r2, #1
 8000e78:	601a      	str	r2, [r3, #0]
			break;
 8000e7a:	e003      	b.n	8000e84 <increaseTempDur+0x74>
			break;
 8000e7c:	bf00      	nop
 8000e7e:	e002      	b.n	8000e86 <increaseTempDur+0x76>
			break;
 8000e80:	bf00      	nop
 8000e82:	e000      	b.n	8000e86 <increaseTempDur+0x76>
			break;
 8000e84:	bf00      	nop
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	20000134 	.word	0x20000134
 8000e94:	20000138 	.word	0x20000138
 8000e98:	2000013c 	.word	0x2000013c

08000e9c <updateDuration>:

void updateDuration(enum LED color){
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
	switch(color){
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d010      	beq.n	8000ece <updateDuration+0x32>
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	dc13      	bgt.n	8000ed8 <updateDuration+0x3c>
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d002      	beq.n	8000eba <updateDuration+0x1e>
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d005      	beq.n	8000ec4 <updateDuration+0x28>
			break;
		case GREEN:
			GREEN_DURATION=green_temp_dur;
			break;
	}
}
 8000eb8:	e00e      	b.n	8000ed8 <updateDuration+0x3c>
			RED_DURATION=red_temp_dur;
 8000eba:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <updateDuration+0x48>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <updateDuration+0x4c>)
 8000ec0:	6013      	str	r3, [r2, #0]
			break;
 8000ec2:	e009      	b.n	8000ed8 <updateDuration+0x3c>
			YELLOW_DURATION=yellow_temp_dur;
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <updateDuration+0x50>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a09      	ldr	r2, [pc, #36]	; (8000ef0 <updateDuration+0x54>)
 8000eca:	6013      	str	r3, [r2, #0]
			break;
 8000ecc:	e004      	b.n	8000ed8 <updateDuration+0x3c>
			GREEN_DURATION=green_temp_dur;
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <updateDuration+0x58>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a09      	ldr	r2, [pc, #36]	; (8000ef8 <updateDuration+0x5c>)
 8000ed4:	6013      	str	r3, [r2, #0]
			break;
 8000ed6:	bf00      	nop
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20000134 	.word	0x20000134
 8000ee8:	20000120 	.word	0x20000120
 8000eec:	20000138 	.word	0x20000138
 8000ef0:	20000124 	.word	0x20000124
 8000ef4:	2000013c 	.word	0x2000013c
 8000ef8:	20000128 	.word	0x20000128

08000efc <displaySingleLedsMode1>:



void displaySingleLedsMode1(){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	if(current_led_way1==RED){
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <displaySingleLedsMode1+0x50>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d101      	bne.n	8000f0c <displaySingleLedsMode1+0x10>
		turnOnRed1();  // TURN ON RED LED
 8000f08:	f000 f906 	bl	8001118 <turnOnRed1>
	}
	if(current_led_way1==GREEN){
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <displaySingleLedsMode1+0x50>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d101      	bne.n	8000f18 <displaySingleLedsMode1+0x1c>
		turnOnGreen1();  // TURN ON GREEN LED
 8000f14:	f000 f8ec 	bl	80010f0 <turnOnGreen1>
	}
	if(current_led_way1==YELLOW){
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <displaySingleLedsMode1+0x50>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d101      	bne.n	8000f24 <displaySingleLedsMode1+0x28>
		turnOnYellow1();  // TURN ON YELLOW LED
 8000f20:	f000 f90e 	bl	8001140 <turnOnYellow1>
	}

	if(current_led_way2==RED){
 8000f24:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <displaySingleLedsMode1+0x54>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d101      	bne.n	8000f30 <displaySingleLedsMode1+0x34>
		turnOnRed2();  // TURN ON RED LED
 8000f2c:	f000 f940 	bl	80011b0 <turnOnRed2>
	}
	if(current_led_way2==GREEN){
 8000f30:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <displaySingleLedsMode1+0x54>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d101      	bne.n	8000f3c <displaySingleLedsMode1+0x40>
		turnOnGreen2();  // TURN ON GREEN LED
 8000f38:	f000 f92a 	bl	8001190 <turnOnGreen2>
	}
	if(current_led_way2==YELLOW){
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <displaySingleLedsMode1+0x54>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d101      	bne.n	8000f48 <displaySingleLedsMode1+0x4c>
		turnOnYellow2();  // TURN ON YELLOW LED
 8000f44:	f000 f944 	bl	80011d0 <turnOnYellow2>
	}
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000141 	.word	0x20000141
 8000f50:	20000150 	.word	0x20000150

08000f54 <trafficLightCount>:

void trafficLightCount(int*leds_count,enum LED*current_led){
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
	if(*current_led==RED){
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d110      	bne.n	8000f88 <trafficLightCount+0x34>
		leds_count[0]--;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	1e5a      	subs	r2, r3, #1
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	601a      	str	r2, [r3, #0]
		if(leds_count[0]<=0){
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	dc34      	bgt.n	8000fe2 <trafficLightCount+0x8e>
			leds_count[0]=RED_DURATION;
 8000f78:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <trafficLightCount+0x98>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	601a      	str	r2, [r3, #0]
			*current_led=GREEN;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	2202      	movs	r2, #2
 8000f84:	701a      	strb	r2, [r3, #0]
		if(leds_count[2]<=0){
			leds_count[2]=YELLOW_DURATION;
			*current_led=RED;
		}
	}
}
 8000f86:	e02c      	b.n	8000fe2 <trafficLightCount+0x8e>
	else if(*current_led==GREEN){
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d112      	bne.n	8000fb6 <trafficLightCount+0x62>
		leds_count[1]--;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3304      	adds	r3, #4
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	3a01      	subs	r2, #1
 8000f98:	601a      	str	r2, [r3, #0]
		if(leds_count[1]<=0){
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	dc1e      	bgt.n	8000fe2 <trafficLightCount+0x8e>
			leds_count[1]=GREEN_DURATION;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3304      	adds	r3, #4
 8000fa8:	4a11      	ldr	r2, [pc, #68]	; (8000ff0 <trafficLightCount+0x9c>)
 8000faa:	6812      	ldr	r2, [r2, #0]
 8000fac:	601a      	str	r2, [r3, #0]
			*current_led=YELLOW;
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	701a      	strb	r2, [r3, #0]
}
 8000fb4:	e015      	b.n	8000fe2 <trafficLightCount+0x8e>
	else if(*current_led==YELLOW){
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d111      	bne.n	8000fe2 <trafficLightCount+0x8e>
		leds_count[2]--;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3308      	adds	r3, #8
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	3a01      	subs	r2, #1
 8000fc6:	601a      	str	r2, [r3, #0]
		if(leds_count[2]<=0){
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3308      	adds	r3, #8
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	dc07      	bgt.n	8000fe2 <trafficLightCount+0x8e>
			leds_count[2]=YELLOW_DURATION;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3308      	adds	r3, #8
 8000fd6:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <trafficLightCount+0xa0>)
 8000fd8:	6812      	ldr	r2, [r2, #0]
 8000fda:	601a      	str	r2, [r3, #0]
			*current_led=RED;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	20000120 	.word	0x20000120
 8000ff0:	20000128 	.word	0x20000128
 8000ff4:	20000124 	.word	0x20000124

08000ff8 <turnOffSingleLed>:

void turnOffSingleLed(){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	turnOff1();
 8000ffc:	f000 f8b4 	bl	8001168 <turnOff1>
	turnOff2();
 8001000:	f000 f8f6 	bl	80011f0 <turnOff2>
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}

08001008 <ledBlinking>:

void ledBlinking(enum LED led_to_change){
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
	if(led_state==0){
 8001012:	4b18      	ldr	r3, [pc, #96]	; (8001074 <ledBlinking+0x6c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d11c      	bne.n	8001054 <ledBlinking+0x4c>
		switch(led_to_change){
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	2b02      	cmp	r3, #2
 800101e:	d010      	beq.n	8001042 <ledBlinking+0x3a>
 8001020:	2b02      	cmp	r3, #2
 8001022:	dc13      	bgt.n	800104c <ledBlinking+0x44>
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <ledBlinking+0x26>
 8001028:	2b01      	cmp	r3, #1
 800102a:	d005      	beq.n	8001038 <ledBlinking+0x30>
 800102c:	e00e      	b.n	800104c <ledBlinking+0x44>
		case RED:
			turnOnRed1();
 800102e:	f000 f873 	bl	8001118 <turnOnRed1>
			turnOnRed2();
 8001032:	f000 f8bd 	bl	80011b0 <turnOnRed2>
			break;
 8001036:	e009      	b.n	800104c <ledBlinking+0x44>
		case YELLOW:
			turnOnYellow1();
 8001038:	f000 f882 	bl	8001140 <turnOnYellow1>
			turnOnYellow2();
 800103c:	f000 f8c8 	bl	80011d0 <turnOnYellow2>
			break;
 8001040:	e004      	b.n	800104c <ledBlinking+0x44>
		case GREEN:
			turnOnGreen1();
 8001042:	f000 f855 	bl	80010f0 <turnOnGreen1>
			turnOnGreen2();
 8001046:	f000 f8a3 	bl	8001190 <turnOnGreen2>
			break;
 800104a:	bf00      	nop
		}
		led_state=1;
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <ledBlinking+0x6c>)
 800104e:	2201      	movs	r2, #1
 8001050:	601a      	str	r2, [r3, #0]
		turnOff1();
		turnOff2();
		led_state=0;
	}

}
 8001052:	e00a      	b.n	800106a <ledBlinking+0x62>
	}else if(led_state==1){
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <ledBlinking+0x6c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d106      	bne.n	800106a <ledBlinking+0x62>
		turnOff1();
 800105c:	f000 f884 	bl	8001168 <turnOff1>
		turnOff2();
 8001060:	f000 f8c6 	bl	80011f0 <turnOff2>
		led_state=0;
 8001064:	4b03      	ldr	r3, [pc, #12]	; (8001074 <ledBlinking+0x6c>)
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000170 	.word	0x20000170

08001078 <PES_LED_ON>:

void PES_LED_ON(){
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001082:	4805      	ldr	r0, [pc, #20]	; (8001098 <PES_LED_ON+0x20>)
 8001084:	f001 f825 	bl	80020d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 1);
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800108e:	4803      	ldr	r0, [pc, #12]	; (800109c <PES_LED_ON+0x24>)
 8001090:	f001 f81f 	bl	80020d2 <HAL_GPIO_WritePin>
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40010c00 	.word	0x40010c00
 800109c:	40010800 	.word	0x40010800

080010a0 <PES_LED_RED>:
void PES_LED_RED(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <PES_LED_RED+0x20>)
 80010ac:	f001 f811 	bl	80020d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 0);
 80010b0:	2200      	movs	r2, #0
 80010b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010b6:	4803      	ldr	r0, [pc, #12]	; (80010c4 <PES_LED_RED+0x24>)
 80010b8:	f001 f80b 	bl	80020d2 <HAL_GPIO_WritePin>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40010c00 	.word	0x40010c00
 80010c4:	40010800 	.word	0x40010800

080010c8 <PES_LED_OFF>:
void PES_LED_OFF(){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 80010cc:	2200      	movs	r2, #0
 80010ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d2:	4805      	ldr	r0, [pc, #20]	; (80010e8 <PES_LED_OFF+0x20>)
 80010d4:	f000 fffd 	bl	80020d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010de:	4803      	ldr	r0, [pc, #12]	; (80010ec <PES_LED_OFF+0x24>)
 80010e0:	f000 fff7 	bl	80020d2 <HAL_GPIO_WritePin>
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40010c00 	.word	0x40010c00
 80010ec:	40010800 	.word	0x40010800

080010f0 <turnOnGreen1>:
void turnOnGreen1(){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010fa:	4805      	ldr	r0, [pc, #20]	; (8001110 <turnOnGreen1+0x20>)
 80010fc:	f000 ffe9 	bl	80020d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 8001100:	2201      	movs	r2, #1
 8001102:	2108      	movs	r1, #8
 8001104:	4803      	ldr	r0, [pc, #12]	; (8001114 <turnOnGreen1+0x24>)
 8001106:	f000 ffe4 	bl	80020d2 <HAL_GPIO_WritePin>
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40010800 	.word	0x40010800
 8001114:	40010c00 	.word	0x40010c00

08001118 <turnOnRed1>:
void turnOnRed1(){
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 800111c:	2201      	movs	r2, #1
 800111e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <turnOnRed1+0x20>)
 8001124:	f000 ffd5 	bl	80020d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 8001128:	2200      	movs	r2, #0
 800112a:	2108      	movs	r1, #8
 800112c:	4803      	ldr	r0, [pc, #12]	; (800113c <turnOnRed1+0x24>)
 800112e:	f000 ffd0 	bl	80020d2 <HAL_GPIO_WritePin>
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40010800 	.word	0x40010800
 800113c:	40010c00 	.word	0x40010c00

08001140 <turnOnYellow1>:
void turnOnYellow1(){
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 8001144:	2201      	movs	r2, #1
 8001146:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800114a:	4805      	ldr	r0, [pc, #20]	; (8001160 <turnOnYellow1+0x20>)
 800114c:	f000 ffc1 	bl	80020d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 8001150:	2201      	movs	r2, #1
 8001152:	2108      	movs	r1, #8
 8001154:	4803      	ldr	r0, [pc, #12]	; (8001164 <turnOnYellow1+0x24>)
 8001156:	f000 ffbc 	bl	80020d2 <HAL_GPIO_WritePin>
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40010800 	.word	0x40010800
 8001164:	40010c00 	.word	0x40010c00

08001168 <turnOff1>:
void turnOff1(){
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001172:	4805      	ldr	r0, [pc, #20]	; (8001188 <turnOff1+0x20>)
 8001174:	f000 ffad 	bl	80020d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2108      	movs	r1, #8
 800117c:	4803      	ldr	r0, [pc, #12]	; (800118c <turnOff1+0x24>)
 800117e:	f000 ffa8 	bl	80020d2 <HAL_GPIO_WritePin>
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40010800 	.word	0x40010800
 800118c:	40010c00 	.word	0x40010c00

08001190 <turnOnGreen2>:
void turnOnGreen2(){
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8001194:	2200      	movs	r2, #0
 8001196:	2120      	movs	r1, #32
 8001198:	4804      	ldr	r0, [pc, #16]	; (80011ac <turnOnGreen2+0x1c>)
 800119a:	f000 ff9a 	bl	80020d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 800119e:	2201      	movs	r2, #1
 80011a0:	2110      	movs	r1, #16
 80011a2:	4802      	ldr	r0, [pc, #8]	; (80011ac <turnOnGreen2+0x1c>)
 80011a4:	f000 ff95 	bl	80020d2 <HAL_GPIO_WritePin>
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40010c00 	.word	0x40010c00

080011b0 <turnOnRed2>:
void turnOnRed2(){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 80011b4:	2201      	movs	r2, #1
 80011b6:	2120      	movs	r1, #32
 80011b8:	4804      	ldr	r0, [pc, #16]	; (80011cc <turnOnRed2+0x1c>)
 80011ba:	f000 ff8a 	bl	80020d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2110      	movs	r1, #16
 80011c2:	4802      	ldr	r0, [pc, #8]	; (80011cc <turnOnRed2+0x1c>)
 80011c4:	f000 ff85 	bl	80020d2 <HAL_GPIO_WritePin>
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40010c00 	.word	0x40010c00

080011d0 <turnOnYellow2>:
void turnOnYellow2(){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 80011d4:	2201      	movs	r2, #1
 80011d6:	2120      	movs	r1, #32
 80011d8:	4804      	ldr	r0, [pc, #16]	; (80011ec <turnOnYellow2+0x1c>)
 80011da:	f000 ff7a 	bl	80020d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 80011de:	2201      	movs	r2, #1
 80011e0:	2110      	movs	r1, #16
 80011e2:	4802      	ldr	r0, [pc, #8]	; (80011ec <turnOnYellow2+0x1c>)
 80011e4:	f000 ff75 	bl	80020d2 <HAL_GPIO_WritePin>
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40010c00 	.word	0x40010c00

080011f0 <turnOff2>:
void turnOff2(){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2120      	movs	r1, #32
 80011f8:	4804      	ldr	r0, [pc, #16]	; (800120c <turnOff2+0x1c>)
 80011fa:	f000 ff6a 	bl	80020d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2110      	movs	r1, #16
 8001202:	4802      	ldr	r0, [pc, #8]	; (800120c <turnOff2+0x1c>)
 8001204:	f000 ff65 	bl	80020d2 <HAL_GPIO_WritePin>
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40010c00 	.word	0x40010c00

08001210 <update_led_buffer>:
void update_led_buffer(int val){
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	led_buffer1[0]=val/10;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a0d      	ldr	r2, [pc, #52]	; (8001250 <update_led_buffer+0x40>)
 800121c:	fb82 1203 	smull	r1, r2, r2, r3
 8001220:	1092      	asrs	r2, r2, #2
 8001222:	17db      	asrs	r3, r3, #31
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	4a0b      	ldr	r2, [pc, #44]	; (8001254 <update_led_buffer+0x44>)
 8001228:	6013      	str	r3, [r2, #0]
	led_buffer1[1]=val%10;
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <update_led_buffer+0x40>)
 800122e:	fb83 2301 	smull	r2, r3, r3, r1
 8001232:	109a      	asrs	r2, r3, #2
 8001234:	17cb      	asrs	r3, r1, #31
 8001236:	1ad2      	subs	r2, r2, r3
 8001238:	4613      	mov	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4413      	add	r3, r2
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	1aca      	subs	r2, r1, r3
 8001242:	4b04      	ldr	r3, [pc, #16]	; (8001254 <update_led_buffer+0x44>)
 8001244:	605a      	str	r2, [r3, #4]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr
 8001250:	66666667 	.word	0x66666667
 8001254:	2000017c 	.word	0x2000017c

08001258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800125c:	f000 fb7e 	bl	800195c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001260:	f000 f830 	bl	80012c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001264:	f000 f956 	bl	8001514 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001268:	f000 f8b4 	bl	80013d4 <MX_TIM3_Init>
  MX_TIM2_Init();
 800126c:	f000 f866 	bl	800133c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001270:	f000 f926 	bl	80014c0 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 8001274:	480c      	ldr	r0, [pc, #48]	; (80012a8 <main+0x50>)
 8001276:	f001 fbaf 	bl	80029d8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800127a:	2100      	movs	r1, #0
 800127c:	480b      	ldr	r0, [pc, #44]	; (80012ac <main+0x54>)
 800127e:	f001 fc55 	bl	8002b2c <HAL_TIM_PWM_Start>
  RED_DURATION=5;
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <main+0x58>)
 8001284:	2205      	movs	r2, #5
 8001286:	601a      	str	r2, [r3, #0]
  YELLOW_DURATION=2;
 8001288:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <main+0x5c>)
 800128a:	2202      	movs	r2, #2
 800128c:	601a      	str	r2, [r3, #0]
  GREEN_DURATION=3;
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <main+0x60>)
 8001290:	2203      	movs	r2, #3
 8001292:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  fsm_for_input_processing(&huart2, &htim3);
 8001294:	4905      	ldr	r1, [pc, #20]	; (80012ac <main+0x54>)
 8001296:	4809      	ldr	r0, [pc, #36]	; (80012bc <main+0x64>)
 8001298:	f7ff f910 	bl	80004bc <fsm_for_input_processing>
 	  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, pwm);
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <main+0x68>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b02      	ldr	r3, [pc, #8]	; (80012ac <main+0x54>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	635a      	str	r2, [r3, #52]	; 0x34
	  fsm_for_input_processing(&huart2, &htim3);
 80012a6:	e7f5      	b.n	8001294 <main+0x3c>
 80012a8:	20000184 	.word	0x20000184
 80012ac:	200001cc 	.word	0x200001cc
 80012b0:	20000120 	.word	0x20000120
 80012b4:	20000124 	.word	0x20000124
 80012b8:	20000128 	.word	0x20000128
 80012bc:	20000214 	.word	0x20000214
 80012c0:	2000011c 	.word	0x2000011c

080012c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b090      	sub	sp, #64	; 0x40
 80012c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ca:	f107 0318 	add.w	r3, r7, #24
 80012ce:	2228      	movs	r2, #40	; 0x28
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f002 ff90 	bl	80041f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012e6:	2302      	movs	r3, #2
 80012e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ea:	2301      	movs	r3, #1
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012ee:	2310      	movs	r3, #16
 80012f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f6:	f107 0318 	add.w	r3, r7, #24
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 ff02 	bl	8002104 <HAL_RCC_OscConfig>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001306:	f000 f985 	bl	8001614 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800130a:	230f      	movs	r3, #15
 800130c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f001 f970 	bl	8002608 <HAL_RCC_ClockConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800132e:	f000 f971 	bl	8001614 <Error_Handler>
  }
}
 8001332:	bf00      	nop
 8001334:	3740      	adds	r7, #64	; 0x40
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001342:	f107 0308 	add.w	r3, r7, #8
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001350:	463b      	mov	r3, r7
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001358:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <MX_TIM2_Init+0x94>)
 800135a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800135e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <MX_TIM2_Init+0x94>)
 8001362:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001366:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <MX_TIM2_Init+0x94>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <MX_TIM2_Init+0x94>)
 8001370:	2209      	movs	r2, #9
 8001372:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001374:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <MX_TIM2_Init+0x94>)
 8001376:	2200      	movs	r2, #0
 8001378:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <MX_TIM2_Init+0x94>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001380:	4813      	ldr	r0, [pc, #76]	; (80013d0 <MX_TIM2_Init+0x94>)
 8001382:	f001 fad9 	bl	8002938 <HAL_TIM_Base_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800138c:	f000 f942 	bl	8001614 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001394:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001396:	f107 0308 	add.w	r3, r7, #8
 800139a:	4619      	mov	r1, r3
 800139c:	480c      	ldr	r0, [pc, #48]	; (80013d0 <MX_TIM2_Init+0x94>)
 800139e:	f001 fe2d 	bl	8002ffc <HAL_TIM_ConfigClockSource>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013a8:	f000 f934 	bl	8001614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ac:	2300      	movs	r3, #0
 80013ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013b4:	463b      	mov	r3, r7
 80013b6:	4619      	mov	r1, r3
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_TIM2_Init+0x94>)
 80013ba:	f002 f9ab 	bl	8003714 <HAL_TIMEx_MasterConfigSynchronization>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013c4:	f000 f926 	bl	8001614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000184 	.word	0x20000184

080013d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08e      	sub	sp, #56	; 0x38
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e8:	f107 0320 	add.w	r3, r7, #32
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
 8001400:	615a      	str	r2, [r3, #20]
 8001402:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001404:	4b2c      	ldr	r3, [pc, #176]	; (80014b8 <MX_TIM3_Init+0xe4>)
 8001406:	4a2d      	ldr	r2, [pc, #180]	; (80014bc <MX_TIM3_Init+0xe8>)
 8001408:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 800140a:	4b2b      	ldr	r3, [pc, #172]	; (80014b8 <MX_TIM3_Init+0xe4>)
 800140c:	223f      	movs	r2, #63	; 0x3f
 800140e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001410:	4b29      	ldr	r3, [pc, #164]	; (80014b8 <MX_TIM3_Init+0xe4>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001416:	4b28      	ldr	r3, [pc, #160]	; (80014b8 <MX_TIM3_Init+0xe4>)
 8001418:	f240 32e7 	movw	r2, #999	; 0x3e7
 800141c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141e:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <MX_TIM3_Init+0xe4>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001424:	4b24      	ldr	r3, [pc, #144]	; (80014b8 <MX_TIM3_Init+0xe4>)
 8001426:	2200      	movs	r2, #0
 8001428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800142a:	4823      	ldr	r0, [pc, #140]	; (80014b8 <MX_TIM3_Init+0xe4>)
 800142c:	f001 fa84 	bl	8002938 <HAL_TIM_Base_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001436:	f000 f8ed 	bl	8001614 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800143a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001440:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001444:	4619      	mov	r1, r3
 8001446:	481c      	ldr	r0, [pc, #112]	; (80014b8 <MX_TIM3_Init+0xe4>)
 8001448:	f001 fdd8 	bl	8002ffc <HAL_TIM_ConfigClockSource>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001452:	f000 f8df 	bl	8001614 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001456:	4818      	ldr	r0, [pc, #96]	; (80014b8 <MX_TIM3_Init+0xe4>)
 8001458:	f001 fb10 	bl	8002a7c <HAL_TIM_PWM_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001462:	f000 f8d7 	bl	8001614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001466:	2300      	movs	r3, #0
 8001468:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800146e:	f107 0320 	add.w	r3, r7, #32
 8001472:	4619      	mov	r1, r3
 8001474:	4810      	ldr	r0, [pc, #64]	; (80014b8 <MX_TIM3_Init+0xe4>)
 8001476:	f002 f94d 	bl	8003714 <HAL_TIMEx_MasterConfigSynchronization>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001480:	f000 f8c8 	bl	8001614 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001484:	2360      	movs	r3, #96	; 0x60
 8001486:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	2200      	movs	r2, #0
 8001498:	4619      	mov	r1, r3
 800149a:	4807      	ldr	r0, [pc, #28]	; (80014b8 <MX_TIM3_Init+0xe4>)
 800149c:	f001 fcf0 	bl	8002e80 <HAL_TIM_PWM_ConfigChannel>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80014a6:	f000 f8b5 	bl	8001614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014aa:	4803      	ldr	r0, [pc, #12]	; (80014b8 <MX_TIM3_Init+0xe4>)
 80014ac:	f000 f92a 	bl	8001704 <HAL_TIM_MspPostInit>

}
 80014b0:	bf00      	nop
 80014b2:	3738      	adds	r7, #56	; 0x38
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	200001cc 	.word	0x200001cc
 80014bc:	40000400 	.word	0x40000400

080014c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <MX_USART2_UART_Init+0x4c>)
 80014c6:	4a12      	ldr	r2, [pc, #72]	; (8001510 <MX_USART2_UART_Init+0x50>)
 80014c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <MX_USART2_UART_Init+0x4c>)
 80014cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <MX_USART2_UART_Init+0x4c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <MX_USART2_UART_Init+0x4c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014de:	4b0b      	ldr	r3, [pc, #44]	; (800150c <MX_USART2_UART_Init+0x4c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <MX_USART2_UART_Init+0x4c>)
 80014e6:	220c      	movs	r2, #12
 80014e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <MX_USART2_UART_Init+0x4c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <MX_USART2_UART_Init+0x4c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014f6:	4805      	ldr	r0, [pc, #20]	; (800150c <MX_USART2_UART_Init+0x4c>)
 80014f8:	f002 f97c 	bl	80037f4 <HAL_UART_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001502:	f000 f887 	bl	8001614 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000214 	.word	0x20000214
 8001510:	40004400 	.word	0x40004400

08001514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151a:	f107 0308 	add.w	r3, r7, #8
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001528:	4b2e      	ldr	r3, [pc, #184]	; (80015e4 <MX_GPIO_Init+0xd0>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	4a2d      	ldr	r2, [pc, #180]	; (80015e4 <MX_GPIO_Init+0xd0>)
 800152e:	f043 0304 	orr.w	r3, r3, #4
 8001532:	6193      	str	r3, [r2, #24]
 8001534:	4b2b      	ldr	r3, [pc, #172]	; (80015e4 <MX_GPIO_Init+0xd0>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001540:	4b28      	ldr	r3, [pc, #160]	; (80015e4 <MX_GPIO_Init+0xd0>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	4a27      	ldr	r2, [pc, #156]	; (80015e4 <MX_GPIO_Init+0xd0>)
 8001546:	f043 0308 	orr.w	r3, r3, #8
 800154a:	6193      	str	r3, [r2, #24]
 800154c:	4b25      	ldr	r3, [pc, #148]	; (80015e4 <MX_GPIO_Init+0xd0>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	f003 0308 	and.w	r3, r3, #8
 8001554:	603b      	str	r3, [r7, #0]
 8001556:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8001558:	2200      	movs	r2, #0
 800155a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800155e:	4822      	ldr	r0, [pc, #136]	; (80015e8 <MX_GPIO_Init+0xd4>)
 8001560:	f000 fdb7 	bl	80020d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8001564:	2200      	movs	r2, #0
 8001566:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800156a:	4820      	ldr	r0, [pc, #128]	; (80015ec <MX_GPIO_Init+0xd8>)
 800156c:	f000 fdb1 	bl	80020d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Button4_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button4_Pin|Button1_Pin|Button2_Pin;
 8001570:	2313      	movs	r3, #19
 8001572:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001578:	2301      	movs	r3, #1
 800157a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157c:	f107 0308 	add.w	r3, r7, #8
 8001580:	4619      	mov	r1, r3
 8001582:	481a      	ldr	r0, [pc, #104]	; (80015ec <MX_GPIO_Init+0xd8>)
 8001584:	f000 fc0a 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 8001588:	2301      	movs	r3, #1
 800158a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001590:	2301      	movs	r3, #1
 8001592:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 8001594:	f107 0308 	add.w	r3, r7, #8
 8001598:	4619      	mov	r1, r3
 800159a:	4813      	ldr	r0, [pc, #76]	; (80015e8 <MX_GPIO_Init+0xd4>)
 800159c:	f000 fbfe 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 80015a0:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80015a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a6:	2301      	movs	r3, #1
 80015a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2302      	movs	r3, #2
 80015b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b2:	f107 0308 	add.w	r3, r7, #8
 80015b6:	4619      	mov	r1, r3
 80015b8:	480b      	ldr	r0, [pc, #44]	; (80015e8 <MX_GPIO_Init+0xd4>)
 80015ba:	f000 fbef 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 80015be:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80015c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c4:	2301      	movs	r3, #1
 80015c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015cc:	2302      	movs	r3, #2
 80015ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	4619      	mov	r1, r3
 80015d6:	4805      	ldr	r0, [pc, #20]	; (80015ec <MX_GPIO_Init+0xd8>)
 80015d8:	f000 fbe0 	bl	8001d9c <HAL_GPIO_Init>

}
 80015dc:	bf00      	nop
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40010c00 	.word	0x40010c00
 80015ec:	40010800 	.word	0x40010800

080015f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef*htim){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	TimerRun();
 80015f8:	f7fe fe10 	bl	800021c <TimerRun>
	button1_reading();
 80015fc:	f7fe fe64 	bl	80002c8 <button1_reading>
	button2_reading();
 8001600:	f7fe fe84 	bl	800030c <button2_reading>
	button3_reading();
 8001604:	f7fe fec6 	bl	8000394 <button3_reading>
	button4_reading();
 8001608:	f7fe fee6 	bl	80003d8 <button4_reading>
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001618:	b672      	cpsid	i
}
 800161a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800161c:	e7fe      	b.n	800161c <Error_Handler+0x8>
	...

08001620 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <HAL_MspInit+0x5c>)
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	4a14      	ldr	r2, [pc, #80]	; (800167c <HAL_MspInit+0x5c>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6193      	str	r3, [r2, #24]
 8001632:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_MspInit+0x5c>)
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163e:	4b0f      	ldr	r3, [pc, #60]	; (800167c <HAL_MspInit+0x5c>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	4a0e      	ldr	r2, [pc, #56]	; (800167c <HAL_MspInit+0x5c>)
 8001644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001648:	61d3      	str	r3, [r2, #28]
 800164a:	4b0c      	ldr	r3, [pc, #48]	; (800167c <HAL_MspInit+0x5c>)
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001656:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <HAL_MspInit+0x60>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	4a04      	ldr	r2, [pc, #16]	; (8001680 <HAL_MspInit+0x60>)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001672:	bf00      	nop
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	40021000 	.word	0x40021000
 8001680:	40010000 	.word	0x40010000

08001684 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001694:	d114      	bne.n	80016c0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001696:	4b19      	ldr	r3, [pc, #100]	; (80016fc <HAL_TIM_Base_MspInit+0x78>)
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	4a18      	ldr	r2, [pc, #96]	; (80016fc <HAL_TIM_Base_MspInit+0x78>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	61d3      	str	r3, [r2, #28]
 80016a2:	4b16      	ldr	r3, [pc, #88]	; (80016fc <HAL_TIM_Base_MspInit+0x78>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	201c      	movs	r0, #28
 80016b4:	f000 fa8b 	bl	8001bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016b8:	201c      	movs	r0, #28
 80016ba:	f000 faa4 	bl	8001c06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016be:	e018      	b.n	80016f2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <HAL_TIM_Base_MspInit+0x7c>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d113      	bne.n	80016f2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <HAL_TIM_Base_MspInit+0x78>)
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <HAL_TIM_Base_MspInit+0x78>)
 80016d0:	f043 0302 	orr.w	r3, r3, #2
 80016d4:	61d3      	str	r3, [r2, #28]
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <HAL_TIM_Base_MspInit+0x78>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2100      	movs	r1, #0
 80016e6:	201d      	movs	r0, #29
 80016e8:	f000 fa71 	bl	8001bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016ec:	201d      	movs	r0, #29
 80016ee:	f000 fa8a 	bl	8001c06 <HAL_NVIC_EnableIRQ>
}
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40021000 	.word	0x40021000
 8001700:	40000400 	.word	0x40000400

08001704 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a0f      	ldr	r2, [pc, #60]	; (800175c <HAL_TIM_MspPostInit+0x58>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d117      	bne.n	8001754 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001724:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <HAL_TIM_MspPostInit+0x5c>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	4a0d      	ldr	r2, [pc, #52]	; (8001760 <HAL_TIM_MspPostInit+0x5c>)
 800172a:	f043 0304 	orr.w	r3, r3, #4
 800172e:	6193      	str	r3, [r2, #24]
 8001730:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <HAL_TIM_MspPostInit+0x5c>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800173c:	2340      	movs	r3, #64	; 0x40
 800173e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001744:	2302      	movs	r3, #2
 8001746:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001748:	f107 0310 	add.w	r3, r7, #16
 800174c:	4619      	mov	r1, r3
 800174e:	4805      	ldr	r0, [pc, #20]	; (8001764 <HAL_TIM_MspPostInit+0x60>)
 8001750:	f000 fb24 	bl	8001d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001754:	bf00      	nop
 8001756:	3720      	adds	r7, #32
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40000400 	.word	0x40000400
 8001760:	40021000 	.word	0x40021000
 8001764:	40010800 	.word	0x40010800

08001768 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b088      	sub	sp, #32
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a1f      	ldr	r2, [pc, #124]	; (8001800 <HAL_UART_MspInit+0x98>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d137      	bne.n	80017f8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001788:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <HAL_UART_MspInit+0x9c>)
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	4a1d      	ldr	r2, [pc, #116]	; (8001804 <HAL_UART_MspInit+0x9c>)
 800178e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001792:	61d3      	str	r3, [r2, #28]
 8001794:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <HAL_UART_MspInit+0x9c>)
 8001796:	69db      	ldr	r3, [r3, #28]
 8001798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a0:	4b18      	ldr	r3, [pc, #96]	; (8001804 <HAL_UART_MspInit+0x9c>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	4a17      	ldr	r2, [pc, #92]	; (8001804 <HAL_UART_MspInit+0x9c>)
 80017a6:	f043 0304 	orr.w	r3, r3, #4
 80017aa:	6193      	str	r3, [r2, #24]
 80017ac:	4b15      	ldr	r3, [pc, #84]	; (8001804 <HAL_UART_MspInit+0x9c>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017b8:	2304      	movs	r3, #4
 80017ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	2302      	movs	r3, #2
 80017be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017c0:	2303      	movs	r3, #3
 80017c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c4:	f107 0310 	add.w	r3, r7, #16
 80017c8:	4619      	mov	r1, r3
 80017ca:	480f      	ldr	r0, [pc, #60]	; (8001808 <HAL_UART_MspInit+0xa0>)
 80017cc:	f000 fae6 	bl	8001d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017d0:	2308      	movs	r3, #8
 80017d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017dc:	f107 0310 	add.w	r3, r7, #16
 80017e0:	4619      	mov	r1, r3
 80017e2:	4809      	ldr	r0, [pc, #36]	; (8001808 <HAL_UART_MspInit+0xa0>)
 80017e4:	f000 fada 	bl	8001d9c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017e8:	2200      	movs	r2, #0
 80017ea:	2100      	movs	r1, #0
 80017ec:	2026      	movs	r0, #38	; 0x26
 80017ee:	f000 f9ee 	bl	8001bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017f2:	2026      	movs	r0, #38	; 0x26
 80017f4:	f000 fa07 	bl	8001c06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017f8:	bf00      	nop
 80017fa:	3720      	adds	r7, #32
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40004400 	.word	0x40004400
 8001804:	40021000 	.word	0x40021000
 8001808:	40010800 	.word	0x40010800

0800180c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001810:	e7fe      	b.n	8001810 <NMI_Handler+0x4>

08001812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001816:	e7fe      	b.n	8001816 <HardFault_Handler+0x4>

08001818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800181c:	e7fe      	b.n	800181c <MemManage_Handler+0x4>

0800181e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001822:	e7fe      	b.n	8001822 <BusFault_Handler+0x4>

08001824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001828:	e7fe      	b.n	8001828 <UsageFault_Handler+0x4>

0800182a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr

08001836 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr

08001842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr

0800184e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001852:	f000 f8c9 	bl	80019e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001860:	4802      	ldr	r0, [pc, #8]	; (800186c <TIM2_IRQHandler+0x10>)
 8001862:	f001 fa05 	bl	8002c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000184 	.word	0x20000184

08001870 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001874:	4802      	ldr	r0, [pc, #8]	; (8001880 <TIM3_IRQHandler+0x10>)
 8001876:	f001 f9fb 	bl	8002c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	200001cc 	.word	0x200001cc

08001884 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001888:	4802      	ldr	r0, [pc, #8]	; (8001894 <USART2_IRQHandler+0x10>)
 800188a:	f002 f893 	bl	80039b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000214 	.word	0x20000214

08001898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a0:	4a14      	ldr	r2, [pc, #80]	; (80018f4 <_sbrk+0x5c>)
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <_sbrk+0x60>)
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018ac:	4b13      	ldr	r3, [pc, #76]	; (80018fc <_sbrk+0x64>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d102      	bne.n	80018ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <_sbrk+0x64>)
 80018b6:	4a12      	ldr	r2, [pc, #72]	; (8001900 <_sbrk+0x68>)
 80018b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <_sbrk+0x64>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d207      	bcs.n	80018d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c8:	f002 fc6c 	bl	80041a4 <__errno>
 80018cc:	4603      	mov	r3, r0
 80018ce:	220c      	movs	r2, #12
 80018d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295
 80018d6:	e009      	b.n	80018ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <_sbrk+0x64>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018de:	4b07      	ldr	r3, [pc, #28]	; (80018fc <_sbrk+0x64>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	4a05      	ldr	r2, [pc, #20]	; (80018fc <_sbrk+0x64>)
 80018e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ea:	68fb      	ldr	r3, [r7, #12]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20005000 	.word	0x20005000
 80018f8:	00000400 	.word	0x00000400
 80018fc:	20000258 	.word	0x20000258
 8001900:	20000270 	.word	0x20000270

08001904 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr

08001910 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001910:	480c      	ldr	r0, [pc, #48]	; (8001944 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001912:	490d      	ldr	r1, [pc, #52]	; (8001948 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001914:	4a0d      	ldr	r2, [pc, #52]	; (800194c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001918:	e002      	b.n	8001920 <LoopCopyDataInit>

0800191a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800191a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800191c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800191e:	3304      	adds	r3, #4

08001920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001924:	d3f9      	bcc.n	800191a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001926:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001928:	4c0a      	ldr	r4, [pc, #40]	; (8001954 <LoopFillZerobss+0x22>)
  movs r3, #0
 800192a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800192c:	e001      	b.n	8001932 <LoopFillZerobss>

0800192e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800192e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001930:	3204      	adds	r2, #4

08001932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001934:	d3fb      	bcc.n	800192e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001936:	f7ff ffe5 	bl	8001904 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800193a:	f002 fc39 	bl	80041b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800193e:	f7ff fc8b 	bl	8001258 <main>
  bx lr
 8001942:	4770      	bx	lr
  ldr r0, =_sdata
 8001944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001948:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 800194c:	08004b88 	.word	0x08004b88
  ldr r2, =_sbss
 8001950:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001954:	20000270 	.word	0x20000270

08001958 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001958:	e7fe      	b.n	8001958 <ADC1_2_IRQHandler>
	...

0800195c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001960:	4b08      	ldr	r3, [pc, #32]	; (8001984 <HAL_Init+0x28>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a07      	ldr	r2, [pc, #28]	; (8001984 <HAL_Init+0x28>)
 8001966:	f043 0310 	orr.w	r3, r3, #16
 800196a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800196c:	2003      	movs	r0, #3
 800196e:	f000 f923 	bl	8001bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001972:	200f      	movs	r0, #15
 8001974:	f000 f808 	bl	8001988 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001978:	f7ff fe52 	bl	8001620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40022000 	.word	0x40022000

08001988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001990:	4b12      	ldr	r3, [pc, #72]	; (80019dc <HAL_InitTick+0x54>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <HAL_InitTick+0x58>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	4619      	mov	r1, r3
 800199a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800199e:	fbb3 f3f1 	udiv	r3, r3, r1
 80019a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 f93b 	bl	8001c22 <HAL_SYSTICK_Config>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e00e      	b.n	80019d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b0f      	cmp	r3, #15
 80019ba:	d80a      	bhi.n	80019d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019bc:	2200      	movs	r2, #0
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	f04f 30ff 	mov.w	r0, #4294967295
 80019c4:	f000 f903 	bl	8001bce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c8:	4a06      	ldr	r2, [pc, #24]	; (80019e4 <HAL_InitTick+0x5c>)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e000      	b.n	80019d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000038 	.word	0x20000038
 80019e0:	20000040 	.word	0x20000040
 80019e4:	2000003c 	.word	0x2000003c

080019e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <HAL_IncTick+0x1c>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	461a      	mov	r2, r3
 80019f2:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <HAL_IncTick+0x20>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4413      	add	r3, r2
 80019f8:	4a03      	ldr	r2, [pc, #12]	; (8001a08 <HAL_IncTick+0x20>)
 80019fa:	6013      	str	r3, [r2, #0]
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr
 8001a04:	20000040 	.word	0x20000040
 8001a08:	2000025c 	.word	0x2000025c

08001a0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a10:	4b02      	ldr	r3, [pc, #8]	; (8001a1c <HAL_GetTick+0x10>)
 8001a12:	681b      	ldr	r3, [r3, #0]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr
 8001a1c:	2000025c 	.word	0x2000025c

08001a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <__NVIC_SetPriorityGrouping+0x44>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a52:	4a04      	ldr	r2, [pc, #16]	; (8001a64 <__NVIC_SetPriorityGrouping+0x44>)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	60d3      	str	r3, [r2, #12]
}
 8001a58:	bf00      	nop
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a6c:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <__NVIC_GetPriorityGrouping+0x18>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	0a1b      	lsrs	r3, r3, #8
 8001a72:	f003 0307 	and.w	r3, r3, #7
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	db0b      	blt.n	8001aae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	f003 021f 	and.w	r2, r3, #31
 8001a9c:	4906      	ldr	r1, [pc, #24]	; (8001ab8 <__NVIC_EnableIRQ+0x34>)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	095b      	lsrs	r3, r3, #5
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr
 8001ab8:	e000e100 	.word	0xe000e100

08001abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	6039      	str	r1, [r7, #0]
 8001ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	db0a      	blt.n	8001ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	490c      	ldr	r1, [pc, #48]	; (8001b08 <__NVIC_SetPriority+0x4c>)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	0112      	lsls	r2, r2, #4
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	440b      	add	r3, r1
 8001ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae4:	e00a      	b.n	8001afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4908      	ldr	r1, [pc, #32]	; (8001b0c <__NVIC_SetPriority+0x50>)
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	3b04      	subs	r3, #4
 8001af4:	0112      	lsls	r2, r2, #4
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	440b      	add	r3, r1
 8001afa:	761a      	strb	r2, [r3, #24]
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	e000e100 	.word	0xe000e100
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b089      	sub	sp, #36	; 0x24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f1c3 0307 	rsb	r3, r3, #7
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	bf28      	it	cs
 8001b2e:	2304      	movcs	r3, #4
 8001b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	3304      	adds	r3, #4
 8001b36:	2b06      	cmp	r3, #6
 8001b38:	d902      	bls.n	8001b40 <NVIC_EncodePriority+0x30>
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	3b03      	subs	r3, #3
 8001b3e:	e000      	b.n	8001b42 <NVIC_EncodePriority+0x32>
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b44:	f04f 32ff 	mov.w	r2, #4294967295
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43da      	mvns	r2, r3
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	401a      	ands	r2, r3
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b58:	f04f 31ff 	mov.w	r1, #4294967295
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b62:	43d9      	mvns	r1, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b68:	4313      	orrs	r3, r2
         );
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3724      	adds	r7, #36	; 0x24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b84:	d301      	bcc.n	8001b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b86:	2301      	movs	r3, #1
 8001b88:	e00f      	b.n	8001baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b8a:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <SysTick_Config+0x40>)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b92:	210f      	movs	r1, #15
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295
 8001b98:	f7ff ff90 	bl	8001abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b9c:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <SysTick_Config+0x40>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ba2:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <SysTick_Config+0x40>)
 8001ba4:	2207      	movs	r2, #7
 8001ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	e000e010 	.word	0xe000e010

08001bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff ff2d 	bl	8001a20 <__NVIC_SetPriorityGrouping>
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b086      	sub	sp, #24
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
 8001bda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001be0:	f7ff ff42 	bl	8001a68 <__NVIC_GetPriorityGrouping>
 8001be4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	68b9      	ldr	r1, [r7, #8]
 8001bea:	6978      	ldr	r0, [r7, #20]
 8001bec:	f7ff ff90 	bl	8001b10 <NVIC_EncodePriority>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff ff5f 	bl	8001abc <__NVIC_SetPriority>
}
 8001bfe:	bf00      	nop
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ff35 	bl	8001a84 <__NVIC_EnableIRQ>
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff ffa2 	bl	8001b74 <SysTick_Config>
 8001c30:	4603      	mov	r3, r0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b085      	sub	sp, #20
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d008      	beq.n	8001c62 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2204      	movs	r2, #4
 8001c54:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e020      	b.n	8001ca4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 020e 	bic.w	r2, r2, #14
 8001c70:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0201 	bic.w	r2, r2, #1
 8001c80:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c90:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr
	...

08001cb0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d005      	beq.n	8001cd2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2204      	movs	r2, #4
 8001cca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	73fb      	strb	r3, [r7, #15]
 8001cd0:	e051      	b.n	8001d76 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 020e 	bic.w	r2, r2, #14
 8001ce0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0201 	bic.w	r2, r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a22      	ldr	r2, [pc, #136]	; (8001d80 <HAL_DMA_Abort_IT+0xd0>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d029      	beq.n	8001d50 <HAL_DMA_Abort_IT+0xa0>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a20      	ldr	r2, [pc, #128]	; (8001d84 <HAL_DMA_Abort_IT+0xd4>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d022      	beq.n	8001d4c <HAL_DMA_Abort_IT+0x9c>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a1f      	ldr	r2, [pc, #124]	; (8001d88 <HAL_DMA_Abort_IT+0xd8>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d01a      	beq.n	8001d46 <HAL_DMA_Abort_IT+0x96>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a1d      	ldr	r2, [pc, #116]	; (8001d8c <HAL_DMA_Abort_IT+0xdc>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d012      	beq.n	8001d40 <HAL_DMA_Abort_IT+0x90>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a1c      	ldr	r2, [pc, #112]	; (8001d90 <HAL_DMA_Abort_IT+0xe0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d00a      	beq.n	8001d3a <HAL_DMA_Abort_IT+0x8a>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a1a      	ldr	r2, [pc, #104]	; (8001d94 <HAL_DMA_Abort_IT+0xe4>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d102      	bne.n	8001d34 <HAL_DMA_Abort_IT+0x84>
 8001d2e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d32:	e00e      	b.n	8001d52 <HAL_DMA_Abort_IT+0xa2>
 8001d34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d38:	e00b      	b.n	8001d52 <HAL_DMA_Abort_IT+0xa2>
 8001d3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d3e:	e008      	b.n	8001d52 <HAL_DMA_Abort_IT+0xa2>
 8001d40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d44:	e005      	b.n	8001d52 <HAL_DMA_Abort_IT+0xa2>
 8001d46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d4a:	e002      	b.n	8001d52 <HAL_DMA_Abort_IT+0xa2>
 8001d4c:	2310      	movs	r3, #16
 8001d4e:	e000      	b.n	8001d52 <HAL_DMA_Abort_IT+0xa2>
 8001d50:	2301      	movs	r3, #1
 8001d52:	4a11      	ldr	r2, [pc, #68]	; (8001d98 <HAL_DMA_Abort_IT+0xe8>)
 8001d54:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	4798      	blx	r3
    } 
  }
  return status;
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40020008 	.word	0x40020008
 8001d84:	4002001c 	.word	0x4002001c
 8001d88:	40020030 	.word	0x40020030
 8001d8c:	40020044 	.word	0x40020044
 8001d90:	40020058 	.word	0x40020058
 8001d94:	4002006c 	.word	0x4002006c
 8001d98:	40020000 	.word	0x40020000

08001d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b08b      	sub	sp, #44	; 0x2c
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001da6:	2300      	movs	r3, #0
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001daa:	2300      	movs	r3, #0
 8001dac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dae:	e169      	b.n	8002084 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001db0:	2201      	movs	r2, #1
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	69fa      	ldr	r2, [r7, #28]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	f040 8158 	bne.w	800207e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	4a9a      	ldr	r2, [pc, #616]	; (800203c <HAL_GPIO_Init+0x2a0>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d05e      	beq.n	8001e96 <HAL_GPIO_Init+0xfa>
 8001dd8:	4a98      	ldr	r2, [pc, #608]	; (800203c <HAL_GPIO_Init+0x2a0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d875      	bhi.n	8001eca <HAL_GPIO_Init+0x12e>
 8001dde:	4a98      	ldr	r2, [pc, #608]	; (8002040 <HAL_GPIO_Init+0x2a4>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d058      	beq.n	8001e96 <HAL_GPIO_Init+0xfa>
 8001de4:	4a96      	ldr	r2, [pc, #600]	; (8002040 <HAL_GPIO_Init+0x2a4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d86f      	bhi.n	8001eca <HAL_GPIO_Init+0x12e>
 8001dea:	4a96      	ldr	r2, [pc, #600]	; (8002044 <HAL_GPIO_Init+0x2a8>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d052      	beq.n	8001e96 <HAL_GPIO_Init+0xfa>
 8001df0:	4a94      	ldr	r2, [pc, #592]	; (8002044 <HAL_GPIO_Init+0x2a8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d869      	bhi.n	8001eca <HAL_GPIO_Init+0x12e>
 8001df6:	4a94      	ldr	r2, [pc, #592]	; (8002048 <HAL_GPIO_Init+0x2ac>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d04c      	beq.n	8001e96 <HAL_GPIO_Init+0xfa>
 8001dfc:	4a92      	ldr	r2, [pc, #584]	; (8002048 <HAL_GPIO_Init+0x2ac>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d863      	bhi.n	8001eca <HAL_GPIO_Init+0x12e>
 8001e02:	4a92      	ldr	r2, [pc, #584]	; (800204c <HAL_GPIO_Init+0x2b0>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d046      	beq.n	8001e96 <HAL_GPIO_Init+0xfa>
 8001e08:	4a90      	ldr	r2, [pc, #576]	; (800204c <HAL_GPIO_Init+0x2b0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d85d      	bhi.n	8001eca <HAL_GPIO_Init+0x12e>
 8001e0e:	2b12      	cmp	r3, #18
 8001e10:	d82a      	bhi.n	8001e68 <HAL_GPIO_Init+0xcc>
 8001e12:	2b12      	cmp	r3, #18
 8001e14:	d859      	bhi.n	8001eca <HAL_GPIO_Init+0x12e>
 8001e16:	a201      	add	r2, pc, #4	; (adr r2, 8001e1c <HAL_GPIO_Init+0x80>)
 8001e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1c:	08001e97 	.word	0x08001e97
 8001e20:	08001e71 	.word	0x08001e71
 8001e24:	08001e83 	.word	0x08001e83
 8001e28:	08001ec5 	.word	0x08001ec5
 8001e2c:	08001ecb 	.word	0x08001ecb
 8001e30:	08001ecb 	.word	0x08001ecb
 8001e34:	08001ecb 	.word	0x08001ecb
 8001e38:	08001ecb 	.word	0x08001ecb
 8001e3c:	08001ecb 	.word	0x08001ecb
 8001e40:	08001ecb 	.word	0x08001ecb
 8001e44:	08001ecb 	.word	0x08001ecb
 8001e48:	08001ecb 	.word	0x08001ecb
 8001e4c:	08001ecb 	.word	0x08001ecb
 8001e50:	08001ecb 	.word	0x08001ecb
 8001e54:	08001ecb 	.word	0x08001ecb
 8001e58:	08001ecb 	.word	0x08001ecb
 8001e5c:	08001ecb 	.word	0x08001ecb
 8001e60:	08001e79 	.word	0x08001e79
 8001e64:	08001e8d 	.word	0x08001e8d
 8001e68:	4a79      	ldr	r2, [pc, #484]	; (8002050 <HAL_GPIO_Init+0x2b4>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d013      	beq.n	8001e96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e6e:	e02c      	b.n	8001eca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	623b      	str	r3, [r7, #32]
          break;
 8001e76:	e029      	b.n	8001ecc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	623b      	str	r3, [r7, #32]
          break;
 8001e80:	e024      	b.n	8001ecc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	3308      	adds	r3, #8
 8001e88:	623b      	str	r3, [r7, #32]
          break;
 8001e8a:	e01f      	b.n	8001ecc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	330c      	adds	r3, #12
 8001e92:	623b      	str	r3, [r7, #32]
          break;
 8001e94:	e01a      	b.n	8001ecc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d102      	bne.n	8001ea4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e9e:	2304      	movs	r3, #4
 8001ea0:	623b      	str	r3, [r7, #32]
          break;
 8001ea2:	e013      	b.n	8001ecc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d105      	bne.n	8001eb8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eac:	2308      	movs	r3, #8
 8001eae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69fa      	ldr	r2, [r7, #28]
 8001eb4:	611a      	str	r2, [r3, #16]
          break;
 8001eb6:	e009      	b.n	8001ecc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eb8:	2308      	movs	r3, #8
 8001eba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69fa      	ldr	r2, [r7, #28]
 8001ec0:	615a      	str	r2, [r3, #20]
          break;
 8001ec2:	e003      	b.n	8001ecc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	623b      	str	r3, [r7, #32]
          break;
 8001ec8:	e000      	b.n	8001ecc <HAL_GPIO_Init+0x130>
          break;
 8001eca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	2bff      	cmp	r3, #255	; 0xff
 8001ed0:	d801      	bhi.n	8001ed6 <HAL_GPIO_Init+0x13a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	e001      	b.n	8001eda <HAL_GPIO_Init+0x13e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3304      	adds	r3, #4
 8001eda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	2bff      	cmp	r3, #255	; 0xff
 8001ee0:	d802      	bhi.n	8001ee8 <HAL_GPIO_Init+0x14c>
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	e002      	b.n	8001eee <HAL_GPIO_Init+0x152>
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	3b08      	subs	r3, #8
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	210f      	movs	r1, #15
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	401a      	ands	r2, r3
 8001f00:	6a39      	ldr	r1, [r7, #32]
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	fa01 f303 	lsl.w	r3, r1, r3
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 80b1 	beq.w	800207e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f1c:	4b4d      	ldr	r3, [pc, #308]	; (8002054 <HAL_GPIO_Init+0x2b8>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	4a4c      	ldr	r2, [pc, #304]	; (8002054 <HAL_GPIO_Init+0x2b8>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6193      	str	r3, [r2, #24]
 8001f28:	4b4a      	ldr	r3, [pc, #296]	; (8002054 <HAL_GPIO_Init+0x2b8>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f34:	4a48      	ldr	r2, [pc, #288]	; (8002058 <HAL_GPIO_Init+0x2bc>)
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	089b      	lsrs	r3, r3, #2
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	220f      	movs	r2, #15
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4013      	ands	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a40      	ldr	r2, [pc, #256]	; (800205c <HAL_GPIO_Init+0x2c0>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d013      	beq.n	8001f88 <HAL_GPIO_Init+0x1ec>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a3f      	ldr	r2, [pc, #252]	; (8002060 <HAL_GPIO_Init+0x2c4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d00d      	beq.n	8001f84 <HAL_GPIO_Init+0x1e8>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a3e      	ldr	r2, [pc, #248]	; (8002064 <HAL_GPIO_Init+0x2c8>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d007      	beq.n	8001f80 <HAL_GPIO_Init+0x1e4>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a3d      	ldr	r2, [pc, #244]	; (8002068 <HAL_GPIO_Init+0x2cc>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d101      	bne.n	8001f7c <HAL_GPIO_Init+0x1e0>
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e006      	b.n	8001f8a <HAL_GPIO_Init+0x1ee>
 8001f7c:	2304      	movs	r3, #4
 8001f7e:	e004      	b.n	8001f8a <HAL_GPIO_Init+0x1ee>
 8001f80:	2302      	movs	r3, #2
 8001f82:	e002      	b.n	8001f8a <HAL_GPIO_Init+0x1ee>
 8001f84:	2301      	movs	r3, #1
 8001f86:	e000      	b.n	8001f8a <HAL_GPIO_Init+0x1ee>
 8001f88:	2300      	movs	r3, #0
 8001f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f8c:	f002 0203 	and.w	r2, r2, #3
 8001f90:	0092      	lsls	r2, r2, #2
 8001f92:	4093      	lsls	r3, r2
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f9a:	492f      	ldr	r1, [pc, #188]	; (8002058 <HAL_GPIO_Init+0x2bc>)
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	089b      	lsrs	r3, r3, #2
 8001fa0:	3302      	adds	r3, #2
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d006      	beq.n	8001fc2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fb4:	4b2d      	ldr	r3, [pc, #180]	; (800206c <HAL_GPIO_Init+0x2d0>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	492c      	ldr	r1, [pc, #176]	; (800206c <HAL_GPIO_Init+0x2d0>)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	600b      	str	r3, [r1, #0]
 8001fc0:	e006      	b.n	8001fd0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fc2:	4b2a      	ldr	r3, [pc, #168]	; (800206c <HAL_GPIO_Init+0x2d0>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	4928      	ldr	r1, [pc, #160]	; (800206c <HAL_GPIO_Init+0x2d0>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d006      	beq.n	8001fea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fdc:	4b23      	ldr	r3, [pc, #140]	; (800206c <HAL_GPIO_Init+0x2d0>)
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	4922      	ldr	r1, [pc, #136]	; (800206c <HAL_GPIO_Init+0x2d0>)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	604b      	str	r3, [r1, #4]
 8001fe8:	e006      	b.n	8001ff8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fea:	4b20      	ldr	r3, [pc, #128]	; (800206c <HAL_GPIO_Init+0x2d0>)
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	491e      	ldr	r1, [pc, #120]	; (800206c <HAL_GPIO_Init+0x2d0>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d006      	beq.n	8002012 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002004:	4b19      	ldr	r3, [pc, #100]	; (800206c <HAL_GPIO_Init+0x2d0>)
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	4918      	ldr	r1, [pc, #96]	; (800206c <HAL_GPIO_Init+0x2d0>)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	4313      	orrs	r3, r2
 800200e:	608b      	str	r3, [r1, #8]
 8002010:	e006      	b.n	8002020 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002012:	4b16      	ldr	r3, [pc, #88]	; (800206c <HAL_GPIO_Init+0x2d0>)
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	43db      	mvns	r3, r3
 800201a:	4914      	ldr	r1, [pc, #80]	; (800206c <HAL_GPIO_Init+0x2d0>)
 800201c:	4013      	ands	r3, r2
 800201e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d021      	beq.n	8002070 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800202c:	4b0f      	ldr	r3, [pc, #60]	; (800206c <HAL_GPIO_Init+0x2d0>)
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	490e      	ldr	r1, [pc, #56]	; (800206c <HAL_GPIO_Init+0x2d0>)
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	60cb      	str	r3, [r1, #12]
 8002038:	e021      	b.n	800207e <HAL_GPIO_Init+0x2e2>
 800203a:	bf00      	nop
 800203c:	10320000 	.word	0x10320000
 8002040:	10310000 	.word	0x10310000
 8002044:	10220000 	.word	0x10220000
 8002048:	10210000 	.word	0x10210000
 800204c:	10120000 	.word	0x10120000
 8002050:	10110000 	.word	0x10110000
 8002054:	40021000 	.word	0x40021000
 8002058:	40010000 	.word	0x40010000
 800205c:	40010800 	.word	0x40010800
 8002060:	40010c00 	.word	0x40010c00
 8002064:	40011000 	.word	0x40011000
 8002068:	40011400 	.word	0x40011400
 800206c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <HAL_GPIO_Init+0x304>)
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	43db      	mvns	r3, r3
 8002078:	4909      	ldr	r1, [pc, #36]	; (80020a0 <HAL_GPIO_Init+0x304>)
 800207a:	4013      	ands	r3, r2
 800207c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	3301      	adds	r3, #1
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	fa22 f303 	lsr.w	r3, r2, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	f47f ae8e 	bne.w	8001db0 <HAL_GPIO_Init+0x14>
  }
}
 8002094:	bf00      	nop
 8002096:	bf00      	nop
 8002098:	372c      	adds	r7, #44	; 0x2c
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr
 80020a0:	40010400 	.word	0x40010400

080020a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	887b      	ldrh	r3, [r7, #2]
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d002      	beq.n	80020c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020bc:	2301      	movs	r3, #1
 80020be:	73fb      	strb	r3, [r7, #15]
 80020c0:	e001      	b.n	80020c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020c2:	2300      	movs	r3, #0
 80020c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr

080020d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	460b      	mov	r3, r1
 80020dc:	807b      	strh	r3, [r7, #2]
 80020de:	4613      	mov	r3, r2
 80020e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020e2:	787b      	ldrb	r3, [r7, #1]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020e8:	887a      	ldrh	r2, [r7, #2]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020ee:	e003      	b.n	80020f8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020f0:	887b      	ldrh	r3, [r7, #2]
 80020f2:	041a      	lsls	r2, r3, #16
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	611a      	str	r2, [r3, #16]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr
	...

08002104 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e272      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 8087 	beq.w	8002232 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002124:	4b92      	ldr	r3, [pc, #584]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 030c 	and.w	r3, r3, #12
 800212c:	2b04      	cmp	r3, #4
 800212e:	d00c      	beq.n	800214a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002130:	4b8f      	ldr	r3, [pc, #572]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 030c 	and.w	r3, r3, #12
 8002138:	2b08      	cmp	r3, #8
 800213a:	d112      	bne.n	8002162 <HAL_RCC_OscConfig+0x5e>
 800213c:	4b8c      	ldr	r3, [pc, #560]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002148:	d10b      	bne.n	8002162 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800214a:	4b89      	ldr	r3, [pc, #548]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d06c      	beq.n	8002230 <HAL_RCC_OscConfig+0x12c>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d168      	bne.n	8002230 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e24c      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800216a:	d106      	bne.n	800217a <HAL_RCC_OscConfig+0x76>
 800216c:	4b80      	ldr	r3, [pc, #512]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a7f      	ldr	r2, [pc, #508]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	e02e      	b.n	80021d8 <HAL_RCC_OscConfig+0xd4>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10c      	bne.n	800219c <HAL_RCC_OscConfig+0x98>
 8002182:	4b7b      	ldr	r3, [pc, #492]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a7a      	ldr	r2, [pc, #488]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002188:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	4b78      	ldr	r3, [pc, #480]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a77      	ldr	r2, [pc, #476]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002194:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	e01d      	b.n	80021d8 <HAL_RCC_OscConfig+0xd4>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021a4:	d10c      	bne.n	80021c0 <HAL_RCC_OscConfig+0xbc>
 80021a6:	4b72      	ldr	r3, [pc, #456]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a71      	ldr	r2, [pc, #452]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	4b6f      	ldr	r3, [pc, #444]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a6e      	ldr	r2, [pc, #440]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	e00b      	b.n	80021d8 <HAL_RCC_OscConfig+0xd4>
 80021c0:	4b6b      	ldr	r3, [pc, #428]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a6a      	ldr	r2, [pc, #424]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ca:	6013      	str	r3, [r2, #0]
 80021cc:	4b68      	ldr	r3, [pc, #416]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a67      	ldr	r2, [pc, #412]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d013      	beq.n	8002208 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e0:	f7ff fc14 	bl	8001a0c <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e8:	f7ff fc10 	bl	8001a0c <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b64      	cmp	r3, #100	; 0x64
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e200      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fa:	4b5d      	ldr	r3, [pc, #372]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCC_OscConfig+0xe4>
 8002206:	e014      	b.n	8002232 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7ff fc00 	bl	8001a0c <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002210:	f7ff fbfc 	bl	8001a0c <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b64      	cmp	r3, #100	; 0x64
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e1ec      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002222:	4b53      	ldr	r3, [pc, #332]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x10c>
 800222e:	e000      	b.n	8002232 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d063      	beq.n	8002306 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800223e:	4b4c      	ldr	r3, [pc, #304]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 030c 	and.w	r3, r3, #12
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00b      	beq.n	8002262 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800224a:	4b49      	ldr	r3, [pc, #292]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f003 030c 	and.w	r3, r3, #12
 8002252:	2b08      	cmp	r3, #8
 8002254:	d11c      	bne.n	8002290 <HAL_RCC_OscConfig+0x18c>
 8002256:	4b46      	ldr	r3, [pc, #280]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d116      	bne.n	8002290 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002262:	4b43      	ldr	r3, [pc, #268]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d005      	beq.n	800227a <HAL_RCC_OscConfig+0x176>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d001      	beq.n	800227a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e1c0      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800227a:	4b3d      	ldr	r3, [pc, #244]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	4939      	ldr	r1, [pc, #228]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 800228a:	4313      	orrs	r3, r2
 800228c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228e:	e03a      	b.n	8002306 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d020      	beq.n	80022da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002298:	4b36      	ldr	r3, [pc, #216]	; (8002374 <HAL_RCC_OscConfig+0x270>)
 800229a:	2201      	movs	r2, #1
 800229c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229e:	f7ff fbb5 	bl	8001a0c <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a6:	f7ff fbb1 	bl	8001a0c <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e1a1      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b8:	4b2d      	ldr	r3, [pc, #180]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0f0      	beq.n	80022a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c4:	4b2a      	ldr	r3, [pc, #168]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	4927      	ldr	r1, [pc, #156]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	600b      	str	r3, [r1, #0]
 80022d8:	e015      	b.n	8002306 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022da:	4b26      	ldr	r3, [pc, #152]	; (8002374 <HAL_RCC_OscConfig+0x270>)
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e0:	f7ff fb94 	bl	8001a0c <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e8:	f7ff fb90 	bl	8001a0c <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e180      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022fa:	4b1d      	ldr	r3, [pc, #116]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f0      	bne.n	80022e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	2b00      	cmp	r3, #0
 8002310:	d03a      	beq.n	8002388 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d019      	beq.n	800234e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800231a:	4b17      	ldr	r3, [pc, #92]	; (8002378 <HAL_RCC_OscConfig+0x274>)
 800231c:	2201      	movs	r2, #1
 800231e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002320:	f7ff fb74 	bl	8001a0c <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002328:	f7ff fb70 	bl	8001a0c <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e160      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233a:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002346:	2001      	movs	r0, #1
 8002348:	f000 fad8 	bl	80028fc <RCC_Delay>
 800234c:	e01c      	b.n	8002388 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800234e:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <HAL_RCC_OscConfig+0x274>)
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002354:	f7ff fb5a 	bl	8001a0c <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800235a:	e00f      	b.n	800237c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800235c:	f7ff fb56 	bl	8001a0c <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d908      	bls.n	800237c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e146      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
 800236e:	bf00      	nop
 8002370:	40021000 	.word	0x40021000
 8002374:	42420000 	.word	0x42420000
 8002378:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800237c:	4b92      	ldr	r3, [pc, #584]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1e9      	bne.n	800235c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 80a6 	beq.w	80024e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002396:	2300      	movs	r3, #0
 8002398:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800239a:	4b8b      	ldr	r3, [pc, #556]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10d      	bne.n	80023c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a6:	4b88      	ldr	r3, [pc, #544]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	4a87      	ldr	r2, [pc, #540]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b0:	61d3      	str	r3, [r2, #28]
 80023b2:	4b85      	ldr	r3, [pc, #532]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023be:	2301      	movs	r3, #1
 80023c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c2:	4b82      	ldr	r3, [pc, #520]	; (80025cc <HAL_RCC_OscConfig+0x4c8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d118      	bne.n	8002400 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ce:	4b7f      	ldr	r3, [pc, #508]	; (80025cc <HAL_RCC_OscConfig+0x4c8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a7e      	ldr	r2, [pc, #504]	; (80025cc <HAL_RCC_OscConfig+0x4c8>)
 80023d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023da:	f7ff fb17 	bl	8001a0c <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e2:	f7ff fb13 	bl	8001a0c <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b64      	cmp	r3, #100	; 0x64
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e103      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f4:	4b75      	ldr	r3, [pc, #468]	; (80025cc <HAL_RCC_OscConfig+0x4c8>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f0      	beq.n	80023e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d106      	bne.n	8002416 <HAL_RCC_OscConfig+0x312>
 8002408:	4b6f      	ldr	r3, [pc, #444]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	4a6e      	ldr	r2, [pc, #440]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	6213      	str	r3, [r2, #32]
 8002414:	e02d      	b.n	8002472 <HAL_RCC_OscConfig+0x36e>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10c      	bne.n	8002438 <HAL_RCC_OscConfig+0x334>
 800241e:	4b6a      	ldr	r3, [pc, #424]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	4a69      	ldr	r2, [pc, #420]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002424:	f023 0301 	bic.w	r3, r3, #1
 8002428:	6213      	str	r3, [r2, #32]
 800242a:	4b67      	ldr	r3, [pc, #412]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	4a66      	ldr	r2, [pc, #408]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002430:	f023 0304 	bic.w	r3, r3, #4
 8002434:	6213      	str	r3, [r2, #32]
 8002436:	e01c      	b.n	8002472 <HAL_RCC_OscConfig+0x36e>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	2b05      	cmp	r3, #5
 800243e:	d10c      	bne.n	800245a <HAL_RCC_OscConfig+0x356>
 8002440:	4b61      	ldr	r3, [pc, #388]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	4a60      	ldr	r2, [pc, #384]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002446:	f043 0304 	orr.w	r3, r3, #4
 800244a:	6213      	str	r3, [r2, #32]
 800244c:	4b5e      	ldr	r3, [pc, #376]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	4a5d      	ldr	r2, [pc, #372]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	6213      	str	r3, [r2, #32]
 8002458:	e00b      	b.n	8002472 <HAL_RCC_OscConfig+0x36e>
 800245a:	4b5b      	ldr	r3, [pc, #364]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	4a5a      	ldr	r2, [pc, #360]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002460:	f023 0301 	bic.w	r3, r3, #1
 8002464:	6213      	str	r3, [r2, #32]
 8002466:	4b58      	ldr	r3, [pc, #352]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	4a57      	ldr	r2, [pc, #348]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 800246c:	f023 0304 	bic.w	r3, r3, #4
 8002470:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d015      	beq.n	80024a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247a:	f7ff fac7 	bl	8001a0c <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002480:	e00a      	b.n	8002498 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002482:	f7ff fac3 	bl	8001a0c <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002490:	4293      	cmp	r3, r2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e0b1      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002498:	4b4b      	ldr	r3, [pc, #300]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0ee      	beq.n	8002482 <HAL_RCC_OscConfig+0x37e>
 80024a4:	e014      	b.n	80024d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a6:	f7ff fab1 	bl	8001a0c <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ac:	e00a      	b.n	80024c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ae:	f7ff faad 	bl	8001a0c <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024bc:	4293      	cmp	r3, r2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e09b      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c4:	4b40      	ldr	r3, [pc, #256]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1ee      	bne.n	80024ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024d0:	7dfb      	ldrb	r3, [r7, #23]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d105      	bne.n	80024e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024d6:	4b3c      	ldr	r3, [pc, #240]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	4a3b      	ldr	r2, [pc, #236]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 8087 	beq.w	80025fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024ec:	4b36      	ldr	r3, [pc, #216]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 030c 	and.w	r3, r3, #12
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d061      	beq.n	80025bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d146      	bne.n	800258e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002500:	4b33      	ldr	r3, [pc, #204]	; (80025d0 <HAL_RCC_OscConfig+0x4cc>)
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002506:	f7ff fa81 	bl	8001a0c <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250e:	f7ff fa7d 	bl	8001a0c <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e06d      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002520:	4b29      	ldr	r3, [pc, #164]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1f0      	bne.n	800250e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002534:	d108      	bne.n	8002548 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002536:	4b24      	ldr	r3, [pc, #144]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	4921      	ldr	r1, [pc, #132]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002544:	4313      	orrs	r3, r2
 8002546:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002548:	4b1f      	ldr	r3, [pc, #124]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a19      	ldr	r1, [r3, #32]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	430b      	orrs	r3, r1
 800255a:	491b      	ldr	r1, [pc, #108]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 800255c:	4313      	orrs	r3, r2
 800255e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002560:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <HAL_RCC_OscConfig+0x4cc>)
 8002562:	2201      	movs	r2, #1
 8002564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002566:	f7ff fa51 	bl	8001a0c <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256e:	f7ff fa4d 	bl	8001a0c <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e03d      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002580:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f0      	beq.n	800256e <HAL_RCC_OscConfig+0x46a>
 800258c:	e035      	b.n	80025fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258e:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <HAL_RCC_OscConfig+0x4cc>)
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7ff fa3a 	bl	8001a0c <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800259c:	f7ff fa36 	bl	8001a0c <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e026      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ae:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0x498>
 80025ba:	e01e      	b.n	80025fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69db      	ldr	r3, [r3, #28]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d107      	bne.n	80025d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e019      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40007000 	.word	0x40007000
 80025d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_RCC_OscConfig+0x500>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d106      	bne.n	80025f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d001      	beq.n	80025fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40021000 	.word	0x40021000

08002608 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e0d0      	b.n	80027be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800261c:	4b6a      	ldr	r3, [pc, #424]	; (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d910      	bls.n	800264c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262a:	4b67      	ldr	r3, [pc, #412]	; (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f023 0207 	bic.w	r2, r3, #7
 8002632:	4965      	ldr	r1, [pc, #404]	; (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800263a:	4b63      	ldr	r3, [pc, #396]	; (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d001      	beq.n	800264c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e0b8      	b.n	80027be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d020      	beq.n	800269a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002664:	4b59      	ldr	r3, [pc, #356]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	4a58      	ldr	r2, [pc, #352]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 800266a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800266e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0308 	and.w	r3, r3, #8
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800267c:	4b53      	ldr	r3, [pc, #332]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	4a52      	ldr	r2, [pc, #328]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002682:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002686:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002688:	4b50      	ldr	r3, [pc, #320]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	494d      	ldr	r1, [pc, #308]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	4313      	orrs	r3, r2
 8002698:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d040      	beq.n	8002728 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ae:	4b47      	ldr	r3, [pc, #284]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d115      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e07f      	b.n	80027be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d107      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c6:	4b41      	ldr	r3, [pc, #260]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d109      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e073      	b.n	80027be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d6:	4b3d      	ldr	r3, [pc, #244]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e06b      	b.n	80027be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026e6:	4b39      	ldr	r3, [pc, #228]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f023 0203 	bic.w	r2, r3, #3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	4936      	ldr	r1, [pc, #216]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026f8:	f7ff f988 	bl	8001a0c <HAL_GetTick>
 80026fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fe:	e00a      	b.n	8002716 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002700:	f7ff f984 	bl	8001a0c <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	f241 3288 	movw	r2, #5000	; 0x1388
 800270e:	4293      	cmp	r3, r2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e053      	b.n	80027be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002716:	4b2d      	ldr	r3, [pc, #180]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f003 020c 	and.w	r2, r3, #12
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	429a      	cmp	r2, r3
 8002726:	d1eb      	bne.n	8002700 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002728:	4b27      	ldr	r3, [pc, #156]	; (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d210      	bcs.n	8002758 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002736:	4b24      	ldr	r3, [pc, #144]	; (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f023 0207 	bic.w	r2, r3, #7
 800273e:	4922      	ldr	r1, [pc, #136]	; (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	4313      	orrs	r3, r2
 8002744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002746:	4b20      	ldr	r3, [pc, #128]	; (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d001      	beq.n	8002758 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e032      	b.n	80027be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002764:	4b19      	ldr	r3, [pc, #100]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	4916      	ldr	r1, [pc, #88]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002772:	4313      	orrs	r3, r2
 8002774:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d009      	beq.n	8002796 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002782:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	490e      	ldr	r1, [pc, #56]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	4313      	orrs	r3, r2
 8002794:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002796:	f000 f821 	bl	80027dc <HAL_RCC_GetSysClockFreq>
 800279a:	4602      	mov	r2, r0
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	091b      	lsrs	r3, r3, #4
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	490a      	ldr	r1, [pc, #40]	; (80027d0 <HAL_RCC_ClockConfig+0x1c8>)
 80027a8:	5ccb      	ldrb	r3, [r1, r3]
 80027aa:	fa22 f303 	lsr.w	r3, r2, r3
 80027ae:	4a09      	ldr	r2, [pc, #36]	; (80027d4 <HAL_RCC_ClockConfig+0x1cc>)
 80027b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027b2:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <HAL_RCC_ClockConfig+0x1d0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff f8e6 	bl	8001988 <HAL_InitTick>

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40022000 	.word	0x40022000
 80027cc:	40021000 	.word	0x40021000
 80027d0:	08004b34 	.word	0x08004b34
 80027d4:	20000038 	.word	0x20000038
 80027d8:	2000003c 	.word	0x2000003c

080027dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027dc:	b490      	push	{r4, r7}
 80027de:	b08a      	sub	sp, #40	; 0x28
 80027e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027e2:	4b29      	ldr	r3, [pc, #164]	; (8002888 <HAL_RCC_GetSysClockFreq+0xac>)
 80027e4:	1d3c      	adds	r4, r7, #4
 80027e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027ec:	f240 2301 	movw	r3, #513	; 0x201
 80027f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	61fb      	str	r3, [r7, #28]
 80027f6:	2300      	movs	r3, #0
 80027f8:	61bb      	str	r3, [r7, #24]
 80027fa:	2300      	movs	r3, #0
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002802:	2300      	movs	r3, #0
 8002804:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002806:	4b21      	ldr	r3, [pc, #132]	; (800288c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b04      	cmp	r3, #4
 8002814:	d002      	beq.n	800281c <HAL_RCC_GetSysClockFreq+0x40>
 8002816:	2b08      	cmp	r3, #8
 8002818:	d003      	beq.n	8002822 <HAL_RCC_GetSysClockFreq+0x46>
 800281a:	e02b      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800281c:	4b1c      	ldr	r3, [pc, #112]	; (8002890 <HAL_RCC_GetSysClockFreq+0xb4>)
 800281e:	623b      	str	r3, [r7, #32]
      break;
 8002820:	e02b      	b.n	800287a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	0c9b      	lsrs	r3, r3, #18
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	3328      	adds	r3, #40	; 0x28
 800282c:	443b      	add	r3, r7
 800282e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002832:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d012      	beq.n	8002864 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800283e:	4b13      	ldr	r3, [pc, #76]	; (800288c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	0c5b      	lsrs	r3, r3, #17
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	3328      	adds	r3, #40	; 0x28
 800284a:	443b      	add	r3, r7
 800284c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002850:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	4a0e      	ldr	r2, [pc, #56]	; (8002890 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002856:	fb03 f202 	mul.w	r2, r3, r2
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
 8002862:	e004      	b.n	800286e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	4a0b      	ldr	r2, [pc, #44]	; (8002894 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002868:	fb02 f303 	mul.w	r3, r2, r3
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	623b      	str	r3, [r7, #32]
      break;
 8002872:	e002      	b.n	800287a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002874:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002876:	623b      	str	r3, [r7, #32]
      break;
 8002878:	bf00      	nop
    }
  }
  return sysclockfreq;
 800287a:	6a3b      	ldr	r3, [r7, #32]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3728      	adds	r7, #40	; 0x28
 8002880:	46bd      	mov	sp, r7
 8002882:	bc90      	pop	{r4, r7}
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	08004b24 	.word	0x08004b24
 800288c:	40021000 	.word	0x40021000
 8002890:	007a1200 	.word	0x007a1200
 8002894:	003d0900 	.word	0x003d0900

08002898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800289c:	4b02      	ldr	r3, [pc, #8]	; (80028a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800289e:	681b      	ldr	r3, [r3, #0]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr
 80028a8:	20000038 	.word	0x20000038

080028ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028b0:	f7ff fff2 	bl	8002898 <HAL_RCC_GetHCLKFreq>
 80028b4:	4602      	mov	r2, r0
 80028b6:	4b05      	ldr	r3, [pc, #20]	; (80028cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	0a1b      	lsrs	r3, r3, #8
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	4903      	ldr	r1, [pc, #12]	; (80028d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028c2:	5ccb      	ldrb	r3, [r1, r3]
 80028c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40021000 	.word	0x40021000
 80028d0:	08004b44 	.word	0x08004b44

080028d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028d8:	f7ff ffde 	bl	8002898 <HAL_RCC_GetHCLKFreq>
 80028dc:	4602      	mov	r2, r0
 80028de:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	0adb      	lsrs	r3, r3, #11
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	4903      	ldr	r1, [pc, #12]	; (80028f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ea:	5ccb      	ldrb	r3, [r1, r3]
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40021000 	.word	0x40021000
 80028f8:	08004b44 	.word	0x08004b44

080028fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002904:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <RCC_Delay+0x34>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a0a      	ldr	r2, [pc, #40]	; (8002934 <RCC_Delay+0x38>)
 800290a:	fba2 2303 	umull	r2, r3, r2, r3
 800290e:	0a5b      	lsrs	r3, r3, #9
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	fb02 f303 	mul.w	r3, r2, r3
 8002916:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002918:	bf00      	nop
  }
  while (Delay --);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1e5a      	subs	r2, r3, #1
 800291e:	60fa      	str	r2, [r7, #12]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1f9      	bne.n	8002918 <RCC_Delay+0x1c>
}
 8002924:	bf00      	nop
 8002926:	bf00      	nop
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr
 8002930:	20000038 	.word	0x20000038
 8002934:	10624dd3 	.word	0x10624dd3

08002938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e041      	b.n	80029ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d106      	bne.n	8002964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7fe fe90 	bl	8001684 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2202      	movs	r2, #2
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3304      	adds	r3, #4
 8002974:	4619      	mov	r1, r3
 8002976:	4610      	mov	r0, r2
 8002978:	f000 fc28 	bl	80031cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d001      	beq.n	80029f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e03a      	b.n	8002a66 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a18      	ldr	r2, [pc, #96]	; (8002a70 <HAL_TIM_Base_Start_IT+0x98>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d00e      	beq.n	8002a30 <HAL_TIM_Base_Start_IT+0x58>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1a:	d009      	beq.n	8002a30 <HAL_TIM_Base_Start_IT+0x58>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a14      	ldr	r2, [pc, #80]	; (8002a74 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d004      	beq.n	8002a30 <HAL_TIM_Base_Start_IT+0x58>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a13      	ldr	r2, [pc, #76]	; (8002a78 <HAL_TIM_Base_Start_IT+0xa0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d111      	bne.n	8002a54 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2b06      	cmp	r3, #6
 8002a40:	d010      	beq.n	8002a64 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f042 0201 	orr.w	r2, r2, #1
 8002a50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a52:	e007      	b.n	8002a64 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0201 	orr.w	r2, r2, #1
 8002a62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr
 8002a70:	40012c00 	.word	0x40012c00
 8002a74:	40000400 	.word	0x40000400
 8002a78:	40000800 	.word	0x40000800

08002a7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e041      	b.n	8002b12 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d106      	bne.n	8002aa8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f839 	bl	8002b1a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4610      	mov	r0, r2
 8002abc:	f000 fb86 	bl	80031cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr

08002b2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d109      	bne.n	8002b50 <HAL_TIM_PWM_Start+0x24>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	bf14      	ite	ne
 8002b48:	2301      	movne	r3, #1
 8002b4a:	2300      	moveq	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	e022      	b.n	8002b96 <HAL_TIM_PWM_Start+0x6a>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d109      	bne.n	8002b6a <HAL_TIM_PWM_Start+0x3e>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	bf14      	ite	ne
 8002b62:	2301      	movne	r3, #1
 8002b64:	2300      	moveq	r3, #0
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	e015      	b.n	8002b96 <HAL_TIM_PWM_Start+0x6a>
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d109      	bne.n	8002b84 <HAL_TIM_PWM_Start+0x58>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	bf14      	ite	ne
 8002b7c:	2301      	movne	r3, #1
 8002b7e:	2300      	moveq	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	e008      	b.n	8002b96 <HAL_TIM_PWM_Start+0x6a>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	bf14      	ite	ne
 8002b90:	2301      	movne	r3, #1
 8002b92:	2300      	moveq	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e05e      	b.n	8002c5c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d104      	bne.n	8002bae <HAL_TIM_PWM_Start+0x82>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bac:	e013      	b.n	8002bd6 <HAL_TIM_PWM_Start+0xaa>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d104      	bne.n	8002bbe <HAL_TIM_PWM_Start+0x92>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bbc:	e00b      	b.n	8002bd6 <HAL_TIM_PWM_Start+0xaa>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d104      	bne.n	8002bce <HAL_TIM_PWM_Start+0xa2>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bcc:	e003      	b.n	8002bd6 <HAL_TIM_PWM_Start+0xaa>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	6839      	ldr	r1, [r7, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 fd74 	bl	80036cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a1e      	ldr	r2, [pc, #120]	; (8002c64 <HAL_TIM_PWM_Start+0x138>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d107      	bne.n	8002bfe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bfc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a18      	ldr	r2, [pc, #96]	; (8002c64 <HAL_TIM_PWM_Start+0x138>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d00e      	beq.n	8002c26 <HAL_TIM_PWM_Start+0xfa>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c10:	d009      	beq.n	8002c26 <HAL_TIM_PWM_Start+0xfa>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a14      	ldr	r2, [pc, #80]	; (8002c68 <HAL_TIM_PWM_Start+0x13c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d004      	beq.n	8002c26 <HAL_TIM_PWM_Start+0xfa>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a12      	ldr	r2, [pc, #72]	; (8002c6c <HAL_TIM_PWM_Start+0x140>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d111      	bne.n	8002c4a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b06      	cmp	r3, #6
 8002c36:	d010      	beq.n	8002c5a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c48:	e007      	b.n	8002c5a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f042 0201 	orr.w	r2, r2, #1
 8002c58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40012c00 	.word	0x40012c00
 8002c68:	40000400 	.word	0x40000400
 8002c6c:	40000800 	.word	0x40000800

08002c70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d122      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d11b      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f06f 0202 	mvn.w	r2, #2
 8002c9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fa6f 	bl	8003196 <HAL_TIM_IC_CaptureCallback>
 8002cb8:	e005      	b.n	8002cc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 fa62 	bl	8003184 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 fa71 	bl	80031a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d122      	bne.n	8002d20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d11b      	bne.n	8002d20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0204 	mvn.w	r2, #4
 8002cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 fa45 	bl	8003196 <HAL_TIM_IC_CaptureCallback>
 8002d0c:	e005      	b.n	8002d1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 fa38 	bl	8003184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 fa47 	bl	80031a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d122      	bne.n	8002d74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f003 0308 	and.w	r3, r3, #8
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d11b      	bne.n	8002d74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f06f 0208 	mvn.w	r2, #8
 8002d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2204      	movs	r2, #4
 8002d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 fa1b 	bl	8003196 <HAL_TIM_IC_CaptureCallback>
 8002d60:	e005      	b.n	8002d6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 fa0e 	bl	8003184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 fa1d 	bl	80031a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	f003 0310 	and.w	r3, r3, #16
 8002d7e:	2b10      	cmp	r3, #16
 8002d80:	d122      	bne.n	8002dc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f003 0310 	and.w	r3, r3, #16
 8002d8c:	2b10      	cmp	r3, #16
 8002d8e:	d11b      	bne.n	8002dc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0210 	mvn.w	r2, #16
 8002d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2208      	movs	r2, #8
 8002d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f9f1 	bl	8003196 <HAL_TIM_IC_CaptureCallback>
 8002db4:	e005      	b.n	8002dc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f9e4 	bl	8003184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f9f3 	bl	80031a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d10e      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d107      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f06f 0201 	mvn.w	r2, #1
 8002dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7fe fbfe 	bl	80015f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfe:	2b80      	cmp	r3, #128	; 0x80
 8002e00:	d10e      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0c:	2b80      	cmp	r3, #128	; 0x80
 8002e0e:	d107      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 fce1 	bl	80037e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2a:	2b40      	cmp	r3, #64	; 0x40
 8002e2c:	d10e      	bne.n	8002e4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e38:	2b40      	cmp	r3, #64	; 0x40
 8002e3a:	d107      	bne.n	8002e4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f9b7 	bl	80031ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	f003 0320 	and.w	r3, r3, #32
 8002e56:	2b20      	cmp	r3, #32
 8002e58:	d10e      	bne.n	8002e78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f003 0320 	and.w	r3, r3, #32
 8002e64:	2b20      	cmp	r3, #32
 8002e66:	d107      	bne.n	8002e78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f06f 0220 	mvn.w	r2, #32
 8002e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 fcac 	bl	80037d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e78:	bf00      	nop
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d101      	bne.n	8002e9a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002e96:	2302      	movs	r3, #2
 8002e98:	e0ac      	b.n	8002ff4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b0c      	cmp	r3, #12
 8002ea6:	f200 809f 	bhi.w	8002fe8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002eaa:	a201      	add	r2, pc, #4	; (adr r2, 8002eb0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb0:	08002ee5 	.word	0x08002ee5
 8002eb4:	08002fe9 	.word	0x08002fe9
 8002eb8:	08002fe9 	.word	0x08002fe9
 8002ebc:	08002fe9 	.word	0x08002fe9
 8002ec0:	08002f25 	.word	0x08002f25
 8002ec4:	08002fe9 	.word	0x08002fe9
 8002ec8:	08002fe9 	.word	0x08002fe9
 8002ecc:	08002fe9 	.word	0x08002fe9
 8002ed0:	08002f67 	.word	0x08002f67
 8002ed4:	08002fe9 	.word	0x08002fe9
 8002ed8:	08002fe9 	.word	0x08002fe9
 8002edc:	08002fe9 	.word	0x08002fe9
 8002ee0:	08002fa7 	.word	0x08002fa7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68b9      	ldr	r1, [r7, #8]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 f9d0 	bl	8003290 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	699a      	ldr	r2, [r3, #24]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0208 	orr.w	r2, r2, #8
 8002efe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699a      	ldr	r2, [r3, #24]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0204 	bic.w	r2, r2, #4
 8002f0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6999      	ldr	r1, [r3, #24]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	691a      	ldr	r2, [r3, #16]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	619a      	str	r2, [r3, #24]
      break;
 8002f22:	e062      	b.n	8002fea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68b9      	ldr	r1, [r7, #8]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 fa16 	bl	800335c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	699a      	ldr	r2, [r3, #24]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	699a      	ldr	r2, [r3, #24]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6999      	ldr	r1, [r3, #24]
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	021a      	lsls	r2, r3, #8
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	619a      	str	r2, [r3, #24]
      break;
 8002f64:	e041      	b.n	8002fea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68b9      	ldr	r1, [r7, #8]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f000 fa5f 	bl	8003430 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	69da      	ldr	r2, [r3, #28]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f042 0208 	orr.w	r2, r2, #8
 8002f80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	69da      	ldr	r2, [r3, #28]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0204 	bic.w	r2, r2, #4
 8002f90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	69d9      	ldr	r1, [r3, #28]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	691a      	ldr	r2, [r3, #16]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	61da      	str	r2, [r3, #28]
      break;
 8002fa4:	e021      	b.n	8002fea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68b9      	ldr	r1, [r7, #8]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 faa9 	bl	8003504 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	69da      	ldr	r2, [r3, #28]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	69da      	ldr	r2, [r3, #28]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	69d9      	ldr	r1, [r3, #28]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	021a      	lsls	r2, r3, #8
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	61da      	str	r2, [r3, #28]
      break;
 8002fe6:	e000      	b.n	8002fea <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002fe8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_TIM_ConfigClockSource+0x18>
 8003010:	2302      	movs	r3, #2
 8003012:	e0b3      	b.n	800317c <HAL_TIM_ConfigClockSource+0x180>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003032:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800303a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800304c:	d03e      	beq.n	80030cc <HAL_TIM_ConfigClockSource+0xd0>
 800304e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003052:	f200 8087 	bhi.w	8003164 <HAL_TIM_ConfigClockSource+0x168>
 8003056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800305a:	f000 8085 	beq.w	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 800305e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003062:	d87f      	bhi.n	8003164 <HAL_TIM_ConfigClockSource+0x168>
 8003064:	2b70      	cmp	r3, #112	; 0x70
 8003066:	d01a      	beq.n	800309e <HAL_TIM_ConfigClockSource+0xa2>
 8003068:	2b70      	cmp	r3, #112	; 0x70
 800306a:	d87b      	bhi.n	8003164 <HAL_TIM_ConfigClockSource+0x168>
 800306c:	2b60      	cmp	r3, #96	; 0x60
 800306e:	d050      	beq.n	8003112 <HAL_TIM_ConfigClockSource+0x116>
 8003070:	2b60      	cmp	r3, #96	; 0x60
 8003072:	d877      	bhi.n	8003164 <HAL_TIM_ConfigClockSource+0x168>
 8003074:	2b50      	cmp	r3, #80	; 0x50
 8003076:	d03c      	beq.n	80030f2 <HAL_TIM_ConfigClockSource+0xf6>
 8003078:	2b50      	cmp	r3, #80	; 0x50
 800307a:	d873      	bhi.n	8003164 <HAL_TIM_ConfigClockSource+0x168>
 800307c:	2b40      	cmp	r3, #64	; 0x40
 800307e:	d058      	beq.n	8003132 <HAL_TIM_ConfigClockSource+0x136>
 8003080:	2b40      	cmp	r3, #64	; 0x40
 8003082:	d86f      	bhi.n	8003164 <HAL_TIM_ConfigClockSource+0x168>
 8003084:	2b30      	cmp	r3, #48	; 0x30
 8003086:	d064      	beq.n	8003152 <HAL_TIM_ConfigClockSource+0x156>
 8003088:	2b30      	cmp	r3, #48	; 0x30
 800308a:	d86b      	bhi.n	8003164 <HAL_TIM_ConfigClockSource+0x168>
 800308c:	2b20      	cmp	r3, #32
 800308e:	d060      	beq.n	8003152 <HAL_TIM_ConfigClockSource+0x156>
 8003090:	2b20      	cmp	r3, #32
 8003092:	d867      	bhi.n	8003164 <HAL_TIM_ConfigClockSource+0x168>
 8003094:	2b00      	cmp	r3, #0
 8003096:	d05c      	beq.n	8003152 <HAL_TIM_ConfigClockSource+0x156>
 8003098:	2b10      	cmp	r3, #16
 800309a:	d05a      	beq.n	8003152 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800309c:	e062      	b.n	8003164 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6818      	ldr	r0, [r3, #0]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	6899      	ldr	r1, [r3, #8]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f000 faee 	bl	800368e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	609a      	str	r2, [r3, #8]
      break;
 80030ca:	e04e      	b.n	800316a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6818      	ldr	r0, [r3, #0]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	6899      	ldr	r1, [r3, #8]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f000 fad7 	bl	800368e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030ee:	609a      	str	r2, [r3, #8]
      break;
 80030f0:	e03b      	b.n	800316a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	6859      	ldr	r1, [r3, #4]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	461a      	mov	r2, r3
 8003100:	f000 fa4e 	bl	80035a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2150      	movs	r1, #80	; 0x50
 800310a:	4618      	mov	r0, r3
 800310c:	f000 faa5 	bl	800365a <TIM_ITRx_SetConfig>
      break;
 8003110:	e02b      	b.n	800316a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6818      	ldr	r0, [r3, #0]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	6859      	ldr	r1, [r3, #4]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	461a      	mov	r2, r3
 8003120:	f000 fa6c 	bl	80035fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2160      	movs	r1, #96	; 0x60
 800312a:	4618      	mov	r0, r3
 800312c:	f000 fa95 	bl	800365a <TIM_ITRx_SetConfig>
      break;
 8003130:	e01b      	b.n	800316a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6818      	ldr	r0, [r3, #0]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	6859      	ldr	r1, [r3, #4]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	461a      	mov	r2, r3
 8003140:	f000 fa2e 	bl	80035a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2140      	movs	r1, #64	; 0x40
 800314a:	4618      	mov	r0, r3
 800314c:	f000 fa85 	bl	800365a <TIM_ITRx_SetConfig>
      break;
 8003150:	e00b      	b.n	800316a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4619      	mov	r1, r3
 800315c:	4610      	mov	r0, r2
 800315e:	f000 fa7c 	bl	800365a <TIM_ITRx_SetConfig>
        break;
 8003162:	e002      	b.n	800316a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003164:	bf00      	nop
 8003166:	e000      	b.n	800316a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003168:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	bc80      	pop	{r7}
 8003194:	4770      	bx	lr

08003196 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr

080031a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bc80      	pop	{r7}
 80031b8:	4770      	bx	lr

080031ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr

080031cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a29      	ldr	r2, [pc, #164]	; (8003284 <TIM_Base_SetConfig+0xb8>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d00b      	beq.n	80031fc <TIM_Base_SetConfig+0x30>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ea:	d007      	beq.n	80031fc <TIM_Base_SetConfig+0x30>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a26      	ldr	r2, [pc, #152]	; (8003288 <TIM_Base_SetConfig+0xbc>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d003      	beq.n	80031fc <TIM_Base_SetConfig+0x30>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a25      	ldr	r2, [pc, #148]	; (800328c <TIM_Base_SetConfig+0xc0>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d108      	bne.n	800320e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003202:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	4313      	orrs	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a1c      	ldr	r2, [pc, #112]	; (8003284 <TIM_Base_SetConfig+0xb8>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d00b      	beq.n	800322e <TIM_Base_SetConfig+0x62>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800321c:	d007      	beq.n	800322e <TIM_Base_SetConfig+0x62>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a19      	ldr	r2, [pc, #100]	; (8003288 <TIM_Base_SetConfig+0xbc>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d003      	beq.n	800322e <TIM_Base_SetConfig+0x62>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a18      	ldr	r2, [pc, #96]	; (800328c <TIM_Base_SetConfig+0xc0>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d108      	bne.n	8003240 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003234:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	4313      	orrs	r3, r2
 800323e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	4313      	orrs	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a07      	ldr	r2, [pc, #28]	; (8003284 <TIM_Base_SetConfig+0xb8>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d103      	bne.n	8003274 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	615a      	str	r2, [r3, #20]
}
 800327a:	bf00      	nop
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr
 8003284:	40012c00 	.word	0x40012c00
 8003288:	40000400 	.word	0x40000400
 800328c:	40000800 	.word	0x40000800

08003290 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003290:	b480      	push	{r7}
 8003292:	b087      	sub	sp, #28
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	f023 0201 	bic.w	r2, r3, #1
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f023 0303 	bic.w	r3, r3, #3
 80032c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f023 0302 	bic.w	r3, r3, #2
 80032d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a1c      	ldr	r2, [pc, #112]	; (8003358 <TIM_OC1_SetConfig+0xc8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d10c      	bne.n	8003306 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	f023 0308 	bic.w	r3, r3, #8
 80032f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f023 0304 	bic.w	r3, r3, #4
 8003304:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a13      	ldr	r2, [pc, #76]	; (8003358 <TIM_OC1_SetConfig+0xc8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d111      	bne.n	8003332 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800331c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	4313      	orrs	r3, r2
 8003326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4313      	orrs	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	621a      	str	r2, [r3, #32]
}
 800334c:	bf00      	nop
 800334e:	371c      	adds	r7, #28
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40012c00 	.word	0x40012c00

0800335c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800335c:	b480      	push	{r7}
 800335e:	b087      	sub	sp, #28
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	f023 0210 	bic.w	r2, r3, #16
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800338a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	021b      	lsls	r3, r3, #8
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	4313      	orrs	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f023 0320 	bic.w	r3, r3, #32
 80033a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a1d      	ldr	r2, [pc, #116]	; (800342c <TIM_OC2_SetConfig+0xd0>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d10d      	bne.n	80033d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a14      	ldr	r2, [pc, #80]	; (800342c <TIM_OC2_SetConfig+0xd0>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d113      	bne.n	8003408 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	621a      	str	r2, [r3, #32]
}
 8003422:	bf00      	nop
 8003424:	371c      	adds	r7, #28
 8003426:	46bd      	mov	sp, r7
 8003428:	bc80      	pop	{r7}
 800342a:	4770      	bx	lr
 800342c:	40012c00 	.word	0x40012c00

08003430 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800345e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0303 	bic.w	r3, r3, #3
 8003466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	4313      	orrs	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	021b      	lsls	r3, r3, #8
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	4313      	orrs	r3, r2
 8003484:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a1d      	ldr	r2, [pc, #116]	; (8003500 <TIM_OC3_SetConfig+0xd0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d10d      	bne.n	80034aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003494:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	021b      	lsls	r3, r3, #8
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	4313      	orrs	r3, r2
 80034a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a14      	ldr	r2, [pc, #80]	; (8003500 <TIM_OC3_SetConfig+0xd0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d113      	bne.n	80034da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	621a      	str	r2, [r3, #32]
}
 80034f4:	bf00      	nop
 80034f6:	371c      	adds	r7, #28
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bc80      	pop	{r7}
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	40012c00 	.word	0x40012c00

08003504 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003504:	b480      	push	{r7}
 8003506:	b087      	sub	sp, #28
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800353a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	021b      	lsls	r3, r3, #8
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	4313      	orrs	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800354e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	031b      	lsls	r3, r3, #12
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4313      	orrs	r3, r2
 800355a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a0f      	ldr	r2, [pc, #60]	; (800359c <TIM_OC4_SetConfig+0x98>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d109      	bne.n	8003578 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800356a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	019b      	lsls	r3, r3, #6
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	4313      	orrs	r3, r2
 8003576:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	621a      	str	r2, [r3, #32]
}
 8003592:	bf00      	nop
 8003594:	371c      	adds	r7, #28
 8003596:	46bd      	mov	sp, r7
 8003598:	bc80      	pop	{r7}
 800359a:	4770      	bx	lr
 800359c:	40012c00 	.word	0x40012c00

080035a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b087      	sub	sp, #28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	f023 0201 	bic.w	r2, r3, #1
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	011b      	lsls	r3, r3, #4
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f023 030a 	bic.w	r3, r3, #10
 80035dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	621a      	str	r2, [r3, #32]
}
 80035f2:	bf00      	nop
 80035f4:	371c      	adds	r7, #28
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr

080035fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b087      	sub	sp, #28
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	f023 0210 	bic.w	r2, r3, #16
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003626:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	031b      	lsls	r3, r3, #12
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	4313      	orrs	r3, r2
 8003630:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003638:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	011b      	lsls	r3, r3, #4
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	4313      	orrs	r3, r2
 8003642:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	621a      	str	r2, [r3, #32]
}
 8003650:	bf00      	nop
 8003652:	371c      	adds	r7, #28
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr

0800365a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800365a:	b480      	push	{r7}
 800365c:	b085      	sub	sp, #20
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
 8003662:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003670:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4313      	orrs	r3, r2
 8003678:	f043 0307 	orr.w	r3, r3, #7
 800367c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	609a      	str	r2, [r3, #8]
}
 8003684:	bf00      	nop
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	bc80      	pop	{r7}
 800368c:	4770      	bx	lr

0800368e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800368e:	b480      	push	{r7}
 8003690:	b087      	sub	sp, #28
 8003692:	af00      	add	r7, sp, #0
 8003694:	60f8      	str	r0, [r7, #12]
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	607a      	str	r2, [r7, #4]
 800369a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	021a      	lsls	r2, r3, #8
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	431a      	orrs	r2, r3
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	609a      	str	r2, [r3, #8]
}
 80036c2:	bf00      	nop
 80036c4:	371c      	adds	r7, #28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr

080036cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f003 031f 	and.w	r3, r3, #31
 80036de:	2201      	movs	r2, #1
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a1a      	ldr	r2, [r3, #32]
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	43db      	mvns	r3, r3
 80036ee:	401a      	ands	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a1a      	ldr	r2, [r3, #32]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f003 031f 	and.w	r3, r3, #31
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	fa01 f303 	lsl.w	r3, r1, r3
 8003704:	431a      	orrs	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	621a      	str	r2, [r3, #32]
}
 800370a:	bf00      	nop
 800370c:	371c      	adds	r7, #28
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr

08003714 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003724:	2b01      	cmp	r3, #1
 8003726:	d101      	bne.n	800372c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003728:	2302      	movs	r3, #2
 800372a:	e046      	b.n	80037ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2202      	movs	r2, #2
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003752:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a16      	ldr	r2, [pc, #88]	; (80037c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d00e      	beq.n	800378e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003778:	d009      	beq.n	800378e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a12      	ldr	r2, [pc, #72]	; (80037c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d004      	beq.n	800378e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a10      	ldr	r2, [pc, #64]	; (80037cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d10c      	bne.n	80037a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003794:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	4313      	orrs	r3, r2
 800379e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	bc80      	pop	{r7}
 80037c2:	4770      	bx	lr
 80037c4:	40012c00 	.word	0x40012c00
 80037c8:	40000400 	.word	0x40000400
 80037cc:	40000800 	.word	0x40000800

080037d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr

080037e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bc80      	pop	{r7}
 80037f2:	4770      	bx	lr

080037f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e03f      	b.n	8003886 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d106      	bne.n	8003820 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7fd ffa4 	bl	8001768 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2224      	movs	r2, #36	; 0x24
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003836:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 fc25 	bl	8004088 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	691a      	ldr	r2, [r3, #16]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800384c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695a      	ldr	r2, [r3, #20]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800385c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800386c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2220      	movs	r2, #32
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b08a      	sub	sp, #40	; 0x28
 8003892:	af02      	add	r7, sp, #8
 8003894:	60f8      	str	r0, [r7, #12]
 8003896:	60b9      	str	r1, [r7, #8]
 8003898:	603b      	str	r3, [r7, #0]
 800389a:	4613      	mov	r3, r2
 800389c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800389e:	2300      	movs	r3, #0
 80038a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b20      	cmp	r3, #32
 80038ac:	d17c      	bne.n	80039a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <HAL_UART_Transmit+0x2c>
 80038b4:	88fb      	ldrh	r3, [r7, #6]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e075      	b.n	80039aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d101      	bne.n	80038cc <HAL_UART_Transmit+0x3e>
 80038c8:	2302      	movs	r3, #2
 80038ca:	e06e      	b.n	80039aa <HAL_UART_Transmit+0x11c>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2221      	movs	r2, #33	; 0x21
 80038de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038e2:	f7fe f893 	bl	8001a0c <HAL_GetTick>
 80038e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	88fa      	ldrh	r2, [r7, #6]
 80038ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	88fa      	ldrh	r2, [r7, #6]
 80038f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038fc:	d108      	bne.n	8003910 <HAL_UART_Transmit+0x82>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d104      	bne.n	8003910 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003906:	2300      	movs	r3, #0
 8003908:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	61bb      	str	r3, [r7, #24]
 800390e:	e003      	b.n	8003918 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003914:	2300      	movs	r3, #0
 8003916:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003920:	e02a      	b.n	8003978 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2200      	movs	r2, #0
 800392a:	2180      	movs	r1, #128	; 0x80
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 fa11 	bl	8003d54 <UART_WaitOnFlagUntilTimeout>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e036      	b.n	80039aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10b      	bne.n	800395a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003950:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	3302      	adds	r3, #2
 8003956:	61bb      	str	r3, [r7, #24]
 8003958:	e007      	b.n	800396a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	781a      	ldrb	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	3301      	adds	r3, #1
 8003968:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800396e:	b29b      	uxth	r3, r3
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800397c:	b29b      	uxth	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1cf      	bne.n	8003922 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2200      	movs	r2, #0
 800398a:	2140      	movs	r1, #64	; 0x40
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 f9e1 	bl	8003d54 <UART_WaitOnFlagUntilTimeout>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e006      	b.n	80039aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2220      	movs	r2, #32
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	e000      	b.n	80039aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80039a8:	2302      	movs	r3, #2
  }
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3720      	adds	r7, #32
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b08a      	sub	sp, #40	; 0x28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80039d8:	2300      	movs	r3, #0
 80039da:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10d      	bne.n	8003a06 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	f003 0320 	and.w	r3, r3, #32
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d008      	beq.n	8003a06 <HAL_UART_IRQHandler+0x52>
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	f003 0320 	and.w	r3, r3, #32
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fa99 	bl	8003f36 <UART_Receive_IT>
      return;
 8003a04:	e17b      	b.n	8003cfe <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 80b1 	beq.w	8003b70 <HAL_UART_IRQHandler+0x1bc>
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d105      	bne.n	8003a24 <HAL_UART_IRQHandler+0x70>
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 80a6 	beq.w	8003b70 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00a      	beq.n	8003a44 <HAL_UART_IRQHandler+0x90>
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3c:	f043 0201 	orr.w	r2, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	f003 0304 	and.w	r3, r3, #4
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00a      	beq.n	8003a64 <HAL_UART_IRQHandler+0xb0>
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	f043 0202 	orr.w	r2, r3, #2
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <HAL_UART_IRQHandler+0xd0>
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d005      	beq.n	8003a84 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7c:	f043 0204 	orr.w	r2, r3, #4
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00f      	beq.n	8003aae <HAL_UART_IRQHandler+0xfa>
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	f003 0320 	and.w	r3, r3, #32
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d104      	bne.n	8003aa2 <HAL_UART_IRQHandler+0xee>
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d005      	beq.n	8003aae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	f043 0208 	orr.w	r2, r3, #8
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 811e 	beq.w	8003cf4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d007      	beq.n	8003ad2 <HAL_UART_IRQHandler+0x11e>
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	f003 0320 	and.w	r3, r3, #32
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d002      	beq.n	8003ad2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 fa32 	bl	8003f36 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	bf14      	ite	ne
 8003ae0:	2301      	movne	r3, #1
 8003ae2:	2300      	moveq	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	f003 0308 	and.w	r3, r3, #8
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d102      	bne.n	8003afa <HAL_UART_IRQHandler+0x146>
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d031      	beq.n	8003b5e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f974 	bl	8003de8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d023      	beq.n	8003b56 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695a      	ldr	r2, [r3, #20]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b1c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d013      	beq.n	8003b4e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2a:	4a76      	ldr	r2, [pc, #472]	; (8003d04 <HAL_UART_IRQHandler+0x350>)
 8003b2c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fe f8bc 	bl	8001cb0 <HAL_DMA_Abort_IT>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d016      	beq.n	8003b6c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b48:	4610      	mov	r0, r2
 8003b4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b4c:	e00e      	b.n	8003b6c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f8ec 	bl	8003d2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b54:	e00a      	b.n	8003b6c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f8e8 	bl	8003d2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b5c:	e006      	b.n	8003b6c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f8e4 	bl	8003d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003b6a:	e0c3      	b.n	8003cf4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b6c:	bf00      	nop
    return;
 8003b6e:	e0c1      	b.n	8003cf4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	f040 80a1 	bne.w	8003cbc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	f003 0310 	and.w	r3, r3, #16
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 809b 	beq.w	8003cbc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 8095 	beq.w	8003cbc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b92:	2300      	movs	r3, #0
 8003b94:	60fb      	str	r3, [r7, #12]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d04e      	beq.n	8003c54 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003bc0:	8a3b      	ldrh	r3, [r7, #16]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 8098 	beq.w	8003cf8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003bcc:	8a3a      	ldrh	r2, [r7, #16]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	f080 8092 	bcs.w	8003cf8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	8a3a      	ldrh	r2, [r7, #16]
 8003bd8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	d02b      	beq.n	8003c3c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bf2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695a      	ldr	r2, [r3, #20]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0201 	bic.w	r2, r2, #1
 8003c02:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695a      	ldr	r2, [r3, #20]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c12:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2220      	movs	r2, #32
 8003c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0210 	bic.w	r2, r2, #16
 8003c30:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fd ffff 	bl	8001c3a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 f876 	bl	8003d3e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003c52:	e051      	b.n	8003cf8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d047      	beq.n	8003cfc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003c6c:	8a7b      	ldrh	r3, [r7, #18]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d044      	beq.n	8003cfc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68da      	ldr	r2, [r3, #12]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c80:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695a      	ldr	r2, [r3, #20]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0201 	bic.w	r2, r2, #1
 8003c90:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2220      	movs	r2, #32
 8003c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0210 	bic.w	r2, r2, #16
 8003cae:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cb0:	8a7b      	ldrh	r3, [r7, #18]
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f842 	bl	8003d3e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003cba:	e01f      	b.n	8003cfc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d008      	beq.n	8003cd8 <HAL_UART_IRQHandler+0x324>
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f8c9 	bl	8003e68 <UART_Transmit_IT>
    return;
 8003cd6:	e012      	b.n	8003cfe <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00d      	beq.n	8003cfe <HAL_UART_IRQHandler+0x34a>
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d008      	beq.n	8003cfe <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f90a 	bl	8003f06 <UART_EndTransmit_IT>
    return;
 8003cf2:	e004      	b.n	8003cfe <HAL_UART_IRQHandler+0x34a>
    return;
 8003cf4:	bf00      	nop
 8003cf6:	e002      	b.n	8003cfe <HAL_UART_IRQHandler+0x34a>
      return;
 8003cf8:	bf00      	nop
 8003cfa:	e000      	b.n	8003cfe <HAL_UART_IRQHandler+0x34a>
      return;
 8003cfc:	bf00      	nop
  }
}
 8003cfe:	3728      	adds	r7, #40	; 0x28
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	08003e41 	.word	0x08003e41

08003d08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bc80      	pop	{r7}
 8003d18:	4770      	bx	lr

08003d1a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr

08003d2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bc80      	pop	{r7}
 8003d3c:	4770      	bx	lr

08003d3e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b083      	sub	sp, #12
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
 8003d46:	460b      	mov	r3, r1
 8003d48:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr

08003d54 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	603b      	str	r3, [r7, #0]
 8003d60:	4613      	mov	r3, r2
 8003d62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d64:	e02c      	b.n	8003dc0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6c:	d028      	beq.n	8003dc0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d007      	beq.n	8003d84 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d74:	f7fd fe4a 	bl	8001a0c <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d21d      	bcs.n	8003dc0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d92:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695a      	ldr	r2, [r3, #20]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 0201 	bic.w	r2, r2, #1
 8003da2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e00f      	b.n	8003de0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	bf0c      	ite	eq
 8003dd0:	2301      	moveq	r3, #1
 8003dd2:	2300      	movne	r3, #0
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	79fb      	ldrb	r3, [r7, #7]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d0c3      	beq.n	8003d66 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003dfe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695a      	ldr	r2, [r3, #20]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0201 	bic.w	r2, r2, #1
 8003e0e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d107      	bne.n	8003e28 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68da      	ldr	r2, [r3, #12]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 0210 	bic.w	r2, r2, #16
 8003e26:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bc80      	pop	{r7}
 8003e3e:	4770      	bx	lr

08003e40 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f7ff ff66 	bl	8003d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e60:	bf00      	nop
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b21      	cmp	r3, #33	; 0x21
 8003e7a:	d13e      	bne.n	8003efa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e84:	d114      	bne.n	8003eb0 <UART_Transmit_IT+0x48>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d110      	bne.n	8003eb0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	461a      	mov	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ea2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	1c9a      	adds	r2, r3, #2
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	621a      	str	r2, [r3, #32]
 8003eae:	e008      	b.n	8003ec2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	1c59      	adds	r1, r3, #1
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6211      	str	r1, [r2, #32]
 8003eba:	781a      	ldrb	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	4619      	mov	r1, r3
 8003ed0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10f      	bne.n	8003ef6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ee4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68da      	ldr	r2, [r3, #12]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ef4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	e000      	b.n	8003efc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003efa:	2302      	movs	r3, #2
  }
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bc80      	pop	{r7}
 8003f04:	4770      	bx	lr

08003f06 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b082      	sub	sp, #8
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68da      	ldr	r2, [r3, #12]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f1c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2220      	movs	r2, #32
 8003f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7ff feee 	bl	8003d08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b086      	sub	sp, #24
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b22      	cmp	r3, #34	; 0x22
 8003f48:	f040 8099 	bne.w	800407e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f54:	d117      	bne.n	8003f86 <UART_Receive_IT+0x50>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d113      	bne.n	8003f86 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f66:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7e:	1c9a      	adds	r2, r3, #2
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	629a      	str	r2, [r3, #40]	; 0x28
 8003f84:	e026      	b.n	8003fd4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f98:	d007      	beq.n	8003faa <UART_Receive_IT+0x74>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10a      	bne.n	8003fb8 <UART_Receive_IT+0x82>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d106      	bne.n	8003fb8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	701a      	strb	r2, [r3, #0]
 8003fb6:	e008      	b.n	8003fca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d148      	bne.n	800407a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68da      	ldr	r2, [r3, #12]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 0220 	bic.w	r2, r2, #32
 8003ff6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004006:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695a      	ldr	r2, [r3, #20]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0201 	bic.w	r2, r2, #1
 8004016:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2220      	movs	r2, #32
 800401c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004024:	2b01      	cmp	r3, #1
 8004026:	d123      	bne.n	8004070 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0210 	bic.w	r2, r2, #16
 800403c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0310 	and.w	r3, r3, #16
 8004048:	2b10      	cmp	r3, #16
 800404a:	d10a      	bne.n	8004062 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800404c:	2300      	movs	r3, #0
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004066:	4619      	mov	r1, r3
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f7ff fe68 	bl	8003d3e <HAL_UARTEx_RxEventCallback>
 800406e:	e002      	b.n	8004076 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7ff fe52 	bl	8003d1a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004076:	2300      	movs	r3, #0
 8004078:	e002      	b.n	8004080 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800407a:	2300      	movs	r3, #0
 800407c:	e000      	b.n	8004080 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800407e:	2302      	movs	r3, #2
  }
}
 8004080:	4618      	mov	r0, r3
 8004082:	3718      	adds	r7, #24
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	689a      	ldr	r2, [r3, #8]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80040c2:	f023 030c 	bic.w	r3, r3, #12
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6812      	ldr	r2, [r2, #0]
 80040ca:	68b9      	ldr	r1, [r7, #8]
 80040cc:	430b      	orrs	r3, r1
 80040ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699a      	ldr	r2, [r3, #24]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a2c      	ldr	r2, [pc, #176]	; (800419c <UART_SetConfig+0x114>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d103      	bne.n	80040f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80040f0:	f7fe fbf0 	bl	80028d4 <HAL_RCC_GetPCLK2Freq>
 80040f4:	60f8      	str	r0, [r7, #12]
 80040f6:	e002      	b.n	80040fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80040f8:	f7fe fbd8 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 80040fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	009a      	lsls	r2, r3, #2
 8004108:	441a      	add	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	fbb2 f3f3 	udiv	r3, r2, r3
 8004114:	4a22      	ldr	r2, [pc, #136]	; (80041a0 <UART_SetConfig+0x118>)
 8004116:	fba2 2303 	umull	r2, r3, r2, r3
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	0119      	lsls	r1, r3, #4
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	4613      	mov	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	009a      	lsls	r2, r3, #2
 8004128:	441a      	add	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	fbb2 f2f3 	udiv	r2, r2, r3
 8004134:	4b1a      	ldr	r3, [pc, #104]	; (80041a0 <UART_SetConfig+0x118>)
 8004136:	fba3 0302 	umull	r0, r3, r3, r2
 800413a:	095b      	lsrs	r3, r3, #5
 800413c:	2064      	movs	r0, #100	; 0x64
 800413e:	fb00 f303 	mul.w	r3, r0, r3
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	3332      	adds	r3, #50	; 0x32
 8004148:	4a15      	ldr	r2, [pc, #84]	; (80041a0 <UART_SetConfig+0x118>)
 800414a:	fba2 2303 	umull	r2, r3, r2, r3
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004154:	4419      	add	r1, r3
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	4613      	mov	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	009a      	lsls	r2, r3, #2
 8004160:	441a      	add	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	fbb2 f2f3 	udiv	r2, r2, r3
 800416c:	4b0c      	ldr	r3, [pc, #48]	; (80041a0 <UART_SetConfig+0x118>)
 800416e:	fba3 0302 	umull	r0, r3, r3, r2
 8004172:	095b      	lsrs	r3, r3, #5
 8004174:	2064      	movs	r0, #100	; 0x64
 8004176:	fb00 f303 	mul.w	r3, r0, r3
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	011b      	lsls	r3, r3, #4
 800417e:	3332      	adds	r3, #50	; 0x32
 8004180:	4a07      	ldr	r2, [pc, #28]	; (80041a0 <UART_SetConfig+0x118>)
 8004182:	fba2 2303 	umull	r2, r3, r2, r3
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	f003 020f 	and.w	r2, r3, #15
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	440a      	add	r2, r1
 8004192:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004194:	bf00      	nop
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	40013800 	.word	0x40013800
 80041a0:	51eb851f 	.word	0x51eb851f

080041a4 <__errno>:
 80041a4:	4b01      	ldr	r3, [pc, #4]	; (80041ac <__errno+0x8>)
 80041a6:	6818      	ldr	r0, [r3, #0]
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	20000044 	.word	0x20000044

080041b0 <__libc_init_array>:
 80041b0:	b570      	push	{r4, r5, r6, lr}
 80041b2:	2600      	movs	r6, #0
 80041b4:	4d0c      	ldr	r5, [pc, #48]	; (80041e8 <__libc_init_array+0x38>)
 80041b6:	4c0d      	ldr	r4, [pc, #52]	; (80041ec <__libc_init_array+0x3c>)
 80041b8:	1b64      	subs	r4, r4, r5
 80041ba:	10a4      	asrs	r4, r4, #2
 80041bc:	42a6      	cmp	r6, r4
 80041be:	d109      	bne.n	80041d4 <__libc_init_array+0x24>
 80041c0:	f000 fc9c 	bl	8004afc <_init>
 80041c4:	2600      	movs	r6, #0
 80041c6:	4d0a      	ldr	r5, [pc, #40]	; (80041f0 <__libc_init_array+0x40>)
 80041c8:	4c0a      	ldr	r4, [pc, #40]	; (80041f4 <__libc_init_array+0x44>)
 80041ca:	1b64      	subs	r4, r4, r5
 80041cc:	10a4      	asrs	r4, r4, #2
 80041ce:	42a6      	cmp	r6, r4
 80041d0:	d105      	bne.n	80041de <__libc_init_array+0x2e>
 80041d2:	bd70      	pop	{r4, r5, r6, pc}
 80041d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80041d8:	4798      	blx	r3
 80041da:	3601      	adds	r6, #1
 80041dc:	e7ee      	b.n	80041bc <__libc_init_array+0xc>
 80041de:	f855 3b04 	ldr.w	r3, [r5], #4
 80041e2:	4798      	blx	r3
 80041e4:	3601      	adds	r6, #1
 80041e6:	e7f2      	b.n	80041ce <__libc_init_array+0x1e>
 80041e8:	08004b80 	.word	0x08004b80
 80041ec:	08004b80 	.word	0x08004b80
 80041f0:	08004b80 	.word	0x08004b80
 80041f4:	08004b84 	.word	0x08004b84

080041f8 <memset>:
 80041f8:	4603      	mov	r3, r0
 80041fa:	4402      	add	r2, r0
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d100      	bne.n	8004202 <memset+0xa>
 8004200:	4770      	bx	lr
 8004202:	f803 1b01 	strb.w	r1, [r3], #1
 8004206:	e7f9      	b.n	80041fc <memset+0x4>

08004208 <siprintf>:
 8004208:	b40e      	push	{r1, r2, r3}
 800420a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800420e:	b500      	push	{lr}
 8004210:	b09c      	sub	sp, #112	; 0x70
 8004212:	ab1d      	add	r3, sp, #116	; 0x74
 8004214:	9002      	str	r0, [sp, #8]
 8004216:	9006      	str	r0, [sp, #24]
 8004218:	9107      	str	r1, [sp, #28]
 800421a:	9104      	str	r1, [sp, #16]
 800421c:	4808      	ldr	r0, [pc, #32]	; (8004240 <siprintf+0x38>)
 800421e:	4909      	ldr	r1, [pc, #36]	; (8004244 <siprintf+0x3c>)
 8004220:	f853 2b04 	ldr.w	r2, [r3], #4
 8004224:	9105      	str	r1, [sp, #20]
 8004226:	6800      	ldr	r0, [r0, #0]
 8004228:	a902      	add	r1, sp, #8
 800422a:	9301      	str	r3, [sp, #4]
 800422c:	f000 f868 	bl	8004300 <_svfiprintf_r>
 8004230:	2200      	movs	r2, #0
 8004232:	9b02      	ldr	r3, [sp, #8]
 8004234:	701a      	strb	r2, [r3, #0]
 8004236:	b01c      	add	sp, #112	; 0x70
 8004238:	f85d eb04 	ldr.w	lr, [sp], #4
 800423c:	b003      	add	sp, #12
 800423e:	4770      	bx	lr
 8004240:	20000044 	.word	0x20000044
 8004244:	ffff0208 	.word	0xffff0208

08004248 <__ssputs_r>:
 8004248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800424c:	688e      	ldr	r6, [r1, #8]
 800424e:	4682      	mov	sl, r0
 8004250:	429e      	cmp	r6, r3
 8004252:	460c      	mov	r4, r1
 8004254:	4690      	mov	r8, r2
 8004256:	461f      	mov	r7, r3
 8004258:	d838      	bhi.n	80042cc <__ssputs_r+0x84>
 800425a:	898a      	ldrh	r2, [r1, #12]
 800425c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004260:	d032      	beq.n	80042c8 <__ssputs_r+0x80>
 8004262:	6825      	ldr	r5, [r4, #0]
 8004264:	6909      	ldr	r1, [r1, #16]
 8004266:	3301      	adds	r3, #1
 8004268:	eba5 0901 	sub.w	r9, r5, r1
 800426c:	6965      	ldr	r5, [r4, #20]
 800426e:	444b      	add	r3, r9
 8004270:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004274:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004278:	106d      	asrs	r5, r5, #1
 800427a:	429d      	cmp	r5, r3
 800427c:	bf38      	it	cc
 800427e:	461d      	movcc	r5, r3
 8004280:	0553      	lsls	r3, r2, #21
 8004282:	d531      	bpl.n	80042e8 <__ssputs_r+0xa0>
 8004284:	4629      	mov	r1, r5
 8004286:	f000 fb6f 	bl	8004968 <_malloc_r>
 800428a:	4606      	mov	r6, r0
 800428c:	b950      	cbnz	r0, 80042a4 <__ssputs_r+0x5c>
 800428e:	230c      	movs	r3, #12
 8004290:	f04f 30ff 	mov.w	r0, #4294967295
 8004294:	f8ca 3000 	str.w	r3, [sl]
 8004298:	89a3      	ldrh	r3, [r4, #12]
 800429a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800429e:	81a3      	strh	r3, [r4, #12]
 80042a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042a4:	464a      	mov	r2, r9
 80042a6:	6921      	ldr	r1, [r4, #16]
 80042a8:	f000 face 	bl	8004848 <memcpy>
 80042ac:	89a3      	ldrh	r3, [r4, #12]
 80042ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80042b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b6:	81a3      	strh	r3, [r4, #12]
 80042b8:	6126      	str	r6, [r4, #16]
 80042ba:	444e      	add	r6, r9
 80042bc:	6026      	str	r6, [r4, #0]
 80042be:	463e      	mov	r6, r7
 80042c0:	6165      	str	r5, [r4, #20]
 80042c2:	eba5 0509 	sub.w	r5, r5, r9
 80042c6:	60a5      	str	r5, [r4, #8]
 80042c8:	42be      	cmp	r6, r7
 80042ca:	d900      	bls.n	80042ce <__ssputs_r+0x86>
 80042cc:	463e      	mov	r6, r7
 80042ce:	4632      	mov	r2, r6
 80042d0:	4641      	mov	r1, r8
 80042d2:	6820      	ldr	r0, [r4, #0]
 80042d4:	f000 fac6 	bl	8004864 <memmove>
 80042d8:	68a3      	ldr	r3, [r4, #8]
 80042da:	2000      	movs	r0, #0
 80042dc:	1b9b      	subs	r3, r3, r6
 80042de:	60a3      	str	r3, [r4, #8]
 80042e0:	6823      	ldr	r3, [r4, #0]
 80042e2:	4433      	add	r3, r6
 80042e4:	6023      	str	r3, [r4, #0]
 80042e6:	e7db      	b.n	80042a0 <__ssputs_r+0x58>
 80042e8:	462a      	mov	r2, r5
 80042ea:	f000 fbb1 	bl	8004a50 <_realloc_r>
 80042ee:	4606      	mov	r6, r0
 80042f0:	2800      	cmp	r0, #0
 80042f2:	d1e1      	bne.n	80042b8 <__ssputs_r+0x70>
 80042f4:	4650      	mov	r0, sl
 80042f6:	6921      	ldr	r1, [r4, #16]
 80042f8:	f000 face 	bl	8004898 <_free_r>
 80042fc:	e7c7      	b.n	800428e <__ssputs_r+0x46>
	...

08004300 <_svfiprintf_r>:
 8004300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004304:	4698      	mov	r8, r3
 8004306:	898b      	ldrh	r3, [r1, #12]
 8004308:	4607      	mov	r7, r0
 800430a:	061b      	lsls	r3, r3, #24
 800430c:	460d      	mov	r5, r1
 800430e:	4614      	mov	r4, r2
 8004310:	b09d      	sub	sp, #116	; 0x74
 8004312:	d50e      	bpl.n	8004332 <_svfiprintf_r+0x32>
 8004314:	690b      	ldr	r3, [r1, #16]
 8004316:	b963      	cbnz	r3, 8004332 <_svfiprintf_r+0x32>
 8004318:	2140      	movs	r1, #64	; 0x40
 800431a:	f000 fb25 	bl	8004968 <_malloc_r>
 800431e:	6028      	str	r0, [r5, #0]
 8004320:	6128      	str	r0, [r5, #16]
 8004322:	b920      	cbnz	r0, 800432e <_svfiprintf_r+0x2e>
 8004324:	230c      	movs	r3, #12
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	f04f 30ff 	mov.w	r0, #4294967295
 800432c:	e0d1      	b.n	80044d2 <_svfiprintf_r+0x1d2>
 800432e:	2340      	movs	r3, #64	; 0x40
 8004330:	616b      	str	r3, [r5, #20]
 8004332:	2300      	movs	r3, #0
 8004334:	9309      	str	r3, [sp, #36]	; 0x24
 8004336:	2320      	movs	r3, #32
 8004338:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800433c:	2330      	movs	r3, #48	; 0x30
 800433e:	f04f 0901 	mov.w	r9, #1
 8004342:	f8cd 800c 	str.w	r8, [sp, #12]
 8004346:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80044ec <_svfiprintf_r+0x1ec>
 800434a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800434e:	4623      	mov	r3, r4
 8004350:	469a      	mov	sl, r3
 8004352:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004356:	b10a      	cbz	r2, 800435c <_svfiprintf_r+0x5c>
 8004358:	2a25      	cmp	r2, #37	; 0x25
 800435a:	d1f9      	bne.n	8004350 <_svfiprintf_r+0x50>
 800435c:	ebba 0b04 	subs.w	fp, sl, r4
 8004360:	d00b      	beq.n	800437a <_svfiprintf_r+0x7a>
 8004362:	465b      	mov	r3, fp
 8004364:	4622      	mov	r2, r4
 8004366:	4629      	mov	r1, r5
 8004368:	4638      	mov	r0, r7
 800436a:	f7ff ff6d 	bl	8004248 <__ssputs_r>
 800436e:	3001      	adds	r0, #1
 8004370:	f000 80aa 	beq.w	80044c8 <_svfiprintf_r+0x1c8>
 8004374:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004376:	445a      	add	r2, fp
 8004378:	9209      	str	r2, [sp, #36]	; 0x24
 800437a:	f89a 3000 	ldrb.w	r3, [sl]
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 80a2 	beq.w	80044c8 <_svfiprintf_r+0x1c8>
 8004384:	2300      	movs	r3, #0
 8004386:	f04f 32ff 	mov.w	r2, #4294967295
 800438a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800438e:	f10a 0a01 	add.w	sl, sl, #1
 8004392:	9304      	str	r3, [sp, #16]
 8004394:	9307      	str	r3, [sp, #28]
 8004396:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800439a:	931a      	str	r3, [sp, #104]	; 0x68
 800439c:	4654      	mov	r4, sl
 800439e:	2205      	movs	r2, #5
 80043a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043a4:	4851      	ldr	r0, [pc, #324]	; (80044ec <_svfiprintf_r+0x1ec>)
 80043a6:	f000 fa41 	bl	800482c <memchr>
 80043aa:	9a04      	ldr	r2, [sp, #16]
 80043ac:	b9d8      	cbnz	r0, 80043e6 <_svfiprintf_r+0xe6>
 80043ae:	06d0      	lsls	r0, r2, #27
 80043b0:	bf44      	itt	mi
 80043b2:	2320      	movmi	r3, #32
 80043b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043b8:	0711      	lsls	r1, r2, #28
 80043ba:	bf44      	itt	mi
 80043bc:	232b      	movmi	r3, #43	; 0x2b
 80043be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043c2:	f89a 3000 	ldrb.w	r3, [sl]
 80043c6:	2b2a      	cmp	r3, #42	; 0x2a
 80043c8:	d015      	beq.n	80043f6 <_svfiprintf_r+0xf6>
 80043ca:	4654      	mov	r4, sl
 80043cc:	2000      	movs	r0, #0
 80043ce:	f04f 0c0a 	mov.w	ip, #10
 80043d2:	9a07      	ldr	r2, [sp, #28]
 80043d4:	4621      	mov	r1, r4
 80043d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043da:	3b30      	subs	r3, #48	; 0x30
 80043dc:	2b09      	cmp	r3, #9
 80043de:	d94e      	bls.n	800447e <_svfiprintf_r+0x17e>
 80043e0:	b1b0      	cbz	r0, 8004410 <_svfiprintf_r+0x110>
 80043e2:	9207      	str	r2, [sp, #28]
 80043e4:	e014      	b.n	8004410 <_svfiprintf_r+0x110>
 80043e6:	eba0 0308 	sub.w	r3, r0, r8
 80043ea:	fa09 f303 	lsl.w	r3, r9, r3
 80043ee:	4313      	orrs	r3, r2
 80043f0:	46a2      	mov	sl, r4
 80043f2:	9304      	str	r3, [sp, #16]
 80043f4:	e7d2      	b.n	800439c <_svfiprintf_r+0x9c>
 80043f6:	9b03      	ldr	r3, [sp, #12]
 80043f8:	1d19      	adds	r1, r3, #4
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	9103      	str	r1, [sp, #12]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	bfbb      	ittet	lt
 8004402:	425b      	neglt	r3, r3
 8004404:	f042 0202 	orrlt.w	r2, r2, #2
 8004408:	9307      	strge	r3, [sp, #28]
 800440a:	9307      	strlt	r3, [sp, #28]
 800440c:	bfb8      	it	lt
 800440e:	9204      	strlt	r2, [sp, #16]
 8004410:	7823      	ldrb	r3, [r4, #0]
 8004412:	2b2e      	cmp	r3, #46	; 0x2e
 8004414:	d10c      	bne.n	8004430 <_svfiprintf_r+0x130>
 8004416:	7863      	ldrb	r3, [r4, #1]
 8004418:	2b2a      	cmp	r3, #42	; 0x2a
 800441a:	d135      	bne.n	8004488 <_svfiprintf_r+0x188>
 800441c:	9b03      	ldr	r3, [sp, #12]
 800441e:	3402      	adds	r4, #2
 8004420:	1d1a      	adds	r2, r3, #4
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	9203      	str	r2, [sp, #12]
 8004426:	2b00      	cmp	r3, #0
 8004428:	bfb8      	it	lt
 800442a:	f04f 33ff 	movlt.w	r3, #4294967295
 800442e:	9305      	str	r3, [sp, #20]
 8004430:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80044f0 <_svfiprintf_r+0x1f0>
 8004434:	2203      	movs	r2, #3
 8004436:	4650      	mov	r0, sl
 8004438:	7821      	ldrb	r1, [r4, #0]
 800443a:	f000 f9f7 	bl	800482c <memchr>
 800443e:	b140      	cbz	r0, 8004452 <_svfiprintf_r+0x152>
 8004440:	2340      	movs	r3, #64	; 0x40
 8004442:	eba0 000a 	sub.w	r0, r0, sl
 8004446:	fa03 f000 	lsl.w	r0, r3, r0
 800444a:	9b04      	ldr	r3, [sp, #16]
 800444c:	3401      	adds	r4, #1
 800444e:	4303      	orrs	r3, r0
 8004450:	9304      	str	r3, [sp, #16]
 8004452:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004456:	2206      	movs	r2, #6
 8004458:	4826      	ldr	r0, [pc, #152]	; (80044f4 <_svfiprintf_r+0x1f4>)
 800445a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800445e:	f000 f9e5 	bl	800482c <memchr>
 8004462:	2800      	cmp	r0, #0
 8004464:	d038      	beq.n	80044d8 <_svfiprintf_r+0x1d8>
 8004466:	4b24      	ldr	r3, [pc, #144]	; (80044f8 <_svfiprintf_r+0x1f8>)
 8004468:	bb1b      	cbnz	r3, 80044b2 <_svfiprintf_r+0x1b2>
 800446a:	9b03      	ldr	r3, [sp, #12]
 800446c:	3307      	adds	r3, #7
 800446e:	f023 0307 	bic.w	r3, r3, #7
 8004472:	3308      	adds	r3, #8
 8004474:	9303      	str	r3, [sp, #12]
 8004476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004478:	4433      	add	r3, r6
 800447a:	9309      	str	r3, [sp, #36]	; 0x24
 800447c:	e767      	b.n	800434e <_svfiprintf_r+0x4e>
 800447e:	460c      	mov	r4, r1
 8004480:	2001      	movs	r0, #1
 8004482:	fb0c 3202 	mla	r2, ip, r2, r3
 8004486:	e7a5      	b.n	80043d4 <_svfiprintf_r+0xd4>
 8004488:	2300      	movs	r3, #0
 800448a:	f04f 0c0a 	mov.w	ip, #10
 800448e:	4619      	mov	r1, r3
 8004490:	3401      	adds	r4, #1
 8004492:	9305      	str	r3, [sp, #20]
 8004494:	4620      	mov	r0, r4
 8004496:	f810 2b01 	ldrb.w	r2, [r0], #1
 800449a:	3a30      	subs	r2, #48	; 0x30
 800449c:	2a09      	cmp	r2, #9
 800449e:	d903      	bls.n	80044a8 <_svfiprintf_r+0x1a8>
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0c5      	beq.n	8004430 <_svfiprintf_r+0x130>
 80044a4:	9105      	str	r1, [sp, #20]
 80044a6:	e7c3      	b.n	8004430 <_svfiprintf_r+0x130>
 80044a8:	4604      	mov	r4, r0
 80044aa:	2301      	movs	r3, #1
 80044ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80044b0:	e7f0      	b.n	8004494 <_svfiprintf_r+0x194>
 80044b2:	ab03      	add	r3, sp, #12
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	462a      	mov	r2, r5
 80044b8:	4638      	mov	r0, r7
 80044ba:	4b10      	ldr	r3, [pc, #64]	; (80044fc <_svfiprintf_r+0x1fc>)
 80044bc:	a904      	add	r1, sp, #16
 80044be:	f3af 8000 	nop.w
 80044c2:	1c42      	adds	r2, r0, #1
 80044c4:	4606      	mov	r6, r0
 80044c6:	d1d6      	bne.n	8004476 <_svfiprintf_r+0x176>
 80044c8:	89ab      	ldrh	r3, [r5, #12]
 80044ca:	065b      	lsls	r3, r3, #25
 80044cc:	f53f af2c 	bmi.w	8004328 <_svfiprintf_r+0x28>
 80044d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044d2:	b01d      	add	sp, #116	; 0x74
 80044d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044d8:	ab03      	add	r3, sp, #12
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	462a      	mov	r2, r5
 80044de:	4638      	mov	r0, r7
 80044e0:	4b06      	ldr	r3, [pc, #24]	; (80044fc <_svfiprintf_r+0x1fc>)
 80044e2:	a904      	add	r1, sp, #16
 80044e4:	f000 f87c 	bl	80045e0 <_printf_i>
 80044e8:	e7eb      	b.n	80044c2 <_svfiprintf_r+0x1c2>
 80044ea:	bf00      	nop
 80044ec:	08004b4c 	.word	0x08004b4c
 80044f0:	08004b52 	.word	0x08004b52
 80044f4:	08004b56 	.word	0x08004b56
 80044f8:	00000000 	.word	0x00000000
 80044fc:	08004249 	.word	0x08004249

08004500 <_printf_common>:
 8004500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004504:	4616      	mov	r6, r2
 8004506:	4699      	mov	r9, r3
 8004508:	688a      	ldr	r2, [r1, #8]
 800450a:	690b      	ldr	r3, [r1, #16]
 800450c:	4607      	mov	r7, r0
 800450e:	4293      	cmp	r3, r2
 8004510:	bfb8      	it	lt
 8004512:	4613      	movlt	r3, r2
 8004514:	6033      	str	r3, [r6, #0]
 8004516:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800451a:	460c      	mov	r4, r1
 800451c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004520:	b10a      	cbz	r2, 8004526 <_printf_common+0x26>
 8004522:	3301      	adds	r3, #1
 8004524:	6033      	str	r3, [r6, #0]
 8004526:	6823      	ldr	r3, [r4, #0]
 8004528:	0699      	lsls	r1, r3, #26
 800452a:	bf42      	ittt	mi
 800452c:	6833      	ldrmi	r3, [r6, #0]
 800452e:	3302      	addmi	r3, #2
 8004530:	6033      	strmi	r3, [r6, #0]
 8004532:	6825      	ldr	r5, [r4, #0]
 8004534:	f015 0506 	ands.w	r5, r5, #6
 8004538:	d106      	bne.n	8004548 <_printf_common+0x48>
 800453a:	f104 0a19 	add.w	sl, r4, #25
 800453e:	68e3      	ldr	r3, [r4, #12]
 8004540:	6832      	ldr	r2, [r6, #0]
 8004542:	1a9b      	subs	r3, r3, r2
 8004544:	42ab      	cmp	r3, r5
 8004546:	dc28      	bgt.n	800459a <_printf_common+0x9a>
 8004548:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800454c:	1e13      	subs	r3, r2, #0
 800454e:	6822      	ldr	r2, [r4, #0]
 8004550:	bf18      	it	ne
 8004552:	2301      	movne	r3, #1
 8004554:	0692      	lsls	r2, r2, #26
 8004556:	d42d      	bmi.n	80045b4 <_printf_common+0xb4>
 8004558:	4649      	mov	r1, r9
 800455a:	4638      	mov	r0, r7
 800455c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004560:	47c0      	blx	r8
 8004562:	3001      	adds	r0, #1
 8004564:	d020      	beq.n	80045a8 <_printf_common+0xa8>
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	68e5      	ldr	r5, [r4, #12]
 800456a:	f003 0306 	and.w	r3, r3, #6
 800456e:	2b04      	cmp	r3, #4
 8004570:	bf18      	it	ne
 8004572:	2500      	movne	r5, #0
 8004574:	6832      	ldr	r2, [r6, #0]
 8004576:	f04f 0600 	mov.w	r6, #0
 800457a:	68a3      	ldr	r3, [r4, #8]
 800457c:	bf08      	it	eq
 800457e:	1aad      	subeq	r5, r5, r2
 8004580:	6922      	ldr	r2, [r4, #16]
 8004582:	bf08      	it	eq
 8004584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004588:	4293      	cmp	r3, r2
 800458a:	bfc4      	itt	gt
 800458c:	1a9b      	subgt	r3, r3, r2
 800458e:	18ed      	addgt	r5, r5, r3
 8004590:	341a      	adds	r4, #26
 8004592:	42b5      	cmp	r5, r6
 8004594:	d11a      	bne.n	80045cc <_printf_common+0xcc>
 8004596:	2000      	movs	r0, #0
 8004598:	e008      	b.n	80045ac <_printf_common+0xac>
 800459a:	2301      	movs	r3, #1
 800459c:	4652      	mov	r2, sl
 800459e:	4649      	mov	r1, r9
 80045a0:	4638      	mov	r0, r7
 80045a2:	47c0      	blx	r8
 80045a4:	3001      	adds	r0, #1
 80045a6:	d103      	bne.n	80045b0 <_printf_common+0xb0>
 80045a8:	f04f 30ff 	mov.w	r0, #4294967295
 80045ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045b0:	3501      	adds	r5, #1
 80045b2:	e7c4      	b.n	800453e <_printf_common+0x3e>
 80045b4:	2030      	movs	r0, #48	; 0x30
 80045b6:	18e1      	adds	r1, r4, r3
 80045b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045c2:	4422      	add	r2, r4
 80045c4:	3302      	adds	r3, #2
 80045c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045ca:	e7c5      	b.n	8004558 <_printf_common+0x58>
 80045cc:	2301      	movs	r3, #1
 80045ce:	4622      	mov	r2, r4
 80045d0:	4649      	mov	r1, r9
 80045d2:	4638      	mov	r0, r7
 80045d4:	47c0      	blx	r8
 80045d6:	3001      	adds	r0, #1
 80045d8:	d0e6      	beq.n	80045a8 <_printf_common+0xa8>
 80045da:	3601      	adds	r6, #1
 80045dc:	e7d9      	b.n	8004592 <_printf_common+0x92>
	...

080045e0 <_printf_i>:
 80045e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045e4:	7e0f      	ldrb	r7, [r1, #24]
 80045e6:	4691      	mov	r9, r2
 80045e8:	2f78      	cmp	r7, #120	; 0x78
 80045ea:	4680      	mov	r8, r0
 80045ec:	460c      	mov	r4, r1
 80045ee:	469a      	mov	sl, r3
 80045f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80045f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80045f6:	d807      	bhi.n	8004608 <_printf_i+0x28>
 80045f8:	2f62      	cmp	r7, #98	; 0x62
 80045fa:	d80a      	bhi.n	8004612 <_printf_i+0x32>
 80045fc:	2f00      	cmp	r7, #0
 80045fe:	f000 80d9 	beq.w	80047b4 <_printf_i+0x1d4>
 8004602:	2f58      	cmp	r7, #88	; 0x58
 8004604:	f000 80a4 	beq.w	8004750 <_printf_i+0x170>
 8004608:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800460c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004610:	e03a      	b.n	8004688 <_printf_i+0xa8>
 8004612:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004616:	2b15      	cmp	r3, #21
 8004618:	d8f6      	bhi.n	8004608 <_printf_i+0x28>
 800461a:	a101      	add	r1, pc, #4	; (adr r1, 8004620 <_printf_i+0x40>)
 800461c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004620:	08004679 	.word	0x08004679
 8004624:	0800468d 	.word	0x0800468d
 8004628:	08004609 	.word	0x08004609
 800462c:	08004609 	.word	0x08004609
 8004630:	08004609 	.word	0x08004609
 8004634:	08004609 	.word	0x08004609
 8004638:	0800468d 	.word	0x0800468d
 800463c:	08004609 	.word	0x08004609
 8004640:	08004609 	.word	0x08004609
 8004644:	08004609 	.word	0x08004609
 8004648:	08004609 	.word	0x08004609
 800464c:	0800479b 	.word	0x0800479b
 8004650:	080046bd 	.word	0x080046bd
 8004654:	0800477d 	.word	0x0800477d
 8004658:	08004609 	.word	0x08004609
 800465c:	08004609 	.word	0x08004609
 8004660:	080047bd 	.word	0x080047bd
 8004664:	08004609 	.word	0x08004609
 8004668:	080046bd 	.word	0x080046bd
 800466c:	08004609 	.word	0x08004609
 8004670:	08004609 	.word	0x08004609
 8004674:	08004785 	.word	0x08004785
 8004678:	682b      	ldr	r3, [r5, #0]
 800467a:	1d1a      	adds	r2, r3, #4
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	602a      	str	r2, [r5, #0]
 8004680:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004684:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004688:	2301      	movs	r3, #1
 800468a:	e0a4      	b.n	80047d6 <_printf_i+0x1f6>
 800468c:	6820      	ldr	r0, [r4, #0]
 800468e:	6829      	ldr	r1, [r5, #0]
 8004690:	0606      	lsls	r6, r0, #24
 8004692:	f101 0304 	add.w	r3, r1, #4
 8004696:	d50a      	bpl.n	80046ae <_printf_i+0xce>
 8004698:	680e      	ldr	r6, [r1, #0]
 800469a:	602b      	str	r3, [r5, #0]
 800469c:	2e00      	cmp	r6, #0
 800469e:	da03      	bge.n	80046a8 <_printf_i+0xc8>
 80046a0:	232d      	movs	r3, #45	; 0x2d
 80046a2:	4276      	negs	r6, r6
 80046a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046a8:	230a      	movs	r3, #10
 80046aa:	485e      	ldr	r0, [pc, #376]	; (8004824 <_printf_i+0x244>)
 80046ac:	e019      	b.n	80046e2 <_printf_i+0x102>
 80046ae:	680e      	ldr	r6, [r1, #0]
 80046b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80046b4:	602b      	str	r3, [r5, #0]
 80046b6:	bf18      	it	ne
 80046b8:	b236      	sxthne	r6, r6
 80046ba:	e7ef      	b.n	800469c <_printf_i+0xbc>
 80046bc:	682b      	ldr	r3, [r5, #0]
 80046be:	6820      	ldr	r0, [r4, #0]
 80046c0:	1d19      	adds	r1, r3, #4
 80046c2:	6029      	str	r1, [r5, #0]
 80046c4:	0601      	lsls	r1, r0, #24
 80046c6:	d501      	bpl.n	80046cc <_printf_i+0xec>
 80046c8:	681e      	ldr	r6, [r3, #0]
 80046ca:	e002      	b.n	80046d2 <_printf_i+0xf2>
 80046cc:	0646      	lsls	r6, r0, #25
 80046ce:	d5fb      	bpl.n	80046c8 <_printf_i+0xe8>
 80046d0:	881e      	ldrh	r6, [r3, #0]
 80046d2:	2f6f      	cmp	r7, #111	; 0x6f
 80046d4:	bf0c      	ite	eq
 80046d6:	2308      	moveq	r3, #8
 80046d8:	230a      	movne	r3, #10
 80046da:	4852      	ldr	r0, [pc, #328]	; (8004824 <_printf_i+0x244>)
 80046dc:	2100      	movs	r1, #0
 80046de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046e2:	6865      	ldr	r5, [r4, #4]
 80046e4:	2d00      	cmp	r5, #0
 80046e6:	bfa8      	it	ge
 80046e8:	6821      	ldrge	r1, [r4, #0]
 80046ea:	60a5      	str	r5, [r4, #8]
 80046ec:	bfa4      	itt	ge
 80046ee:	f021 0104 	bicge.w	r1, r1, #4
 80046f2:	6021      	strge	r1, [r4, #0]
 80046f4:	b90e      	cbnz	r6, 80046fa <_printf_i+0x11a>
 80046f6:	2d00      	cmp	r5, #0
 80046f8:	d04d      	beq.n	8004796 <_printf_i+0x1b6>
 80046fa:	4615      	mov	r5, r2
 80046fc:	fbb6 f1f3 	udiv	r1, r6, r3
 8004700:	fb03 6711 	mls	r7, r3, r1, r6
 8004704:	5dc7      	ldrb	r7, [r0, r7]
 8004706:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800470a:	4637      	mov	r7, r6
 800470c:	42bb      	cmp	r3, r7
 800470e:	460e      	mov	r6, r1
 8004710:	d9f4      	bls.n	80046fc <_printf_i+0x11c>
 8004712:	2b08      	cmp	r3, #8
 8004714:	d10b      	bne.n	800472e <_printf_i+0x14e>
 8004716:	6823      	ldr	r3, [r4, #0]
 8004718:	07de      	lsls	r6, r3, #31
 800471a:	d508      	bpl.n	800472e <_printf_i+0x14e>
 800471c:	6923      	ldr	r3, [r4, #16]
 800471e:	6861      	ldr	r1, [r4, #4]
 8004720:	4299      	cmp	r1, r3
 8004722:	bfde      	ittt	le
 8004724:	2330      	movle	r3, #48	; 0x30
 8004726:	f805 3c01 	strble.w	r3, [r5, #-1]
 800472a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800472e:	1b52      	subs	r2, r2, r5
 8004730:	6122      	str	r2, [r4, #16]
 8004732:	464b      	mov	r3, r9
 8004734:	4621      	mov	r1, r4
 8004736:	4640      	mov	r0, r8
 8004738:	f8cd a000 	str.w	sl, [sp]
 800473c:	aa03      	add	r2, sp, #12
 800473e:	f7ff fedf 	bl	8004500 <_printf_common>
 8004742:	3001      	adds	r0, #1
 8004744:	d14c      	bne.n	80047e0 <_printf_i+0x200>
 8004746:	f04f 30ff 	mov.w	r0, #4294967295
 800474a:	b004      	add	sp, #16
 800474c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004750:	4834      	ldr	r0, [pc, #208]	; (8004824 <_printf_i+0x244>)
 8004752:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004756:	6829      	ldr	r1, [r5, #0]
 8004758:	6823      	ldr	r3, [r4, #0]
 800475a:	f851 6b04 	ldr.w	r6, [r1], #4
 800475e:	6029      	str	r1, [r5, #0]
 8004760:	061d      	lsls	r5, r3, #24
 8004762:	d514      	bpl.n	800478e <_printf_i+0x1ae>
 8004764:	07df      	lsls	r7, r3, #31
 8004766:	bf44      	itt	mi
 8004768:	f043 0320 	orrmi.w	r3, r3, #32
 800476c:	6023      	strmi	r3, [r4, #0]
 800476e:	b91e      	cbnz	r6, 8004778 <_printf_i+0x198>
 8004770:	6823      	ldr	r3, [r4, #0]
 8004772:	f023 0320 	bic.w	r3, r3, #32
 8004776:	6023      	str	r3, [r4, #0]
 8004778:	2310      	movs	r3, #16
 800477a:	e7af      	b.n	80046dc <_printf_i+0xfc>
 800477c:	6823      	ldr	r3, [r4, #0]
 800477e:	f043 0320 	orr.w	r3, r3, #32
 8004782:	6023      	str	r3, [r4, #0]
 8004784:	2378      	movs	r3, #120	; 0x78
 8004786:	4828      	ldr	r0, [pc, #160]	; (8004828 <_printf_i+0x248>)
 8004788:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800478c:	e7e3      	b.n	8004756 <_printf_i+0x176>
 800478e:	0659      	lsls	r1, r3, #25
 8004790:	bf48      	it	mi
 8004792:	b2b6      	uxthmi	r6, r6
 8004794:	e7e6      	b.n	8004764 <_printf_i+0x184>
 8004796:	4615      	mov	r5, r2
 8004798:	e7bb      	b.n	8004712 <_printf_i+0x132>
 800479a:	682b      	ldr	r3, [r5, #0]
 800479c:	6826      	ldr	r6, [r4, #0]
 800479e:	1d18      	adds	r0, r3, #4
 80047a0:	6961      	ldr	r1, [r4, #20]
 80047a2:	6028      	str	r0, [r5, #0]
 80047a4:	0635      	lsls	r5, r6, #24
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	d501      	bpl.n	80047ae <_printf_i+0x1ce>
 80047aa:	6019      	str	r1, [r3, #0]
 80047ac:	e002      	b.n	80047b4 <_printf_i+0x1d4>
 80047ae:	0670      	lsls	r0, r6, #25
 80047b0:	d5fb      	bpl.n	80047aa <_printf_i+0x1ca>
 80047b2:	8019      	strh	r1, [r3, #0]
 80047b4:	2300      	movs	r3, #0
 80047b6:	4615      	mov	r5, r2
 80047b8:	6123      	str	r3, [r4, #16]
 80047ba:	e7ba      	b.n	8004732 <_printf_i+0x152>
 80047bc:	682b      	ldr	r3, [r5, #0]
 80047be:	2100      	movs	r1, #0
 80047c0:	1d1a      	adds	r2, r3, #4
 80047c2:	602a      	str	r2, [r5, #0]
 80047c4:	681d      	ldr	r5, [r3, #0]
 80047c6:	6862      	ldr	r2, [r4, #4]
 80047c8:	4628      	mov	r0, r5
 80047ca:	f000 f82f 	bl	800482c <memchr>
 80047ce:	b108      	cbz	r0, 80047d4 <_printf_i+0x1f4>
 80047d0:	1b40      	subs	r0, r0, r5
 80047d2:	6060      	str	r0, [r4, #4]
 80047d4:	6863      	ldr	r3, [r4, #4]
 80047d6:	6123      	str	r3, [r4, #16]
 80047d8:	2300      	movs	r3, #0
 80047da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047de:	e7a8      	b.n	8004732 <_printf_i+0x152>
 80047e0:	462a      	mov	r2, r5
 80047e2:	4649      	mov	r1, r9
 80047e4:	4640      	mov	r0, r8
 80047e6:	6923      	ldr	r3, [r4, #16]
 80047e8:	47d0      	blx	sl
 80047ea:	3001      	adds	r0, #1
 80047ec:	d0ab      	beq.n	8004746 <_printf_i+0x166>
 80047ee:	6823      	ldr	r3, [r4, #0]
 80047f0:	079b      	lsls	r3, r3, #30
 80047f2:	d413      	bmi.n	800481c <_printf_i+0x23c>
 80047f4:	68e0      	ldr	r0, [r4, #12]
 80047f6:	9b03      	ldr	r3, [sp, #12]
 80047f8:	4298      	cmp	r0, r3
 80047fa:	bfb8      	it	lt
 80047fc:	4618      	movlt	r0, r3
 80047fe:	e7a4      	b.n	800474a <_printf_i+0x16a>
 8004800:	2301      	movs	r3, #1
 8004802:	4632      	mov	r2, r6
 8004804:	4649      	mov	r1, r9
 8004806:	4640      	mov	r0, r8
 8004808:	47d0      	blx	sl
 800480a:	3001      	adds	r0, #1
 800480c:	d09b      	beq.n	8004746 <_printf_i+0x166>
 800480e:	3501      	adds	r5, #1
 8004810:	68e3      	ldr	r3, [r4, #12]
 8004812:	9903      	ldr	r1, [sp, #12]
 8004814:	1a5b      	subs	r3, r3, r1
 8004816:	42ab      	cmp	r3, r5
 8004818:	dcf2      	bgt.n	8004800 <_printf_i+0x220>
 800481a:	e7eb      	b.n	80047f4 <_printf_i+0x214>
 800481c:	2500      	movs	r5, #0
 800481e:	f104 0619 	add.w	r6, r4, #25
 8004822:	e7f5      	b.n	8004810 <_printf_i+0x230>
 8004824:	08004b5d 	.word	0x08004b5d
 8004828:	08004b6e 	.word	0x08004b6e

0800482c <memchr>:
 800482c:	4603      	mov	r3, r0
 800482e:	b510      	push	{r4, lr}
 8004830:	b2c9      	uxtb	r1, r1
 8004832:	4402      	add	r2, r0
 8004834:	4293      	cmp	r3, r2
 8004836:	4618      	mov	r0, r3
 8004838:	d101      	bne.n	800483e <memchr+0x12>
 800483a:	2000      	movs	r0, #0
 800483c:	e003      	b.n	8004846 <memchr+0x1a>
 800483e:	7804      	ldrb	r4, [r0, #0]
 8004840:	3301      	adds	r3, #1
 8004842:	428c      	cmp	r4, r1
 8004844:	d1f6      	bne.n	8004834 <memchr+0x8>
 8004846:	bd10      	pop	{r4, pc}

08004848 <memcpy>:
 8004848:	440a      	add	r2, r1
 800484a:	4291      	cmp	r1, r2
 800484c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004850:	d100      	bne.n	8004854 <memcpy+0xc>
 8004852:	4770      	bx	lr
 8004854:	b510      	push	{r4, lr}
 8004856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800485a:	4291      	cmp	r1, r2
 800485c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004860:	d1f9      	bne.n	8004856 <memcpy+0xe>
 8004862:	bd10      	pop	{r4, pc}

08004864 <memmove>:
 8004864:	4288      	cmp	r0, r1
 8004866:	b510      	push	{r4, lr}
 8004868:	eb01 0402 	add.w	r4, r1, r2
 800486c:	d902      	bls.n	8004874 <memmove+0x10>
 800486e:	4284      	cmp	r4, r0
 8004870:	4623      	mov	r3, r4
 8004872:	d807      	bhi.n	8004884 <memmove+0x20>
 8004874:	1e43      	subs	r3, r0, #1
 8004876:	42a1      	cmp	r1, r4
 8004878:	d008      	beq.n	800488c <memmove+0x28>
 800487a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800487e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004882:	e7f8      	b.n	8004876 <memmove+0x12>
 8004884:	4601      	mov	r1, r0
 8004886:	4402      	add	r2, r0
 8004888:	428a      	cmp	r2, r1
 800488a:	d100      	bne.n	800488e <memmove+0x2a>
 800488c:	bd10      	pop	{r4, pc}
 800488e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004892:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004896:	e7f7      	b.n	8004888 <memmove+0x24>

08004898 <_free_r>:
 8004898:	b538      	push	{r3, r4, r5, lr}
 800489a:	4605      	mov	r5, r0
 800489c:	2900      	cmp	r1, #0
 800489e:	d040      	beq.n	8004922 <_free_r+0x8a>
 80048a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048a4:	1f0c      	subs	r4, r1, #4
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	bfb8      	it	lt
 80048aa:	18e4      	addlt	r4, r4, r3
 80048ac:	f000 f910 	bl	8004ad0 <__malloc_lock>
 80048b0:	4a1c      	ldr	r2, [pc, #112]	; (8004924 <_free_r+0x8c>)
 80048b2:	6813      	ldr	r3, [r2, #0]
 80048b4:	b933      	cbnz	r3, 80048c4 <_free_r+0x2c>
 80048b6:	6063      	str	r3, [r4, #4]
 80048b8:	6014      	str	r4, [r2, #0]
 80048ba:	4628      	mov	r0, r5
 80048bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048c0:	f000 b90c 	b.w	8004adc <__malloc_unlock>
 80048c4:	42a3      	cmp	r3, r4
 80048c6:	d908      	bls.n	80048da <_free_r+0x42>
 80048c8:	6820      	ldr	r0, [r4, #0]
 80048ca:	1821      	adds	r1, r4, r0
 80048cc:	428b      	cmp	r3, r1
 80048ce:	bf01      	itttt	eq
 80048d0:	6819      	ldreq	r1, [r3, #0]
 80048d2:	685b      	ldreq	r3, [r3, #4]
 80048d4:	1809      	addeq	r1, r1, r0
 80048d6:	6021      	streq	r1, [r4, #0]
 80048d8:	e7ed      	b.n	80048b6 <_free_r+0x1e>
 80048da:	461a      	mov	r2, r3
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	b10b      	cbz	r3, 80048e4 <_free_r+0x4c>
 80048e0:	42a3      	cmp	r3, r4
 80048e2:	d9fa      	bls.n	80048da <_free_r+0x42>
 80048e4:	6811      	ldr	r1, [r2, #0]
 80048e6:	1850      	adds	r0, r2, r1
 80048e8:	42a0      	cmp	r0, r4
 80048ea:	d10b      	bne.n	8004904 <_free_r+0x6c>
 80048ec:	6820      	ldr	r0, [r4, #0]
 80048ee:	4401      	add	r1, r0
 80048f0:	1850      	adds	r0, r2, r1
 80048f2:	4283      	cmp	r3, r0
 80048f4:	6011      	str	r1, [r2, #0]
 80048f6:	d1e0      	bne.n	80048ba <_free_r+0x22>
 80048f8:	6818      	ldr	r0, [r3, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	4401      	add	r1, r0
 80048fe:	6011      	str	r1, [r2, #0]
 8004900:	6053      	str	r3, [r2, #4]
 8004902:	e7da      	b.n	80048ba <_free_r+0x22>
 8004904:	d902      	bls.n	800490c <_free_r+0x74>
 8004906:	230c      	movs	r3, #12
 8004908:	602b      	str	r3, [r5, #0]
 800490a:	e7d6      	b.n	80048ba <_free_r+0x22>
 800490c:	6820      	ldr	r0, [r4, #0]
 800490e:	1821      	adds	r1, r4, r0
 8004910:	428b      	cmp	r3, r1
 8004912:	bf01      	itttt	eq
 8004914:	6819      	ldreq	r1, [r3, #0]
 8004916:	685b      	ldreq	r3, [r3, #4]
 8004918:	1809      	addeq	r1, r1, r0
 800491a:	6021      	streq	r1, [r4, #0]
 800491c:	6063      	str	r3, [r4, #4]
 800491e:	6054      	str	r4, [r2, #4]
 8004920:	e7cb      	b.n	80048ba <_free_r+0x22>
 8004922:	bd38      	pop	{r3, r4, r5, pc}
 8004924:	20000260 	.word	0x20000260

08004928 <sbrk_aligned>:
 8004928:	b570      	push	{r4, r5, r6, lr}
 800492a:	4e0e      	ldr	r6, [pc, #56]	; (8004964 <sbrk_aligned+0x3c>)
 800492c:	460c      	mov	r4, r1
 800492e:	6831      	ldr	r1, [r6, #0]
 8004930:	4605      	mov	r5, r0
 8004932:	b911      	cbnz	r1, 800493a <sbrk_aligned+0x12>
 8004934:	f000 f8bc 	bl	8004ab0 <_sbrk_r>
 8004938:	6030      	str	r0, [r6, #0]
 800493a:	4621      	mov	r1, r4
 800493c:	4628      	mov	r0, r5
 800493e:	f000 f8b7 	bl	8004ab0 <_sbrk_r>
 8004942:	1c43      	adds	r3, r0, #1
 8004944:	d00a      	beq.n	800495c <sbrk_aligned+0x34>
 8004946:	1cc4      	adds	r4, r0, #3
 8004948:	f024 0403 	bic.w	r4, r4, #3
 800494c:	42a0      	cmp	r0, r4
 800494e:	d007      	beq.n	8004960 <sbrk_aligned+0x38>
 8004950:	1a21      	subs	r1, r4, r0
 8004952:	4628      	mov	r0, r5
 8004954:	f000 f8ac 	bl	8004ab0 <_sbrk_r>
 8004958:	3001      	adds	r0, #1
 800495a:	d101      	bne.n	8004960 <sbrk_aligned+0x38>
 800495c:	f04f 34ff 	mov.w	r4, #4294967295
 8004960:	4620      	mov	r0, r4
 8004962:	bd70      	pop	{r4, r5, r6, pc}
 8004964:	20000264 	.word	0x20000264

08004968 <_malloc_r>:
 8004968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800496c:	1ccd      	adds	r5, r1, #3
 800496e:	f025 0503 	bic.w	r5, r5, #3
 8004972:	3508      	adds	r5, #8
 8004974:	2d0c      	cmp	r5, #12
 8004976:	bf38      	it	cc
 8004978:	250c      	movcc	r5, #12
 800497a:	2d00      	cmp	r5, #0
 800497c:	4607      	mov	r7, r0
 800497e:	db01      	blt.n	8004984 <_malloc_r+0x1c>
 8004980:	42a9      	cmp	r1, r5
 8004982:	d905      	bls.n	8004990 <_malloc_r+0x28>
 8004984:	230c      	movs	r3, #12
 8004986:	2600      	movs	r6, #0
 8004988:	603b      	str	r3, [r7, #0]
 800498a:	4630      	mov	r0, r6
 800498c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004990:	4e2e      	ldr	r6, [pc, #184]	; (8004a4c <_malloc_r+0xe4>)
 8004992:	f000 f89d 	bl	8004ad0 <__malloc_lock>
 8004996:	6833      	ldr	r3, [r6, #0]
 8004998:	461c      	mov	r4, r3
 800499a:	bb34      	cbnz	r4, 80049ea <_malloc_r+0x82>
 800499c:	4629      	mov	r1, r5
 800499e:	4638      	mov	r0, r7
 80049a0:	f7ff ffc2 	bl	8004928 <sbrk_aligned>
 80049a4:	1c43      	adds	r3, r0, #1
 80049a6:	4604      	mov	r4, r0
 80049a8:	d14d      	bne.n	8004a46 <_malloc_r+0xde>
 80049aa:	6834      	ldr	r4, [r6, #0]
 80049ac:	4626      	mov	r6, r4
 80049ae:	2e00      	cmp	r6, #0
 80049b0:	d140      	bne.n	8004a34 <_malloc_r+0xcc>
 80049b2:	6823      	ldr	r3, [r4, #0]
 80049b4:	4631      	mov	r1, r6
 80049b6:	4638      	mov	r0, r7
 80049b8:	eb04 0803 	add.w	r8, r4, r3
 80049bc:	f000 f878 	bl	8004ab0 <_sbrk_r>
 80049c0:	4580      	cmp	r8, r0
 80049c2:	d13a      	bne.n	8004a3a <_malloc_r+0xd2>
 80049c4:	6821      	ldr	r1, [r4, #0]
 80049c6:	3503      	adds	r5, #3
 80049c8:	1a6d      	subs	r5, r5, r1
 80049ca:	f025 0503 	bic.w	r5, r5, #3
 80049ce:	3508      	adds	r5, #8
 80049d0:	2d0c      	cmp	r5, #12
 80049d2:	bf38      	it	cc
 80049d4:	250c      	movcc	r5, #12
 80049d6:	4638      	mov	r0, r7
 80049d8:	4629      	mov	r1, r5
 80049da:	f7ff ffa5 	bl	8004928 <sbrk_aligned>
 80049de:	3001      	adds	r0, #1
 80049e0:	d02b      	beq.n	8004a3a <_malloc_r+0xd2>
 80049e2:	6823      	ldr	r3, [r4, #0]
 80049e4:	442b      	add	r3, r5
 80049e6:	6023      	str	r3, [r4, #0]
 80049e8:	e00e      	b.n	8004a08 <_malloc_r+0xa0>
 80049ea:	6822      	ldr	r2, [r4, #0]
 80049ec:	1b52      	subs	r2, r2, r5
 80049ee:	d41e      	bmi.n	8004a2e <_malloc_r+0xc6>
 80049f0:	2a0b      	cmp	r2, #11
 80049f2:	d916      	bls.n	8004a22 <_malloc_r+0xba>
 80049f4:	1961      	adds	r1, r4, r5
 80049f6:	42a3      	cmp	r3, r4
 80049f8:	6025      	str	r5, [r4, #0]
 80049fa:	bf18      	it	ne
 80049fc:	6059      	strne	r1, [r3, #4]
 80049fe:	6863      	ldr	r3, [r4, #4]
 8004a00:	bf08      	it	eq
 8004a02:	6031      	streq	r1, [r6, #0]
 8004a04:	5162      	str	r2, [r4, r5]
 8004a06:	604b      	str	r3, [r1, #4]
 8004a08:	4638      	mov	r0, r7
 8004a0a:	f104 060b 	add.w	r6, r4, #11
 8004a0e:	f000 f865 	bl	8004adc <__malloc_unlock>
 8004a12:	f026 0607 	bic.w	r6, r6, #7
 8004a16:	1d23      	adds	r3, r4, #4
 8004a18:	1af2      	subs	r2, r6, r3
 8004a1a:	d0b6      	beq.n	800498a <_malloc_r+0x22>
 8004a1c:	1b9b      	subs	r3, r3, r6
 8004a1e:	50a3      	str	r3, [r4, r2]
 8004a20:	e7b3      	b.n	800498a <_malloc_r+0x22>
 8004a22:	6862      	ldr	r2, [r4, #4]
 8004a24:	42a3      	cmp	r3, r4
 8004a26:	bf0c      	ite	eq
 8004a28:	6032      	streq	r2, [r6, #0]
 8004a2a:	605a      	strne	r2, [r3, #4]
 8004a2c:	e7ec      	b.n	8004a08 <_malloc_r+0xa0>
 8004a2e:	4623      	mov	r3, r4
 8004a30:	6864      	ldr	r4, [r4, #4]
 8004a32:	e7b2      	b.n	800499a <_malloc_r+0x32>
 8004a34:	4634      	mov	r4, r6
 8004a36:	6876      	ldr	r6, [r6, #4]
 8004a38:	e7b9      	b.n	80049ae <_malloc_r+0x46>
 8004a3a:	230c      	movs	r3, #12
 8004a3c:	4638      	mov	r0, r7
 8004a3e:	603b      	str	r3, [r7, #0]
 8004a40:	f000 f84c 	bl	8004adc <__malloc_unlock>
 8004a44:	e7a1      	b.n	800498a <_malloc_r+0x22>
 8004a46:	6025      	str	r5, [r4, #0]
 8004a48:	e7de      	b.n	8004a08 <_malloc_r+0xa0>
 8004a4a:	bf00      	nop
 8004a4c:	20000260 	.word	0x20000260

08004a50 <_realloc_r>:
 8004a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a54:	4680      	mov	r8, r0
 8004a56:	4614      	mov	r4, r2
 8004a58:	460e      	mov	r6, r1
 8004a5a:	b921      	cbnz	r1, 8004a66 <_realloc_r+0x16>
 8004a5c:	4611      	mov	r1, r2
 8004a5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a62:	f7ff bf81 	b.w	8004968 <_malloc_r>
 8004a66:	b92a      	cbnz	r2, 8004a74 <_realloc_r+0x24>
 8004a68:	f7ff ff16 	bl	8004898 <_free_r>
 8004a6c:	4625      	mov	r5, r4
 8004a6e:	4628      	mov	r0, r5
 8004a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a74:	f000 f838 	bl	8004ae8 <_malloc_usable_size_r>
 8004a78:	4284      	cmp	r4, r0
 8004a7a:	4607      	mov	r7, r0
 8004a7c:	d802      	bhi.n	8004a84 <_realloc_r+0x34>
 8004a7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a82:	d812      	bhi.n	8004aaa <_realloc_r+0x5a>
 8004a84:	4621      	mov	r1, r4
 8004a86:	4640      	mov	r0, r8
 8004a88:	f7ff ff6e 	bl	8004968 <_malloc_r>
 8004a8c:	4605      	mov	r5, r0
 8004a8e:	2800      	cmp	r0, #0
 8004a90:	d0ed      	beq.n	8004a6e <_realloc_r+0x1e>
 8004a92:	42bc      	cmp	r4, r7
 8004a94:	4622      	mov	r2, r4
 8004a96:	4631      	mov	r1, r6
 8004a98:	bf28      	it	cs
 8004a9a:	463a      	movcs	r2, r7
 8004a9c:	f7ff fed4 	bl	8004848 <memcpy>
 8004aa0:	4631      	mov	r1, r6
 8004aa2:	4640      	mov	r0, r8
 8004aa4:	f7ff fef8 	bl	8004898 <_free_r>
 8004aa8:	e7e1      	b.n	8004a6e <_realloc_r+0x1e>
 8004aaa:	4635      	mov	r5, r6
 8004aac:	e7df      	b.n	8004a6e <_realloc_r+0x1e>
	...

08004ab0 <_sbrk_r>:
 8004ab0:	b538      	push	{r3, r4, r5, lr}
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	4d05      	ldr	r5, [pc, #20]	; (8004acc <_sbrk_r+0x1c>)
 8004ab6:	4604      	mov	r4, r0
 8004ab8:	4608      	mov	r0, r1
 8004aba:	602b      	str	r3, [r5, #0]
 8004abc:	f7fc feec 	bl	8001898 <_sbrk>
 8004ac0:	1c43      	adds	r3, r0, #1
 8004ac2:	d102      	bne.n	8004aca <_sbrk_r+0x1a>
 8004ac4:	682b      	ldr	r3, [r5, #0]
 8004ac6:	b103      	cbz	r3, 8004aca <_sbrk_r+0x1a>
 8004ac8:	6023      	str	r3, [r4, #0]
 8004aca:	bd38      	pop	{r3, r4, r5, pc}
 8004acc:	20000268 	.word	0x20000268

08004ad0 <__malloc_lock>:
 8004ad0:	4801      	ldr	r0, [pc, #4]	; (8004ad8 <__malloc_lock+0x8>)
 8004ad2:	f000 b811 	b.w	8004af8 <__retarget_lock_acquire_recursive>
 8004ad6:	bf00      	nop
 8004ad8:	2000026c 	.word	0x2000026c

08004adc <__malloc_unlock>:
 8004adc:	4801      	ldr	r0, [pc, #4]	; (8004ae4 <__malloc_unlock+0x8>)
 8004ade:	f000 b80c 	b.w	8004afa <__retarget_lock_release_recursive>
 8004ae2:	bf00      	nop
 8004ae4:	2000026c 	.word	0x2000026c

08004ae8 <_malloc_usable_size_r>:
 8004ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004aec:	1f18      	subs	r0, r3, #4
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	bfbc      	itt	lt
 8004af2:	580b      	ldrlt	r3, [r1, r0]
 8004af4:	18c0      	addlt	r0, r0, r3
 8004af6:	4770      	bx	lr

08004af8 <__retarget_lock_acquire_recursive>:
 8004af8:	4770      	bx	lr

08004afa <__retarget_lock_release_recursive>:
 8004afa:	4770      	bx	lr

08004afc <_init>:
 8004afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afe:	bf00      	nop
 8004b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b02:	bc08      	pop	{r3}
 8004b04:	469e      	mov	lr, r3
 8004b06:	4770      	bx	lr

08004b08 <_fini>:
 8004b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0a:	bf00      	nop
 8004b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b0e:	bc08      	pop	{r3}
 8004b10:	469e      	mov	lr, r3
 8004b12:	4770      	bx	lr
