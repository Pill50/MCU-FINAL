
PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004930  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004a3c  08004a3c  00014a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004aa8  08004aa8  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  08004aa8  08004aa8  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004aa8  08004aa8  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004aa8  08004aa8  00014aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004aac  08004aac  00014aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08004ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  200000a8  08004b58  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08004b58  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bccf  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f8a  00000000  00000000  0002bda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  0002dd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  0002eaa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f8d  00000000  00000000  0002f720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da8b  00000000  00000000  000476ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ad8d  00000000  00000000  00055138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dfec5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a94  00000000  00000000  000dff18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a8 	.word	0x200000a8
 8000128:	00000000 	.word	0x00000000
 800012c:	08004a24 	.word	0x08004a24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ac 	.word	0x200000ac
 8000148:	08004a24 	.word	0x08004a24

0800014c <setTimer1>:
int counter4;
int timer4_flag;

int TIMER_CYCLE=10;

void setTimer1(int duration){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	counter1=duration/TIMER_CYCLE;
 8000154:	4b07      	ldr	r3, [pc, #28]	; (8000174 <setTimer1+0x28>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	687a      	ldr	r2, [r7, #4]
 800015a:	fb92 f3f3 	sdiv	r3, r2, r3
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <setTimer1+0x2c>)
 8000160:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 8000162:	4b06      	ldr	r3, [pc, #24]	; (800017c <setTimer1+0x30>)
 8000164:	2200      	movs	r2, #0
 8000166:	601a      	str	r2, [r3, #0]
}
 8000168:	bf00      	nop
 800016a:	370c      	adds	r7, #12
 800016c:	46bd      	mov	sp, r7
 800016e:	bc80      	pop	{r7}
 8000170:	4770      	bx	lr
 8000172:	bf00      	nop
 8000174:	20000000 	.word	0x20000000
 8000178:	200000c4 	.word	0x200000c4
 800017c:	200000c8 	.word	0x200000c8

08000180 <setTimer2>:

void setTimer2(int duration){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	counter2=duration/TIMER_CYCLE;
 8000188:	4b07      	ldr	r3, [pc, #28]	; (80001a8 <setTimer2+0x28>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	687a      	ldr	r2, [r7, #4]
 800018e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000192:	4a06      	ldr	r2, [pc, #24]	; (80001ac <setTimer2+0x2c>)
 8000194:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 8000196:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <setTimer2+0x30>)
 8000198:	2200      	movs	r2, #0
 800019a:	601a      	str	r2, [r3, #0]
}
 800019c:	bf00      	nop
 800019e:	370c      	adds	r7, #12
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr
 80001a6:	bf00      	nop
 80001a8:	20000000 	.word	0x20000000
 80001ac:	200000cc 	.word	0x200000cc
 80001b0:	200000d0 	.word	0x200000d0

080001b4 <setTimer3>:

void setTimer3(int duration){
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
	counter3=duration/TIMER_CYCLE;
 80001bc:	4b07      	ldr	r3, [pc, #28]	; (80001dc <setTimer3+0x28>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	687a      	ldr	r2, [r7, #4]
 80001c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80001c6:	4a06      	ldr	r2, [pc, #24]	; (80001e0 <setTimer3+0x2c>)
 80001c8:	6013      	str	r3, [r2, #0]
	timer3_flag=0;
 80001ca:	4b06      	ldr	r3, [pc, #24]	; (80001e4 <setTimer3+0x30>)
 80001cc:	2200      	movs	r2, #0
 80001ce:	601a      	str	r2, [r3, #0]
}
 80001d0:	bf00      	nop
 80001d2:	370c      	adds	r7, #12
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	20000000 	.word	0x20000000
 80001e0:	200000d4 	.word	0x200000d4
 80001e4:	200000d8 	.word	0x200000d8

080001e8 <setTimer4>:

void setTimer4(int duration){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	counter4=duration/TIMER_CYCLE;
 80001f0:	4b07      	ldr	r3, [pc, #28]	; (8000210 <setTimer4+0x28>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	687a      	ldr	r2, [r7, #4]
 80001f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80001fa:	4a06      	ldr	r2, [pc, #24]	; (8000214 <setTimer4+0x2c>)
 80001fc:	6013      	str	r3, [r2, #0]
	timer4_flag=0;
 80001fe:	4b06      	ldr	r3, [pc, #24]	; (8000218 <setTimer4+0x30>)
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	20000000 	.word	0x20000000
 8000214:	200000dc 	.word	0x200000dc
 8000218:	200000e0 	.word	0x200000e0

0800021c <TimerRun>:

void TimerRun(){
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	if(counter1>0){
 8000220:	4b21      	ldr	r3, [pc, #132]	; (80002a8 <TimerRun+0x8c>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	2b00      	cmp	r3, #0
 8000226:	dd0b      	ble.n	8000240 <TimerRun+0x24>
		counter1--;
 8000228:	4b1f      	ldr	r3, [pc, #124]	; (80002a8 <TimerRun+0x8c>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	3b01      	subs	r3, #1
 800022e:	4a1e      	ldr	r2, [pc, #120]	; (80002a8 <TimerRun+0x8c>)
 8000230:	6013      	str	r3, [r2, #0]
		if(counter1<=0){
 8000232:	4b1d      	ldr	r3, [pc, #116]	; (80002a8 <TimerRun+0x8c>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	2b00      	cmp	r3, #0
 8000238:	dc02      	bgt.n	8000240 <TimerRun+0x24>
			timer1_flag=1;
 800023a:	4b1c      	ldr	r3, [pc, #112]	; (80002ac <TimerRun+0x90>)
 800023c:	2201      	movs	r2, #1
 800023e:	601a      	str	r2, [r3, #0]
		}
	}

	if(counter2>0){
 8000240:	4b1b      	ldr	r3, [pc, #108]	; (80002b0 <TimerRun+0x94>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	2b00      	cmp	r3, #0
 8000246:	dd0b      	ble.n	8000260 <TimerRun+0x44>
		counter2--;
 8000248:	4b19      	ldr	r3, [pc, #100]	; (80002b0 <TimerRun+0x94>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	3b01      	subs	r3, #1
 800024e:	4a18      	ldr	r2, [pc, #96]	; (80002b0 <TimerRun+0x94>)
 8000250:	6013      	str	r3, [r2, #0]
		if(counter2<=0){
 8000252:	4b17      	ldr	r3, [pc, #92]	; (80002b0 <TimerRun+0x94>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	dc02      	bgt.n	8000260 <TimerRun+0x44>
			timer2_flag=1;
 800025a:	4b16      	ldr	r3, [pc, #88]	; (80002b4 <TimerRun+0x98>)
 800025c:	2201      	movs	r2, #1
 800025e:	601a      	str	r2, [r3, #0]
		}
	}

	if(counter3>0){
 8000260:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <TimerRun+0x9c>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	2b00      	cmp	r3, #0
 8000266:	dd0b      	ble.n	8000280 <TimerRun+0x64>
		counter3--;
 8000268:	4b13      	ldr	r3, [pc, #76]	; (80002b8 <TimerRun+0x9c>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	3b01      	subs	r3, #1
 800026e:	4a12      	ldr	r2, [pc, #72]	; (80002b8 <TimerRun+0x9c>)
 8000270:	6013      	str	r3, [r2, #0]
		if(counter3<=0){
 8000272:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <TimerRun+0x9c>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	2b00      	cmp	r3, #0
 8000278:	dc02      	bgt.n	8000280 <TimerRun+0x64>
			timer3_flag=1;
 800027a:	4b10      	ldr	r3, [pc, #64]	; (80002bc <TimerRun+0xa0>)
 800027c:	2201      	movs	r2, #1
 800027e:	601a      	str	r2, [r3, #0]
		}
	}

	if(counter4>0){
 8000280:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <TimerRun+0xa4>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	dd0b      	ble.n	80002a0 <TimerRun+0x84>
		counter4--;
 8000288:	4b0d      	ldr	r3, [pc, #52]	; (80002c0 <TimerRun+0xa4>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	3b01      	subs	r3, #1
 800028e:	4a0c      	ldr	r2, [pc, #48]	; (80002c0 <TimerRun+0xa4>)
 8000290:	6013      	str	r3, [r2, #0]
		if(counter4<=0){
 8000292:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <TimerRun+0xa4>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	2b00      	cmp	r3, #0
 8000298:	dc02      	bgt.n	80002a0 <TimerRun+0x84>
			timer4_flag=1;
 800029a:	4b0a      	ldr	r3, [pc, #40]	; (80002c4 <TimerRun+0xa8>)
 800029c:	2201      	movs	r2, #1
 800029e:	601a      	str	r2, [r3, #0]
		}
	}
}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	200000c4 	.word	0x200000c4
 80002ac:	200000c8 	.word	0x200000c8
 80002b0:	200000cc 	.word	0x200000cc
 80002b4:	200000d0 	.word	0x200000d0
 80002b8:	200000d4 	.word	0x200000d4
 80002bc:	200000d8 	.word	0x200000d8
 80002c0:	200000dc 	.word	0x200000dc
 80002c4:	200000e0 	.word	0x200000e0

080002c8 <button1_reading>:
/* 	BUTTON1 PARAMETER START */
int debounceButton1Buffer2=NORMAL_STATE;
int debounceButton1Buffer1=NORMAL_STATE;
int button1Buffer=NORMAL_STATE;
/* 	BUTTON1 PARAMETER END */
void button1_reading(){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	debounceButton1Buffer2 =debounceButton1Buffer1;
 80002cc:	4b0b      	ldr	r3, [pc, #44]	; (80002fc <button1_reading+0x34>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a0b      	ldr	r2, [pc, #44]	; (8000300 <button1_reading+0x38>)
 80002d2:	6013      	str	r3, [r2, #0]
	debounceButton1Buffer1 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80002d4:	2102      	movs	r1, #2
 80002d6:	480b      	ldr	r0, [pc, #44]	; (8000304 <button1_reading+0x3c>)
 80002d8:	f001 fe78 	bl	8001fcc <HAL_GPIO_ReadPin>
 80002dc:	4603      	mov	r3, r0
 80002de:	461a      	mov	r2, r3
 80002e0:	4b06      	ldr	r3, [pc, #24]	; (80002fc <button1_reading+0x34>)
 80002e2:	601a      	str	r2, [r3, #0]
	if(debounceButton1Buffer1 == debounceButton1Buffer2)
 80002e4:	4b05      	ldr	r3, [pc, #20]	; (80002fc <button1_reading+0x34>)
 80002e6:	681a      	ldr	r2, [r3, #0]
 80002e8:	4b05      	ldr	r3, [pc, #20]	; (8000300 <button1_reading+0x38>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	d103      	bne.n	80002f8 <button1_reading+0x30>
		button1Buffer = debounceButton1Buffer1;
 80002f0:	4b02      	ldr	r3, [pc, #8]	; (80002fc <button1_reading+0x34>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a04      	ldr	r2, [pc, #16]	; (8000308 <button1_reading+0x40>)
 80002f6:	6013      	str	r3, [r2, #0]
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	20000008 	.word	0x20000008
 8000300:	20000004 	.word	0x20000004
 8000304:	40010800 	.word	0x40010800
 8000308:	2000000c 	.word	0x2000000c

0800030c <button2_reading>:
int debounceButton2Buffer1=NORMAL_STATE;
int button2Buffer=NORMAL_STATE;
int counterForButton2Press1s=1000;
int flagForButton2Press1s=0;
/* 	BUTTON2 PARAMETER END */
void button2_reading(){
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	debounceButton2Buffer2 =debounceButton2Buffer1;
 8000310:	4b1a      	ldr	r3, [pc, #104]	; (800037c <button2_reading+0x70>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a1a      	ldr	r2, [pc, #104]	; (8000380 <button2_reading+0x74>)
 8000316:	6013      	str	r3, [r2, #0]
	debounceButton2Buffer1 = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8000318:	2110      	movs	r1, #16
 800031a:	481a      	ldr	r0, [pc, #104]	; (8000384 <button2_reading+0x78>)
 800031c:	f001 fe56 	bl	8001fcc <HAL_GPIO_ReadPin>
 8000320:	4603      	mov	r3, r0
 8000322:	461a      	mov	r2, r3
 8000324:	4b15      	ldr	r3, [pc, #84]	; (800037c <button2_reading+0x70>)
 8000326:	601a      	str	r2, [r3, #0]
	if(debounceButton2Buffer1 == debounceButton2Buffer2)
 8000328:	4b14      	ldr	r3, [pc, #80]	; (800037c <button2_reading+0x70>)
 800032a:	681a      	ldr	r2, [r3, #0]
 800032c:	4b14      	ldr	r3, [pc, #80]	; (8000380 <button2_reading+0x74>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	429a      	cmp	r2, r3
 8000332:	d103      	bne.n	800033c <button2_reading+0x30>
		button2Buffer = debounceButton2Buffer1;
 8000334:	4b11      	ldr	r3, [pc, #68]	; (800037c <button2_reading+0x70>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a13      	ldr	r2, [pc, #76]	; (8000388 <button2_reading+0x7c>)
 800033a:	6013      	str	r3, [r2, #0]

	if(button2Buffer == PRESSED_STATE){
 800033c:	4b12      	ldr	r3, [pc, #72]	; (8000388 <button2_reading+0x7c>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d10d      	bne.n	8000360 <button2_reading+0x54>
	//if a button is pressed, we start counting
		if(counterForButton2Press1s >0){
 8000344:	4b11      	ldr	r3, [pc, #68]	; (800038c <button2_reading+0x80>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2b00      	cmp	r3, #0
 800034a:	dd05      	ble.n	8000358 <button2_reading+0x4c>
			counterForButton2Press1s=counterForButton2Press1s-TIMER_CYCLE;
 800034c:	4b0f      	ldr	r3, [pc, #60]	; (800038c <button2_reading+0x80>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	3b0a      	subs	r3, #10
 8000352:	4a0e      	ldr	r2, [pc, #56]	; (800038c <button2_reading+0x80>)
 8000354:	6013      	str	r3, [r2, #0]
		}
	}else if(button2Buffer == NORMAL_STATE){
		counterForButton2Press1s = 1000;
		flagForButton2Press1s = 0;
	}
}
 8000356:	e00e      	b.n	8000376 <button2_reading+0x6a>
			flagForButton2Press1s = 1;
 8000358:	4b0d      	ldr	r3, [pc, #52]	; (8000390 <button2_reading+0x84>)
 800035a:	2201      	movs	r2, #1
 800035c:	601a      	str	r2, [r3, #0]
}
 800035e:	e00a      	b.n	8000376 <button2_reading+0x6a>
	}else if(button2Buffer == NORMAL_STATE){
 8000360:	4b09      	ldr	r3, [pc, #36]	; (8000388 <button2_reading+0x7c>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	2b01      	cmp	r3, #1
 8000366:	d106      	bne.n	8000376 <button2_reading+0x6a>
		counterForButton2Press1s = 1000;
 8000368:	4b08      	ldr	r3, [pc, #32]	; (800038c <button2_reading+0x80>)
 800036a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800036e:	601a      	str	r2, [r3, #0]
		flagForButton2Press1s = 0;
 8000370:	4b07      	ldr	r3, [pc, #28]	; (8000390 <button2_reading+0x84>)
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	20000014 	.word	0x20000014
 8000380:	20000010 	.word	0x20000010
 8000384:	40010800 	.word	0x40010800
 8000388:	20000018 	.word	0x20000018
 800038c:	2000001c 	.word	0x2000001c
 8000390:	200000e4 	.word	0x200000e4

08000394 <button3_reading>:
/* 	BUTTON3 PARAMETER START */
int debounceButton3Buffer2=NORMAL_STATE;
int debounceButton3Buffer1=NORMAL_STATE;
int button3Buffer=NORMAL_STATE;
/* 	BUTTON3 PARAMETER END */
void button3_reading(){
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
	debounceButton3Buffer2 =debounceButton3Buffer1;
 8000398:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <button3_reading+0x34>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a0b      	ldr	r2, [pc, #44]	; (80003cc <button3_reading+0x38>)
 800039e:	6013      	str	r3, [r2, #0]
	debounceButton3Buffer1 = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 80003a0:	2101      	movs	r1, #1
 80003a2:	480b      	ldr	r0, [pc, #44]	; (80003d0 <button3_reading+0x3c>)
 80003a4:	f001 fe12 	bl	8001fcc <HAL_GPIO_ReadPin>
 80003a8:	4603      	mov	r3, r0
 80003aa:	461a      	mov	r2, r3
 80003ac:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <button3_reading+0x34>)
 80003ae:	601a      	str	r2, [r3, #0]
	if(debounceButton3Buffer1 == debounceButton3Buffer2)
 80003b0:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <button3_reading+0x34>)
 80003b2:	681a      	ldr	r2, [r3, #0]
 80003b4:	4b05      	ldr	r3, [pc, #20]	; (80003cc <button3_reading+0x38>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d103      	bne.n	80003c4 <button3_reading+0x30>
		button3Buffer = debounceButton3Buffer1;
 80003bc:	4b02      	ldr	r3, [pc, #8]	; (80003c8 <button3_reading+0x34>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a04      	ldr	r2, [pc, #16]	; (80003d4 <button3_reading+0x40>)
 80003c2:	6013      	str	r3, [r2, #0]
}
 80003c4:	bf00      	nop
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	20000024 	.word	0x20000024
 80003cc:	20000020 	.word	0x20000020
 80003d0:	40010c00 	.word	0x40010c00
 80003d4:	20000028 	.word	0x20000028

080003d8 <button4_reading>:
/* 	BUTTON4 PARAMETER START */
int debounceButton4Buffer2=NORMAL_STATE;
int debounceButton4Buffer1=NORMAL_STATE;
int button4Buffer=NORMAL_STATE;
/* 	BUTTON4 PARAMETER END */
void button4_reading(){
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	debounceButton4Buffer2 =debounceButton4Buffer1;
 80003dc:	4b0b      	ldr	r3, [pc, #44]	; (800040c <button4_reading+0x34>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a0b      	ldr	r2, [pc, #44]	; (8000410 <button4_reading+0x38>)
 80003e2:	6013      	str	r3, [r2, #0]
	debounceButton4Buffer1 = HAL_GPIO_ReadPin(Button4_GPIO_Port, Button4_Pin);
 80003e4:	2101      	movs	r1, #1
 80003e6:	480b      	ldr	r0, [pc, #44]	; (8000414 <button4_reading+0x3c>)
 80003e8:	f001 fdf0 	bl	8001fcc <HAL_GPIO_ReadPin>
 80003ec:	4603      	mov	r3, r0
 80003ee:	461a      	mov	r2, r3
 80003f0:	4b06      	ldr	r3, [pc, #24]	; (800040c <button4_reading+0x34>)
 80003f2:	601a      	str	r2, [r3, #0]
	if(debounceButton4Buffer1 == debounceButton4Buffer2)
 80003f4:	4b05      	ldr	r3, [pc, #20]	; (800040c <button4_reading+0x34>)
 80003f6:	681a      	ldr	r2, [r3, #0]
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <button4_reading+0x38>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	429a      	cmp	r2, r3
 80003fe:	d103      	bne.n	8000408 <button4_reading+0x30>
		button4Buffer = debounceButton4Buffer1;
 8000400:	4b02      	ldr	r3, [pc, #8]	; (800040c <button4_reading+0x34>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a04      	ldr	r2, [pc, #16]	; (8000418 <button4_reading+0x40>)
 8000406:	6013      	str	r3, [r2, #0]
}
 8000408:	bf00      	nop
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20000030 	.word	0x20000030
 8000410:	2000002c 	.word	0x2000002c
 8000414:	40010800 	.word	0x40010800
 8000418:	20000034 	.word	0x20000034

0800041c <button1_pressed>:

int button1_pressed(){
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
	return (button1Buffer == PRESSED_STATE);
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <button1_pressed+0x1c>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	2b00      	cmp	r3, #0
 8000426:	bf0c      	ite	eq
 8000428:	2301      	moveq	r3, #1
 800042a:	2300      	movne	r3, #0
 800042c:	b2db      	uxtb	r3, r3
}
 800042e:	4618      	mov	r0, r3
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	2000000c 	.word	0x2000000c

0800043c <button2_pressed>:

int button2_pressed(){
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
	return (button2Buffer == PRESSED_STATE);
 8000440:	4b05      	ldr	r3, [pc, #20]	; (8000458 <button2_pressed+0x1c>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	bf0c      	ite	eq
 8000448:	2301      	moveq	r3, #1
 800044a:	2300      	movne	r3, #0
 800044c:	b2db      	uxtb	r3, r3
}
 800044e:	4618      	mov	r0, r3
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	20000018 	.word	0x20000018

0800045c <button2_pressed_1s>:
int button2_pressed_1s(){
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
	return (flagForButton2Press1s == 1);
 8000460:	4b05      	ldr	r3, [pc, #20]	; (8000478 <button2_pressed_1s+0x1c>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	bf0c      	ite	eq
 8000468:	2301      	moveq	r3, #1
 800046a:	2300      	movne	r3, #0
 800046c:	b2db      	uxtb	r3, r3
}
 800046e:	4618      	mov	r0, r3
 8000470:	46bd      	mov	sp, r7
 8000472:	bc80      	pop	{r7}
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	200000e4 	.word	0x200000e4

0800047c <button3_pressed>:

int button3_pressed(){
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
	return (button3Buffer == PRESSED_STATE);
 8000480:	4b05      	ldr	r3, [pc, #20]	; (8000498 <button3_pressed+0x1c>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2b00      	cmp	r3, #0
 8000486:	bf0c      	ite	eq
 8000488:	2301      	moveq	r3, #1
 800048a:	2300      	movne	r3, #0
 800048c:	b2db      	uxtb	r3, r3
}
 800048e:	4618      	mov	r0, r3
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	20000028 	.word	0x20000028

0800049c <button4_pressed>:

int button4_pressed(){
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
	return (button4Buffer == PRESSED_STATE);
 80004a0:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <button4_pressed+0x1c>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	bf0c      	ite	eq
 80004a8:	2301      	moveq	r3, #1
 80004aa:	2300      	movne	r3, #0
 80004ac:	b2db      	uxtb	r3, r3
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	20000034 	.word	0x20000034

080004bc <fsm_for_input_processing>:
void turnOff2();
void ToggleRED();
void ToggleGREEN();
void ToggleYELLOW();

void fsm_for_input_processing(UART_HandleTypeDef*huart,TIM_HandleTypeDef*htim3){
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	6039      	str	r1, [r7, #0]
	switch(state){
 80004c6:	4b8e      	ldr	r3, [pc, #568]	; (8000700 <fsm_for_input_processing+0x244>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	2b07      	cmp	r3, #7
 80004cc:	f200 8432 	bhi.w	8000d34 <fsm_for_input_processing+0x878>
 80004d0:	a201      	add	r2, pc, #4	; (adr r2, 80004d8 <fsm_for_input_processing+0x1c>)
 80004d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004d6:	bf00      	nop
 80004d8:	080004f9 	.word	0x080004f9
 80004dc:	08000591 	.word	0x08000591
 80004e0:	080007a7 	.word	0x080007a7
 80004e4:	08000891 	.word	0x08000891
 80004e8:	0800097b 	.word	0x0800097b
 80004ec:	08000ab5 	.word	0x08000ab5
 80004f0:	08000b9b 	.word	0x08000b9b
 80004f4:	08000cd5 	.word	0x08000cd5
	case INIT:
		print=0;
 80004f8:	4b82      	ldr	r3, [pc, #520]	; (8000704 <fsm_for_input_processing+0x248>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
		/* INIT PORT OUTPUT START */
		turnOffSingleLed();
 80004fe:	f000 fd15 	bl	8000f2c <turnOffSingleLed>
		/* INIT PORT OUTPUT END */

		/* INITIALIZE TEMPORARY DURATION START */
		red_temp_dur=RED_DURATION;
 8000502:	4b81      	ldr	r3, [pc, #516]	; (8000708 <fsm_for_input_processing+0x24c>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a81      	ldr	r2, [pc, #516]	; (800070c <fsm_for_input_processing+0x250>)
 8000508:	6013      	str	r3, [r2, #0]
		yellow_temp_dur=YELLOW_DURATION;
 800050a:	4b81      	ldr	r3, [pc, #516]	; (8000710 <fsm_for_input_processing+0x254>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a81      	ldr	r2, [pc, #516]	; (8000714 <fsm_for_input_processing+0x258>)
 8000510:	6013      	str	r3, [r2, #0]
		green_temp_dur=GREEN_DURATION;
 8000512:	4b81      	ldr	r3, [pc, #516]	; (8000718 <fsm_for_input_processing+0x25c>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a81      	ldr	r2, [pc, #516]	; (800071c <fsm_for_input_processing+0x260>)
 8000518:	6013      	str	r3, [r2, #0]
		/* INITIALIZE TEMPORARY DURATION END */

		/* INITIALIZE COUNT START */
		leds_way1_count[0]=RED_DURATION;
 800051a:	4b7b      	ldr	r3, [pc, #492]	; (8000708 <fsm_for_input_processing+0x24c>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a80      	ldr	r2, [pc, #512]	; (8000720 <fsm_for_input_processing+0x264>)
 8000520:	6013      	str	r3, [r2, #0]
		leds_way1_count[1]=GREEN_DURATION;
 8000522:	4b7d      	ldr	r3, [pc, #500]	; (8000718 <fsm_for_input_processing+0x25c>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a7e      	ldr	r2, [pc, #504]	; (8000720 <fsm_for_input_processing+0x264>)
 8000528:	6053      	str	r3, [r2, #4]
		leds_way1_count[2]=YELLOW_DURATION;
 800052a:	4b79      	ldr	r3, [pc, #484]	; (8000710 <fsm_for_input_processing+0x254>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a7c      	ldr	r2, [pc, #496]	; (8000720 <fsm_for_input_processing+0x264>)
 8000530:	6093      	str	r3, [r2, #8]
		turnOnRed1();
 8000532:	f000 fd8b 	bl	800104c <turnOnRed1>
		current_led_way1=RED;
 8000536:	4b7b      	ldr	r3, [pc, #492]	; (8000724 <fsm_for_input_processing+0x268>)
 8000538:	2200      	movs	r2, #0
 800053a:	701a      	strb	r2, [r3, #0]
		leds_way2_count[0]=RED_DURATION;
 800053c:	4b72      	ldr	r3, [pc, #456]	; (8000708 <fsm_for_input_processing+0x24c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a79      	ldr	r2, [pc, #484]	; (8000728 <fsm_for_input_processing+0x26c>)
 8000542:	6013      	str	r3, [r2, #0]
		leds_way2_count[1]=GREEN_DURATION;
 8000544:	4b74      	ldr	r3, [pc, #464]	; (8000718 <fsm_for_input_processing+0x25c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a77      	ldr	r2, [pc, #476]	; (8000728 <fsm_for_input_processing+0x26c>)
 800054a:	6053      	str	r3, [r2, #4]
		leds_way2_count[2]=YELLOW_DURATION;
 800054c:	4b70      	ldr	r3, [pc, #448]	; (8000710 <fsm_for_input_processing+0x254>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a75      	ldr	r2, [pc, #468]	; (8000728 <fsm_for_input_processing+0x26c>)
 8000552:	6093      	str	r3, [r2, #8]
		turnOnGreen2();
 8000554:	f000 fdb6 	bl	80010c4 <turnOnGreen2>
		current_led_way2=GREEN;
 8000558:	4b74      	ldr	r3, [pc, #464]	; (800072c <fsm_for_input_processing+0x270>)
 800055a:	2202      	movs	r2, #2
 800055c:	701a      	strb	r2, [r3, #0]
		PES_LED_OFF();
 800055e:	f000 fd4d 	bl	8000ffc <PES_LED_OFF>
		/* INITIALIZE COUNT END */

		state=MODE1;
 8000562:	4b67      	ldr	r3, [pc, #412]	; (8000700 <fsm_for_input_processing+0x244>)
 8000564:	2201      	movs	r2, #1
 8000566:	701a      	strb	r2, [r3, #0]
		setTimer4(1000);  //SET TIMER4 FOR COUNT DOWN
 8000568:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800056c:	f7ff fe3c 	bl	80001e8 <setTimer4>

		/* PES_LED SETUP START */
		pes_led_period=(RED_DURATION+YELLOW_DURATION+GREEN_DURATION)*2;
 8000570:	4b65      	ldr	r3, [pc, #404]	; (8000708 <fsm_for_input_processing+0x24c>)
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	4b66      	ldr	r3, [pc, #408]	; (8000710 <fsm_for_input_processing+0x254>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	441a      	add	r2, r3
 800057a:	4b67      	ldr	r3, [pc, #412]	; (8000718 <fsm_for_input_processing+0x25c>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4413      	add	r3, r2
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	4a6b      	ldr	r2, [pc, #428]	; (8000730 <fsm_for_input_processing+0x274>)
 8000584:	6013      	str	r3, [r2, #0]
		pes_led_count=pes_led_period;
 8000586:	4b6a      	ldr	r3, [pc, #424]	; (8000730 <fsm_for_input_processing+0x274>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a6a      	ldr	r2, [pc, #424]	; (8000734 <fsm_for_input_processing+0x278>)
 800058c:	6013      	str	r3, [r2, #0]
		/* PES_LED_SETUP END */
		break;
 800058e:	e3d1      	b.n	8000d34 <fsm_for_input_processing+0x878>
	case MODE1:
		/* COUNT DOWN START */
		if(timer4_flag==1){
 8000590:	4b69      	ldr	r3, [pc, #420]	; (8000738 <fsm_for_input_processing+0x27c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d121      	bne.n	80005dc <fsm_for_input_processing+0x120>
			setTimer4(1000);
 8000598:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800059c:	f7ff fe24 	bl	80001e8 <setTimer4>
			pes_led_count--;
 80005a0:	4b64      	ldr	r3, [pc, #400]	; (8000734 <fsm_for_input_processing+0x278>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	3b01      	subs	r3, #1
 80005a6:	4a63      	ldr	r2, [pc, #396]	; (8000734 <fsm_for_input_processing+0x278>)
 80005a8:	6013      	str	r3, [r2, #0]
			trafficLightCount(leds_way1_count,&current_led_way1);
 80005aa:	495e      	ldr	r1, [pc, #376]	; (8000724 <fsm_for_input_processing+0x268>)
 80005ac:	485c      	ldr	r0, [pc, #368]	; (8000720 <fsm_for_input_processing+0x264>)
 80005ae:	f000 fc6b 	bl	8000e88 <trafficLightCount>
			trafficLightCount(leds_way2_count,&current_led_way2);
 80005b2:	495e      	ldr	r1, [pc, #376]	; (800072c <fsm_for_input_processing+0x270>)
 80005b4:	485c      	ldr	r0, [pc, #368]	; (8000728 <fsm_for_input_processing+0x26c>)
 80005b6:	f000 fc67 	bl	8000e88 <trafficLightCount>
			displaySingleLedsMode1();
 80005ba:	f000 fc39 	bl	8000e30 <displaySingleLedsMode1>
			HAL_UART_Transmit(huart, traffic_light_num,
			sprintf(traffic_light_num,"!7SEG:%d%d#\r",led_buffer1[0],led_buffer1[1]), 100);
 80005be:	4b5f      	ldr	r3, [pc, #380]	; (800073c <fsm_for_input_processing+0x280>)
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	4b5e      	ldr	r3, [pc, #376]	; (800073c <fsm_for_input_processing+0x280>)
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	495e      	ldr	r1, [pc, #376]	; (8000740 <fsm_for_input_processing+0x284>)
 80005c8:	485e      	ldr	r0, [pc, #376]	; (8000744 <fsm_for_input_processing+0x288>)
 80005ca:	f003 fdb1 	bl	8004130 <siprintf>
 80005ce:	4603      	mov	r3, r0
			HAL_UART_Transmit(huart, traffic_light_num,
 80005d0:	b29a      	uxth	r2, r3
 80005d2:	2364      	movs	r3, #100	; 0x64
 80005d4:	495b      	ldr	r1, [pc, #364]	; (8000744 <fsm_for_input_processing+0x288>)
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f003 f8ed 	bl	80037b6 <HAL_UART_Transmit>
		}
		/* COUNT DOWN END */

		/* UART TRANSMIT START */
		if(current_led_way1==RED){
 80005dc:	4b51      	ldr	r3, [pc, #324]	; (8000724 <fsm_for_input_processing+0x268>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d105      	bne.n	80005f0 <fsm_for_input_processing+0x134>
			update_led_buffer(leds_way1_count[0]);
 80005e4:	4b4e      	ldr	r3, [pc, #312]	; (8000720 <fsm_for_input_processing+0x264>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 fdab 	bl	8001144 <update_led_buffer>
 80005ee:	e012      	b.n	8000616 <fsm_for_input_processing+0x15a>
		}else if(current_led_way1==GREEN){
 80005f0:	4b4c      	ldr	r3, [pc, #304]	; (8000724 <fsm_for_input_processing+0x268>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b02      	cmp	r3, #2
 80005f6:	d105      	bne.n	8000604 <fsm_for_input_processing+0x148>
			update_led_buffer(leds_way1_count[1]);
 80005f8:	4b49      	ldr	r3, [pc, #292]	; (8000720 <fsm_for_input_processing+0x264>)
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fda1 	bl	8001144 <update_led_buffer>
 8000602:	e008      	b.n	8000616 <fsm_for_input_processing+0x15a>
		}else if(current_led_way1==YELLOW){
 8000604:	4b47      	ldr	r3, [pc, #284]	; (8000724 <fsm_for_input_processing+0x268>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d104      	bne.n	8000616 <fsm_for_input_processing+0x15a>
			update_led_buffer(leds_way1_count[2]);
 800060c:	4b44      	ldr	r3, [pc, #272]	; (8000720 <fsm_for_input_processing+0x264>)
 800060e:	689b      	ldr	r3, [r3, #8]
 8000610:	4618      	mov	r0, r3
 8000612:	f000 fd97 	bl	8001144 <update_led_buffer>

		/* UART TRANSMIT END */


		/*EXECUTE INPUT BUTTON1 START */
		if(button1_executed==0){
 8000616:	4b4c      	ldr	r3, [pc, #304]	; (8000748 <fsm_for_input_processing+0x28c>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d124      	bne.n	8000668 <fsm_for_input_processing+0x1ac>
			if(button1_pressed()==TRUE){
 800061e:	f7ff fefd 	bl	800041c <button1_pressed>
 8000622:	4603      	mov	r3, r0
 8000624:	2b01      	cmp	r3, #1
 8000626:	d12b      	bne.n	8000680 <fsm_for_input_processing+0x1c4>
				print=0;
 8000628:	4b36      	ldr	r3, [pc, #216]	; (8000704 <fsm_for_input_processing+0x248>)
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
				state=MODE2;
 800062e:	4b34      	ldr	r3, [pc, #208]	; (8000700 <fsm_for_input_processing+0x244>)
 8000630:	2202      	movs	r2, #2
 8000632:	701a      	strb	r2, [r3, #0]
				button1_executed=1;
 8000634:	4b44      	ldr	r3, [pc, #272]	; (8000748 <fsm_for_input_processing+0x28c>)
 8000636:	2201      	movs	r2, #1
 8000638:	601a      	str	r2, [r3, #0]
				setTimer1(250);   //set timer for red led blinking
 800063a:	20fa      	movs	r0, #250	; 0xfa
 800063c:	f7ff fd86 	bl	800014c <setTimer1>
				/* INITIALIZE TEMP DURATION START */
				red_temp_dur=RED_DURATION;
 8000640:	4b31      	ldr	r3, [pc, #196]	; (8000708 <fsm_for_input_processing+0x24c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a31      	ldr	r2, [pc, #196]	; (800070c <fsm_for_input_processing+0x250>)
 8000646:	6013      	str	r3, [r2, #0]
				yellow_temp_dur=YELLOW_DURATION;
 8000648:	4b31      	ldr	r3, [pc, #196]	; (8000710 <fsm_for_input_processing+0x254>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a31      	ldr	r2, [pc, #196]	; (8000714 <fsm_for_input_processing+0x258>)
 800064e:	6013      	str	r3, [r2, #0]
				green_temp_dur=GREEN_DURATION;
 8000650:	4b31      	ldr	r3, [pc, #196]	; (8000718 <fsm_for_input_processing+0x25c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a31      	ldr	r2, [pc, #196]	; (800071c <fsm_for_input_processing+0x260>)
 8000656:	6013      	str	r3, [r2, #0]
				/* INITIALIZE TEMP DURATION END */
				turnOffSingleLed();
 8000658:	f000 fc68 	bl	8000f2c <turnOffSingleLed>
				PES_LED_OFF();
 800065c:	f000 fcce 	bl	8000ffc <PES_LED_OFF>
				flag_pes=0;
 8000660:	4b3a      	ldr	r3, [pc, #232]	; (800074c <fsm_for_input_processing+0x290>)
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	e00b      	b.n	8000680 <fsm_for_input_processing+0x1c4>
			}
		}else if(button1_executed==1){
 8000668:	4b37      	ldr	r3, [pc, #220]	; (8000748 <fsm_for_input_processing+0x28c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d107      	bne.n	8000680 <fsm_for_input_processing+0x1c4>
			if(button1_pressed()==FALSE){
 8000670:	f7ff fed4 	bl	800041c <button1_pressed>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d102      	bne.n	8000680 <fsm_for_input_processing+0x1c4>
				button1_executed=0;
 800067a:	4b33      	ldr	r3, [pc, #204]	; (8000748 <fsm_for_input_processing+0x28c>)
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
			}
		}
		/*EXECUTE INPUT BUTTON1 END */

		/* PES LED EXCUTION START */
		if(button4_pressed()==1){
 8000680:	f7ff ff0c 	bl	800049c <button4_pressed>
 8000684:	4603      	mov	r3, r0
 8000686:	2b01      	cmp	r3, #1
 8000688:	d111      	bne.n	80006ae <fsm_for_input_processing+0x1f2>
			if(button4_executed==0){
 800068a:	4b31      	ldr	r3, [pc, #196]	; (8000750 <fsm_for_input_processing+0x294>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d115      	bne.n	80006be <fsm_for_input_processing+0x202>
				flag_pes=1;
 8000692:	4b2e      	ldr	r3, [pc, #184]	; (800074c <fsm_for_input_processing+0x290>)
 8000694:	2201      	movs	r2, #1
 8000696:	601a      	str	r2, [r3, #0]
				button4_executed=1;
 8000698:	4b2d      	ldr	r3, [pc, #180]	; (8000750 <fsm_for_input_processing+0x294>)
 800069a:	2201      	movs	r2, #1
 800069c:	601a      	str	r2, [r3, #0]
				timer2_flag = 1;
 800069e:	4b2d      	ldr	r3, [pc, #180]	; (8000754 <fsm_for_input_processing+0x298>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	601a      	str	r2, [r3, #0]
				pes_led_count=pes_led_period;
 80006a4:	4b22      	ldr	r3, [pc, #136]	; (8000730 <fsm_for_input_processing+0x274>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a22      	ldr	r2, [pc, #136]	; (8000734 <fsm_for_input_processing+0x278>)
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	e007      	b.n	80006be <fsm_for_input_processing+0x202>
			}
		}else if(button4_pressed()==0){
 80006ae:	f7ff fef5 	bl	800049c <button4_pressed>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d102      	bne.n	80006be <fsm_for_input_processing+0x202>
			button4_executed=0;
 80006b8:	4b25      	ldr	r3, [pc, #148]	; (8000750 <fsm_for_input_processing+0x294>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
		}

		if(flag_pes==1){
 80006be:	4b23      	ldr	r3, [pc, #140]	; (800074c <fsm_for_input_processing+0x290>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	f040 8329 	bne.w	8000d1a <fsm_for_input_processing+0x85e>
			if(current_led_way1==RED){
 80006c8:	4b16      	ldr	r3, [pc, #88]	; (8000724 <fsm_for_input_processing+0x268>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d145      	bne.n	800075c <fsm_for_input_processing+0x2a0>
				PES_LED_ON();
 80006d0:	f000 fc6c 	bl	8000fac <PES_LED_ON>
				if (leds_way1_count[0] <= 3){
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <fsm_for_input_processing+0x264>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b03      	cmp	r3, #3
 80006da:	dc4c      	bgt.n	8000776 <fsm_for_input_processing+0x2ba>
					if (timer2_flag == 1){
 80006dc:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <fsm_for_input_processing+0x298>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d148      	bne.n	8000776 <fsm_for_input_processing+0x2ba>
						pwm = pwm +250;
 80006e4:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <fsm_for_input_processing+0x29c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	33fa      	adds	r3, #250	; 0xfa
 80006ea:	4a1b      	ldr	r2, [pc, #108]	; (8000758 <fsm_for_input_processing+0x29c>)
 80006ec:	6013      	str	r3, [r2, #0]
						__HAL_TIM_SetCompare(htim3, TIM_CHANNEL_1, pwm);
 80006ee:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <fsm_for_input_processing+0x29c>)
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	635a      	str	r2, [r3, #52]	; 0x34
						setTimer2(30);
 80006f8:	201e      	movs	r0, #30
 80006fa:	f7ff fd41 	bl	8000180 <setTimer2>
 80006fe:	e03a      	b.n	8000776 <fsm_for_input_processing+0x2ba>
 8000700:	20000140 	.word	0x20000140
 8000704:	20000174 	.word	0x20000174
 8000708:	20000120 	.word	0x20000120
 800070c:	20000134 	.word	0x20000134
 8000710:	20000124 	.word	0x20000124
 8000714:	20000138 	.word	0x20000138
 8000718:	20000128 	.word	0x20000128
 800071c:	2000013c 	.word	0x2000013c
 8000720:	20000144 	.word	0x20000144
 8000724:	20000141 	.word	0x20000141
 8000728:	20000154 	.word	0x20000154
 800072c:	20000150 	.word	0x20000150
 8000730:	2000012c 	.word	0x2000012c
 8000734:	20000130 	.word	0x20000130
 8000738:	200000e0 	.word	0x200000e0
 800073c:	2000017c 	.word	0x2000017c
 8000740:	08004a3c 	.word	0x08004a3c
 8000744:	200000e8 	.word	0x200000e8
 8000748:	20000160 	.word	0x20000160
 800074c:	20000168 	.word	0x20000168
 8000750:	2000016c 	.word	0x2000016c
 8000754:	200000d0 	.word	0x200000d0
 8000758:	2000011c 	.word	0x2000011c
					}
				}
			}else{
				PES_LED_RED();
 800075c:	f000 fc3a 	bl	8000fd4 <PES_LED_RED>
				timer2_flag = 1;
 8000760:	4b9d      	ldr	r3, [pc, #628]	; (80009d8 <fsm_for_input_processing+0x51c>)
 8000762:	2201      	movs	r2, #1
 8000764:	601a      	str	r2, [r3, #0]
				pwm = 0;
 8000766:	4b9d      	ldr	r3, [pc, #628]	; (80009dc <fsm_for_input_processing+0x520>)
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SetCompare(htim3, TIM_CHANNEL_1, pwm);
 800076c:	4b9b      	ldr	r3, [pc, #620]	; (80009dc <fsm_for_input_processing+0x520>)
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	635a      	str	r2, [r3, #52]	; 0x34
			}
			if(pes_led_count<=0 && current_led_way1!=RED){
 8000776:	4b9a      	ldr	r3, [pc, #616]	; (80009e0 <fsm_for_input_processing+0x524>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	f300 82cd 	bgt.w	8000d1a <fsm_for_input_processing+0x85e>
 8000780:	4b98      	ldr	r3, [pc, #608]	; (80009e4 <fsm_for_input_processing+0x528>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	f000 82c8 	beq.w	8000d1a <fsm_for_input_processing+0x85e>
				PES_LED_OFF();
 800078a:	f000 fc37 	bl	8000ffc <PES_LED_OFF>
				pwm = 0;
 800078e:	4b93      	ldr	r3, [pc, #588]	; (80009dc <fsm_for_input_processing+0x520>)
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
				flag_pes=0;
 8000794:	4b94      	ldr	r3, [pc, #592]	; (80009e8 <fsm_for_input_processing+0x52c>)
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SetCompare(htim3, TIM_CHANNEL_1, pwm);
 800079a:	4b90      	ldr	r3, [pc, #576]	; (80009dc <fsm_for_input_processing+0x520>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	635a      	str	r2, [r3, #52]	; 0x34
			}
		}
		/* PES LED EXCUTION END */
		break;
 80007a4:	e2b9      	b.n	8000d1a <fsm_for_input_processing+0x85e>
	case MODE2:
		/* UART TRANSMIT START */
		update_led_buffer(red_temp_dur);
 80007a6:	4b91      	ldr	r3, [pc, #580]	; (80009ec <fsm_for_input_processing+0x530>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fcca 	bl	8001144 <update_led_buffer>
		if(print==0){
 80007b0:	4b8f      	ldr	r3, [pc, #572]	; (80009f0 <fsm_for_input_processing+0x534>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d111      	bne.n	80007dc <fsm_for_input_processing+0x320>
			HAL_UART_Transmit(huart, traffic_light_num,
			sprintf(traffic_light_num,"!7SEG:%d%d#\r",led_buffer1[0],led_buffer1[1]), 100);
 80007b8:	4b8e      	ldr	r3, [pc, #568]	; (80009f4 <fsm_for_input_processing+0x538>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4b8d      	ldr	r3, [pc, #564]	; (80009f4 <fsm_for_input_processing+0x538>)
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	498d      	ldr	r1, [pc, #564]	; (80009f8 <fsm_for_input_processing+0x53c>)
 80007c2:	488e      	ldr	r0, [pc, #568]	; (80009fc <fsm_for_input_processing+0x540>)
 80007c4:	f003 fcb4 	bl	8004130 <siprintf>
 80007c8:	4603      	mov	r3, r0
			HAL_UART_Transmit(huart, traffic_light_num,
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	2364      	movs	r3, #100	; 0x64
 80007ce:	498b      	ldr	r1, [pc, #556]	; (80009fc <fsm_for_input_processing+0x540>)
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f002 fff0 	bl	80037b6 <HAL_UART_Transmit>
			print=1;
 80007d6:	4b86      	ldr	r3, [pc, #536]	; (80009f0 <fsm_for_input_processing+0x534>)
 80007d8:	2201      	movs	r2, #1
 80007da:	601a      	str	r2, [r3, #0]
		}
		/* UART TRANSMIT END */

		/* BLINK SINGLE RED LED START */
		if(timer1_flag==1){
 80007dc:	4b88      	ldr	r3, [pc, #544]	; (8000a00 <fsm_for_input_processing+0x544>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d119      	bne.n	8000818 <fsm_for_input_processing+0x35c>
			setTimer1(250);
 80007e4:	20fa      	movs	r0, #250	; 0xfa
 80007e6:	f7ff fcb1 	bl	800014c <setTimer1>
			if(led_state==0){
 80007ea:	4b86      	ldr	r3, [pc, #536]	; (8000a04 <fsm_for_input_processing+0x548>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d107      	bne.n	8000802 <fsm_for_input_processing+0x346>
				turnOnRed1();
 80007f2:	f000 fc2b 	bl	800104c <turnOnRed1>
				turnOnRed2();
 80007f6:	f000 fc75 	bl	80010e4 <turnOnRed2>
				led_state=1;
 80007fa:	4b82      	ldr	r3, [pc, #520]	; (8000a04 <fsm_for_input_processing+0x548>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	e00a      	b.n	8000818 <fsm_for_input_processing+0x35c>
			}else if(led_state==1){
 8000802:	4b80      	ldr	r3, [pc, #512]	; (8000a04 <fsm_for_input_processing+0x548>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d106      	bne.n	8000818 <fsm_for_input_processing+0x35c>
				turnOff1();
 800080a:	f000 fc47 	bl	800109c <turnOff1>
				turnOff2();
 800080e:	f000 fc89 	bl	8001124 <turnOff2>
				led_state=0;
 8000812:	4b7c      	ldr	r3, [pc, #496]	; (8000a04 <fsm_for_input_processing+0x548>)
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
			}
		}
		/* BLINK SINGLE RED LED END */

		/*EXECUTE INPUT BUTTON1 START */
		if(button1_executed==0){
 8000818:	4b7b      	ldr	r3, [pc, #492]	; (8000a08 <fsm_for_input_processing+0x54c>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d110      	bne.n	8000842 <fsm_for_input_processing+0x386>
			if(button1_pressed()==TRUE){
 8000820:	f7ff fdfc 	bl	800041c <button1_pressed>
 8000824:	4603      	mov	r3, r0
 8000826:	2b01      	cmp	r3, #1
 8000828:	d117      	bne.n	800085a <fsm_for_input_processing+0x39e>
				state=MODE3;
 800082a:	4b78      	ldr	r3, [pc, #480]	; (8000a0c <fsm_for_input_processing+0x550>)
 800082c:	2203      	movs	r2, #3
 800082e:	701a      	strb	r2, [r3, #0]
				button1_executed=1;
 8000830:	4b75      	ldr	r3, [pc, #468]	; (8000a08 <fsm_for_input_processing+0x54c>)
 8000832:	2201      	movs	r2, #1
 8000834:	601a      	str	r2, [r3, #0]
				turnOffSingleLed();
 8000836:	f000 fb79 	bl	8000f2c <turnOffSingleLed>
				print=0;
 800083a:	4b6d      	ldr	r3, [pc, #436]	; (80009f0 <fsm_for_input_processing+0x534>)
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	e00b      	b.n	800085a <fsm_for_input_processing+0x39e>
			}
		}else if(button1_executed==1){
 8000842:	4b71      	ldr	r3, [pc, #452]	; (8000a08 <fsm_for_input_processing+0x54c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d107      	bne.n	800085a <fsm_for_input_processing+0x39e>
			if(button1_pressed()==FALSE){
 800084a:	f7ff fde7 	bl	800041c <button1_pressed>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d102      	bne.n	800085a <fsm_for_input_processing+0x39e>
				button1_executed=0;
 8000854:	4b6c      	ldr	r3, [pc, #432]	; (8000a08 <fsm_for_input_processing+0x54c>)
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
			}
		}
		/*EXECUTE INPUT BUTTON1 END */

		/*EXECUTE INPUT BUTTON3 START */
		if(button3_pressed()==TRUE){
 800085a:	f7ff fe0f 	bl	800047c <button3_pressed>
 800085e:	4603      	mov	r3, r0
 8000860:	2b01      	cmp	r3, #1
 8000862:	d105      	bne.n	8000870 <fsm_for_input_processing+0x3b4>
			state=UPDATE_DURATION;
 8000864:	4b69      	ldr	r3, [pc, #420]	; (8000a0c <fsm_for_input_processing+0x550>)
 8000866:	2207      	movs	r2, #7
 8000868:	701a      	strb	r2, [r3, #0]
			LedToChange=RED;
 800086a:	4b69      	ldr	r3, [pc, #420]	; (8000a10 <fsm_for_input_processing+0x554>)
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]
		}
		/*EXECUTE INPUT BUTTON3 END */

		/*EXECUTE INPUT BUTTON2 START */
		if(button2_pressed()==TRUE){
 8000870:	f7ff fde4 	bl	800043c <button2_pressed>
 8000874:	4603      	mov	r3, r0
 8000876:	2b01      	cmp	r3, #1
 8000878:	f040 8251 	bne.w	8000d1e <fsm_for_input_processing+0x862>
			state=INCREASE;
 800087c:	4b63      	ldr	r3, [pc, #396]	; (8000a0c <fsm_for_input_processing+0x550>)
 800087e:	2205      	movs	r2, #5
 8000880:	701a      	strb	r2, [r3, #0]
			LedToChange=RED;
 8000882:	4b63      	ldr	r3, [pc, #396]	; (8000a10 <fsm_for_input_processing+0x554>)
 8000884:	2200      	movs	r2, #0
 8000886:	701a      	strb	r2, [r3, #0]
			button2_increase1=0;
 8000888:	4b62      	ldr	r3, [pc, #392]	; (8000a14 <fsm_for_input_processing+0x558>)
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
		}
		/*EXECUTE INPUT BUTTON2 END */
		//TO DO


		break;
 800088e:	e246      	b.n	8000d1e <fsm_for_input_processing+0x862>
	case MODE3:
		/* UART TRANSMIT START */
		update_led_buffer(green_temp_dur);
 8000890:	4b61      	ldr	r3, [pc, #388]	; (8000a18 <fsm_for_input_processing+0x55c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4618      	mov	r0, r3
 8000896:	f000 fc55 	bl	8001144 <update_led_buffer>
		if(print==0){
 800089a:	4b55      	ldr	r3, [pc, #340]	; (80009f0 <fsm_for_input_processing+0x534>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d111      	bne.n	80008c6 <fsm_for_input_processing+0x40a>
			HAL_UART_Transmit(huart, traffic_light_num,
			sprintf(traffic_light_num,"!7SEG:%d%d#\r",led_buffer1[0],led_buffer1[1]), 100);
 80008a2:	4b54      	ldr	r3, [pc, #336]	; (80009f4 <fsm_for_input_processing+0x538>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	4b53      	ldr	r3, [pc, #332]	; (80009f4 <fsm_for_input_processing+0x538>)
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	4953      	ldr	r1, [pc, #332]	; (80009f8 <fsm_for_input_processing+0x53c>)
 80008ac:	4853      	ldr	r0, [pc, #332]	; (80009fc <fsm_for_input_processing+0x540>)
 80008ae:	f003 fc3f 	bl	8004130 <siprintf>
 80008b2:	4603      	mov	r3, r0
			HAL_UART_Transmit(huart, traffic_light_num,
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	2364      	movs	r3, #100	; 0x64
 80008b8:	4950      	ldr	r1, [pc, #320]	; (80009fc <fsm_for_input_processing+0x540>)
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f002 ff7b 	bl	80037b6 <HAL_UART_Transmit>
			print=1;
 80008c0:	4b4b      	ldr	r3, [pc, #300]	; (80009f0 <fsm_for_input_processing+0x534>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	601a      	str	r2, [r3, #0]
		}
		/* UART TRANSMIT END */
		/* BLINK SINGLE GREEN LED START */
		if(timer1_flag==1){
 80008c6:	4b4e      	ldr	r3, [pc, #312]	; (8000a00 <fsm_for_input_processing+0x544>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d119      	bne.n	8000902 <fsm_for_input_processing+0x446>
			setTimer1(250);
 80008ce:	20fa      	movs	r0, #250	; 0xfa
 80008d0:	f7ff fc3c 	bl	800014c <setTimer1>
			if(led_state==0){
 80008d4:	4b4b      	ldr	r3, [pc, #300]	; (8000a04 <fsm_for_input_processing+0x548>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d107      	bne.n	80008ec <fsm_for_input_processing+0x430>
				turnOnGreen1();
 80008dc:	f000 fba2 	bl	8001024 <turnOnGreen1>
				turnOnGreen2();
 80008e0:	f000 fbf0 	bl	80010c4 <turnOnGreen2>
				led_state=1;
 80008e4:	4b47      	ldr	r3, [pc, #284]	; (8000a04 <fsm_for_input_processing+0x548>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	e00a      	b.n	8000902 <fsm_for_input_processing+0x446>
			}else if(led_state==1){
 80008ec:	4b45      	ldr	r3, [pc, #276]	; (8000a04 <fsm_for_input_processing+0x548>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d106      	bne.n	8000902 <fsm_for_input_processing+0x446>
				turnOff1();
 80008f4:	f000 fbd2 	bl	800109c <turnOff1>
				turnOff2();
 80008f8:	f000 fc14 	bl	8001124 <turnOff2>
				led_state=0;
 80008fc:	4b41      	ldr	r3, [pc, #260]	; (8000a04 <fsm_for_input_processing+0x548>)
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
		}
		/* BLINK SINGLE GREEN LED END */


		/*EXECUTE INPUT BUTTON1 START */
		if(button1_executed==0){
 8000902:	4b41      	ldr	r3, [pc, #260]	; (8000a08 <fsm_for_input_processing+0x54c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d110      	bne.n	800092c <fsm_for_input_processing+0x470>
			if(button1_pressed()==TRUE){
 800090a:	f7ff fd87 	bl	800041c <button1_pressed>
 800090e:	4603      	mov	r3, r0
 8000910:	2b01      	cmp	r3, #1
 8000912:	d117      	bne.n	8000944 <fsm_for_input_processing+0x488>
				state=MODE4;
 8000914:	4b3d      	ldr	r3, [pc, #244]	; (8000a0c <fsm_for_input_processing+0x550>)
 8000916:	2204      	movs	r2, #4
 8000918:	701a      	strb	r2, [r3, #0]
				button1_executed=1;
 800091a:	4b3b      	ldr	r3, [pc, #236]	; (8000a08 <fsm_for_input_processing+0x54c>)
 800091c:	2201      	movs	r2, #1
 800091e:	601a      	str	r2, [r3, #0]
				turnOffSingleLed();
 8000920:	f000 fb04 	bl	8000f2c <turnOffSingleLed>
				print=0;
 8000924:	4b32      	ldr	r3, [pc, #200]	; (80009f0 <fsm_for_input_processing+0x534>)
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	e00b      	b.n	8000944 <fsm_for_input_processing+0x488>
			}
		}else if(button1_executed==1){
 800092c:	4b36      	ldr	r3, [pc, #216]	; (8000a08 <fsm_for_input_processing+0x54c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d107      	bne.n	8000944 <fsm_for_input_processing+0x488>
			if(button1_pressed()==FALSE){
 8000934:	f7ff fd72 	bl	800041c <button1_pressed>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d102      	bne.n	8000944 <fsm_for_input_processing+0x488>
				button1_executed=0;
 800093e:	4b32      	ldr	r3, [pc, #200]	; (8000a08 <fsm_for_input_processing+0x54c>)
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
			}
		}
		/*EXECUTE INPUT BUTTON1 END */

		/*EXECUTE INPUT BUTTON3 START */
		if(button3_pressed()==TRUE){
 8000944:	f7ff fd9a 	bl	800047c <button3_pressed>
 8000948:	4603      	mov	r3, r0
 800094a:	2b01      	cmp	r3, #1
 800094c:	d105      	bne.n	800095a <fsm_for_input_processing+0x49e>
			state=UPDATE_DURATION;
 800094e:	4b2f      	ldr	r3, [pc, #188]	; (8000a0c <fsm_for_input_processing+0x550>)
 8000950:	2207      	movs	r2, #7
 8000952:	701a      	strb	r2, [r3, #0]
			LedToChange=GREEN;
 8000954:	4b2e      	ldr	r3, [pc, #184]	; (8000a10 <fsm_for_input_processing+0x554>)
 8000956:	2202      	movs	r2, #2
 8000958:	701a      	strb	r2, [r3, #0]
		}
		/*EXECUTE INPUT BUTTON3 END */

		/*EXECUTE INPUT BUTTON2 START */
		if(button2_pressed()==TRUE){
 800095a:	f7ff fd6f 	bl	800043c <button2_pressed>
 800095e:	4603      	mov	r3, r0
 8000960:	2b01      	cmp	r3, #1
 8000962:	f040 81de 	bne.w	8000d22 <fsm_for_input_processing+0x866>
			state=INCREASE;
 8000966:	4b29      	ldr	r3, [pc, #164]	; (8000a0c <fsm_for_input_processing+0x550>)
 8000968:	2205      	movs	r2, #5
 800096a:	701a      	strb	r2, [r3, #0]
			LedToChange=GREEN;
 800096c:	4b28      	ldr	r3, [pc, #160]	; (8000a10 <fsm_for_input_processing+0x554>)
 800096e:	2202      	movs	r2, #2
 8000970:	701a      	strb	r2, [r3, #0]
			button2_increase1=0;
 8000972:	4b28      	ldr	r3, [pc, #160]	; (8000a14 <fsm_for_input_processing+0x558>)
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
		}
		/*EXECUTE INPUT BUTTON2 END */
		//TO DO

		break;
 8000978:	e1d3      	b.n	8000d22 <fsm_for_input_processing+0x866>
	case MODE4:
		/* UART TRANSMIT START */
		update_led_buffer(yellow_temp_dur);
 800097a:	4b28      	ldr	r3, [pc, #160]	; (8000a1c <fsm_for_input_processing+0x560>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4618      	mov	r0, r3
 8000980:	f000 fbe0 	bl	8001144 <update_led_buffer>
		if(print==0){
 8000984:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <fsm_for_input_processing+0x534>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d111      	bne.n	80009b0 <fsm_for_input_processing+0x4f4>
			HAL_UART_Transmit(huart, traffic_light_num,
			sprintf(traffic_light_num,"!7SEG:%d%d#\r",led_buffer1[0],led_buffer1[1]), 100);
 800098c:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <fsm_for_input_processing+0x538>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <fsm_for_input_processing+0x538>)
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	4918      	ldr	r1, [pc, #96]	; (80009f8 <fsm_for_input_processing+0x53c>)
 8000996:	4819      	ldr	r0, [pc, #100]	; (80009fc <fsm_for_input_processing+0x540>)
 8000998:	f003 fbca 	bl	8004130 <siprintf>
 800099c:	4603      	mov	r3, r0
			HAL_UART_Transmit(huart, traffic_light_num,
 800099e:	b29a      	uxth	r2, r3
 80009a0:	2364      	movs	r3, #100	; 0x64
 80009a2:	4916      	ldr	r1, [pc, #88]	; (80009fc <fsm_for_input_processing+0x540>)
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f002 ff06 	bl	80037b6 <HAL_UART_Transmit>
			print=1;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <fsm_for_input_processing+0x534>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	601a      	str	r2, [r3, #0]
		}
		/* UART TRANSMIT END */
		/* BLINK SINGLE YELLOW LED START */
		if(timer1_flag==1){
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <fsm_for_input_processing+0x544>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d13e      	bne.n	8000a36 <fsm_for_input_processing+0x57a>
			setTimer1(250);
 80009b8:	20fa      	movs	r0, #250	; 0xfa
 80009ba:	f7ff fbc7 	bl	800014c <setTimer1>
			if(led_state==0){
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <fsm_for_input_processing+0x548>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d12c      	bne.n	8000a20 <fsm_for_input_processing+0x564>
				turnOnYellow1();
 80009c6:	f000 fb55 	bl	8001074 <turnOnYellow1>
				turnOnYellow2();
 80009ca:	f000 fb9b 	bl	8001104 <turnOnYellow2>
				led_state=1;
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <fsm_for_input_processing+0x548>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	e02f      	b.n	8000a36 <fsm_for_input_processing+0x57a>
 80009d6:	bf00      	nop
 80009d8:	200000d0 	.word	0x200000d0
 80009dc:	2000011c 	.word	0x2000011c
 80009e0:	20000130 	.word	0x20000130
 80009e4:	20000141 	.word	0x20000141
 80009e8:	20000168 	.word	0x20000168
 80009ec:	20000134 	.word	0x20000134
 80009f0:	20000174 	.word	0x20000174
 80009f4:	2000017c 	.word	0x2000017c
 80009f8:	08004a3c 	.word	0x08004a3c
 80009fc:	200000e8 	.word	0x200000e8
 8000a00:	200000c8 	.word	0x200000c8
 8000a04:	20000170 	.word	0x20000170
 8000a08:	20000160 	.word	0x20000160
 8000a0c:	20000140 	.word	0x20000140
 8000a10:	20000178 	.word	0x20000178
 8000a14:	20000164 	.word	0x20000164
 8000a18:	2000013c 	.word	0x2000013c
 8000a1c:	20000138 	.word	0x20000138
			}else if(led_state==1){
 8000a20:	4b9e      	ldr	r3, [pc, #632]	; (8000c9c <fsm_for_input_processing+0x7e0>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d106      	bne.n	8000a36 <fsm_for_input_processing+0x57a>
				turnOff1();
 8000a28:	f000 fb38 	bl	800109c <turnOff1>
				turnOff2();
 8000a2c:	f000 fb7a 	bl	8001124 <turnOff2>
				led_state=0;
 8000a30:	4b9a      	ldr	r3, [pc, #616]	; (8000c9c <fsm_for_input_processing+0x7e0>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
			}
		}
		/* BLINK SINGLE GREEN LED END */

		/*EXECUTE INPUT BUTTON1 START */
		if(button1_executed==0){
 8000a36:	4b9a      	ldr	r3, [pc, #616]	; (8000ca0 <fsm_for_input_processing+0x7e4>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d113      	bne.n	8000a66 <fsm_for_input_processing+0x5aa>
			if(button1_pressed()==TRUE){
 8000a3e:	f7ff fced 	bl	800041c <button1_pressed>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d11a      	bne.n	8000a7e <fsm_for_input_processing+0x5c2>
				state=INIT;
 8000a48:	4b96      	ldr	r3, [pc, #600]	; (8000ca4 <fsm_for_input_processing+0x7e8>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
				button1_executed=1;
 8000a4e:	4b94      	ldr	r3, [pc, #592]	; (8000ca0 <fsm_for_input_processing+0x7e4>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	601a      	str	r2, [r3, #0]
				setTimer1(0); //turn off or reset timer 1
 8000a54:	2000      	movs	r0, #0
 8000a56:	f7ff fb79 	bl	800014c <setTimer1>
				turnOffSingleLed();
 8000a5a:	f000 fa67 	bl	8000f2c <turnOffSingleLed>
				print=0;
 8000a5e:	4b92      	ldr	r3, [pc, #584]	; (8000ca8 <fsm_for_input_processing+0x7ec>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	e00b      	b.n	8000a7e <fsm_for_input_processing+0x5c2>
			}
		}else if(button1_executed==1){
 8000a66:	4b8e      	ldr	r3, [pc, #568]	; (8000ca0 <fsm_for_input_processing+0x7e4>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d107      	bne.n	8000a7e <fsm_for_input_processing+0x5c2>
			if(button1_pressed()==FALSE){
 8000a6e:	f7ff fcd5 	bl	800041c <button1_pressed>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d102      	bne.n	8000a7e <fsm_for_input_processing+0x5c2>
				button1_executed=0;
 8000a78:	4b89      	ldr	r3, [pc, #548]	; (8000ca0 <fsm_for_input_processing+0x7e4>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
			}
		}
		/*EXECUTE INPUT BUTTON1 END */

		/*EXECUTE INPUT BUTTON3 START */
		if(button3_pressed()==TRUE){
 8000a7e:	f7ff fcfd 	bl	800047c <button3_pressed>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d105      	bne.n	8000a94 <fsm_for_input_processing+0x5d8>
			state=UPDATE_DURATION;
 8000a88:	4b86      	ldr	r3, [pc, #536]	; (8000ca4 <fsm_for_input_processing+0x7e8>)
 8000a8a:	2207      	movs	r2, #7
 8000a8c:	701a      	strb	r2, [r3, #0]
			LedToChange=YELLOW;
 8000a8e:	4b87      	ldr	r3, [pc, #540]	; (8000cac <fsm_for_input_processing+0x7f0>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	701a      	strb	r2, [r3, #0]
		}
		/*EXECUTE INPUT BUTTON3 END */

		/*EXECUTE INPUT BUTTON2 START */
		if(button2_pressed()==TRUE){
 8000a94:	f7ff fcd2 	bl	800043c <button2_pressed>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	f040 8143 	bne.w	8000d26 <fsm_for_input_processing+0x86a>
			state=INCREASE;
 8000aa0:	4b80      	ldr	r3, [pc, #512]	; (8000ca4 <fsm_for_input_processing+0x7e8>)
 8000aa2:	2205      	movs	r2, #5
 8000aa4:	701a      	strb	r2, [r3, #0]
			LedToChange=YELLOW;
 8000aa6:	4b81      	ldr	r3, [pc, #516]	; (8000cac <fsm_for_input_processing+0x7f0>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	701a      	strb	r2, [r3, #0]
			button2_increase1=0;
 8000aac:	4b80      	ldr	r3, [pc, #512]	; (8000cb0 <fsm_for_input_processing+0x7f4>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
		}
		/*EXECUTE INPUT BUTTON2 END */
		//TO DO

		break;
 8000ab2:	e138      	b.n	8000d26 <fsm_for_input_processing+0x86a>
	case INCREASE:
		/* BLINK SINGLE LED START */
		if(timer1_flag==1){
 8000ab4:	4b7f      	ldr	r3, [pc, #508]	; (8000cb4 <fsm_for_input_processing+0x7f8>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d107      	bne.n	8000acc <fsm_for_input_processing+0x610>
			setTimer1(250);
 8000abc:	20fa      	movs	r0, #250	; 0xfa
 8000abe:	f7ff fb45 	bl	800014c <setTimer1>
			ledBlinking(LedToChange);
 8000ac2:	4b7a      	ldr	r3, [pc, #488]	; (8000cac <fsm_for_input_processing+0x7f0>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 fa38 	bl	8000f3c <ledBlinking>
		}
		/* BLINK SINGLE LED END */

		/* EXECUTE INPUT BUTTON2 START */
		if(button2_pressed_1s()==TRUE){
 8000acc:	f7ff fcc6 	bl	800045c <button2_pressed_1s>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d10a      	bne.n	8000aec <fsm_for_input_processing+0x630>
			print=0;
 8000ad6:	4b74      	ldr	r3, [pc, #464]	; (8000ca8 <fsm_for_input_processing+0x7ec>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
			state=INCREASE_500MS;
 8000adc:	4b71      	ldr	r3, [pc, #452]	; (8000ca4 <fsm_for_input_processing+0x7e8>)
 8000ade:	2206      	movs	r2, #6
 8000ae0:	701a      	strb	r2, [r3, #0]
			setTimer3(500);
 8000ae2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ae6:	f7ff fb65 	bl	80001b4 <setTimer3>
 8000aea:	e01c      	b.n	8000b26 <fsm_for_input_processing+0x66a>
		}else if(button2_pressed()==FALSE){
 8000aec:	f7ff fca6 	bl	800043c <button2_pressed>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d116      	bne.n	8000b24 <fsm_for_input_processing+0x668>
			switch(LedToChange){
 8000af6:	4b6d      	ldr	r3, [pc, #436]	; (8000cac <fsm_for_input_processing+0x7f0>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	d00a      	beq.n	8000b14 <fsm_for_input_processing+0x658>
 8000afe:	2b02      	cmp	r3, #2
 8000b00:	dc11      	bgt.n	8000b26 <fsm_for_input_processing+0x66a>
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d002      	beq.n	8000b0c <fsm_for_input_processing+0x650>
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d008      	beq.n	8000b1c <fsm_for_input_processing+0x660>
 8000b0a:	e00c      	b.n	8000b26 <fsm_for_input_processing+0x66a>
				case RED:
					state=MODE2;
 8000b0c:	4b65      	ldr	r3, [pc, #404]	; (8000ca4 <fsm_for_input_processing+0x7e8>)
 8000b0e:	2202      	movs	r2, #2
 8000b10:	701a      	strb	r2, [r3, #0]
					break;
 8000b12:	e008      	b.n	8000b26 <fsm_for_input_processing+0x66a>
				case GREEN:
					state=MODE3;
 8000b14:	4b63      	ldr	r3, [pc, #396]	; (8000ca4 <fsm_for_input_processing+0x7e8>)
 8000b16:	2203      	movs	r2, #3
 8000b18:	701a      	strb	r2, [r3, #0]
					break;
 8000b1a:	e004      	b.n	8000b26 <fsm_for_input_processing+0x66a>
				case YELLOW:
					state=MODE4;
 8000b1c:	4b61      	ldr	r3, [pc, #388]	; (8000ca4 <fsm_for_input_processing+0x7e8>)
 8000b1e:	2204      	movs	r2, #4
 8000b20:	701a      	strb	r2, [r3, #0]
					break;
 8000b22:	e000      	b.n	8000b26 <fsm_for_input_processing+0x66a>
			}
		}
 8000b24:	bf00      	nop
		/* EXECUTE INPUT BUTTON2 START */

		/* INCREASE DURATION START */
		if(button2_increase1==0){
 8000b26:	4b62      	ldr	r3, [pc, #392]	; (8000cb0 <fsm_for_input_processing+0x7f4>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	f040 80fd 	bne.w	8000d2a <fsm_for_input_processing+0x86e>
			increaseTempDur(LedToChange);
 8000b30:	4b5e      	ldr	r3, [pc, #376]	; (8000cac <fsm_for_input_processing+0x7f0>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 f905 	bl	8000d44 <increaseTempDur>
			button2_increase1=1;
 8000b3a:	4b5d      	ldr	r3, [pc, #372]	; (8000cb0 <fsm_for_input_processing+0x7f4>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	601a      	str	r2, [r3, #0]

		/* UART TRANSMIT START */
			switch(LedToChange){
 8000b40:	4b5a      	ldr	r3, [pc, #360]	; (8000cac <fsm_for_input_processing+0x7f0>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d00c      	beq.n	8000b62 <fsm_for_input_processing+0x6a6>
 8000b48:	2b02      	cmp	r3, #2
 8000b4a:	dc16      	bgt.n	8000b7a <fsm_for_input_processing+0x6be>
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d002      	beq.n	8000b56 <fsm_for_input_processing+0x69a>
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d00c      	beq.n	8000b6e <fsm_for_input_processing+0x6b2>
 8000b54:	e011      	b.n	8000b7a <fsm_for_input_processing+0x6be>
				case RED:
					update_led_buffer(red_temp_dur);
 8000b56:	4b58      	ldr	r3, [pc, #352]	; (8000cb8 <fsm_for_input_processing+0x7fc>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 faf2 	bl	8001144 <update_led_buffer>
					break;
 8000b60:	e00b      	b.n	8000b7a <fsm_for_input_processing+0x6be>
				case GREEN:
					update_led_buffer(green_temp_dur);
 8000b62:	4b56      	ldr	r3, [pc, #344]	; (8000cbc <fsm_for_input_processing+0x800>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 faec 	bl	8001144 <update_led_buffer>
					break;
 8000b6c:	e005      	b.n	8000b7a <fsm_for_input_processing+0x6be>
				case YELLOW:
					update_led_buffer(yellow_temp_dur);
 8000b6e:	4b54      	ldr	r3, [pc, #336]	; (8000cc0 <fsm_for_input_processing+0x804>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 fae6 	bl	8001144 <update_led_buffer>
					break;
 8000b78:	bf00      	nop
			}
			HAL_UART_Transmit(huart, traffic_light_num,
			sprintf(traffic_light_num,"!7SEG:%d%d#\r",led_buffer1[0],led_buffer1[1]), 100);
 8000b7a:	4b52      	ldr	r3, [pc, #328]	; (8000cc4 <fsm_for_input_processing+0x808>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4b51      	ldr	r3, [pc, #324]	; (8000cc4 <fsm_for_input_processing+0x808>)
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	4951      	ldr	r1, [pc, #324]	; (8000cc8 <fsm_for_input_processing+0x80c>)
 8000b84:	4851      	ldr	r0, [pc, #324]	; (8000ccc <fsm_for_input_processing+0x810>)
 8000b86:	f003 fad3 	bl	8004130 <siprintf>
 8000b8a:	4603      	mov	r3, r0
			HAL_UART_Transmit(huart, traffic_light_num,
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	2364      	movs	r3, #100	; 0x64
 8000b90:	494e      	ldr	r1, [pc, #312]	; (8000ccc <fsm_for_input_processing+0x810>)
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f002 fe0f 	bl	80037b6 <HAL_UART_Transmit>
		}
		/* UART TRANSMIT END */
		/* INCREASE DURATION END */
		//TO DO
		break;
 8000b98:	e0c7      	b.n	8000d2a <fsm_for_input_processing+0x86e>
	case INCREASE_500MS:
		/* BLINK SINGLE LED START */
		if(timer1_flag==1){
 8000b9a:	4b46      	ldr	r3, [pc, #280]	; (8000cb4 <fsm_for_input_processing+0x7f8>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d107      	bne.n	8000bb2 <fsm_for_input_processing+0x6f6>
			setTimer1(250);
 8000ba2:	20fa      	movs	r0, #250	; 0xfa
 8000ba4:	f7ff fad2 	bl	800014c <setTimer1>
			ledBlinking(LedToChange);
 8000ba8:	4b40      	ldr	r3, [pc, #256]	; (8000cac <fsm_for_input_processing+0x7f0>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 f9c5 	bl	8000f3c <ledBlinking>
		}
		/* BLINK SINGLE LED END */

		/* EXECUTE INPUT BUTTON2 START */
		if(button2_pressed()==FALSE){
 8000bb2:	f7ff fc43 	bl	800043c <button2_pressed>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d116      	bne.n	8000bea <fsm_for_input_processing+0x72e>
			switch(LedToChange){
 8000bbc:	4b3b      	ldr	r3, [pc, #236]	; (8000cac <fsm_for_input_processing+0x7f0>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d00a      	beq.n	8000bda <fsm_for_input_processing+0x71e>
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	dc11      	bgt.n	8000bec <fsm_for_input_processing+0x730>
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d002      	beq.n	8000bd2 <fsm_for_input_processing+0x716>
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d008      	beq.n	8000be2 <fsm_for_input_processing+0x726>
 8000bd0:	e00c      	b.n	8000bec <fsm_for_input_processing+0x730>
				case RED:
					state=MODE2;
 8000bd2:	4b34      	ldr	r3, [pc, #208]	; (8000ca4 <fsm_for_input_processing+0x7e8>)
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	701a      	strb	r2, [r3, #0]
					break;
 8000bd8:	e008      	b.n	8000bec <fsm_for_input_processing+0x730>
				case GREEN:
					state=MODE3;
 8000bda:	4b32      	ldr	r3, [pc, #200]	; (8000ca4 <fsm_for_input_processing+0x7e8>)
 8000bdc:	2203      	movs	r2, #3
 8000bde:	701a      	strb	r2, [r3, #0]
					break;
 8000be0:	e004      	b.n	8000bec <fsm_for_input_processing+0x730>
				case YELLOW:
					state=MODE4;
 8000be2:	4b30      	ldr	r3, [pc, #192]	; (8000ca4 <fsm_for_input_processing+0x7e8>)
 8000be4:	2204      	movs	r2, #4
 8000be6:	701a      	strb	r2, [r3, #0]
					break;
 8000be8:	e000      	b.n	8000bec <fsm_for_input_processing+0x730>
			}
		}
 8000bea:	bf00      	nop
		/* EXECUTE INPUT BUTTON2 START */

		/* INCREASE TEMP DURATION START */
		if(timer3_flag==1){
 8000bec:	4b38      	ldr	r3, [pc, #224]	; (8000cd0 <fsm_for_input_processing+0x814>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d134      	bne.n	8000c5e <fsm_for_input_processing+0x7a2>
			setTimer3(500);
 8000bf4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bf8:	f7ff fadc 	bl	80001b4 <setTimer3>
			increaseTempDur(LedToChange);
 8000bfc:	4b2b      	ldr	r3, [pc, #172]	; (8000cac <fsm_for_input_processing+0x7f0>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 f89f 	bl	8000d44 <increaseTempDur>
			/* UART TRANSMIT START */
				switch(LedToChange){
 8000c06:	4b29      	ldr	r3, [pc, #164]	; (8000cac <fsm_for_input_processing+0x7f0>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d00c      	beq.n	8000c28 <fsm_for_input_processing+0x76c>
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	dc16      	bgt.n	8000c40 <fsm_for_input_processing+0x784>
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d002      	beq.n	8000c1c <fsm_for_input_processing+0x760>
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d00c      	beq.n	8000c34 <fsm_for_input_processing+0x778>
 8000c1a:	e011      	b.n	8000c40 <fsm_for_input_processing+0x784>
					case RED:
						update_led_buffer(red_temp_dur);
 8000c1c:	4b26      	ldr	r3, [pc, #152]	; (8000cb8 <fsm_for_input_processing+0x7fc>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f000 fa8f 	bl	8001144 <update_led_buffer>
						break;
 8000c26:	e00b      	b.n	8000c40 <fsm_for_input_processing+0x784>
					case GREEN:
						update_led_buffer(green_temp_dur);
 8000c28:	4b24      	ldr	r3, [pc, #144]	; (8000cbc <fsm_for_input_processing+0x800>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 fa89 	bl	8001144 <update_led_buffer>
						break;
 8000c32:	e005      	b.n	8000c40 <fsm_for_input_processing+0x784>
					case YELLOW:
						update_led_buffer(yellow_temp_dur);
 8000c34:	4b22      	ldr	r3, [pc, #136]	; (8000cc0 <fsm_for_input_processing+0x804>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 fa83 	bl	8001144 <update_led_buffer>
						break;
 8000c3e:	bf00      	nop
				}
				HAL_UART_Transmit(huart, traffic_light_num,
				sprintf(traffic_light_num,"!7SEG:%d%d#\r",led_buffer1[0],led_buffer1[1]), 100);
 8000c40:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <fsm_for_input_processing+0x808>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b1f      	ldr	r3, [pc, #124]	; (8000cc4 <fsm_for_input_processing+0x808>)
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	491f      	ldr	r1, [pc, #124]	; (8000cc8 <fsm_for_input_processing+0x80c>)
 8000c4a:	4820      	ldr	r0, [pc, #128]	; (8000ccc <fsm_for_input_processing+0x810>)
 8000c4c:	f003 fa70 	bl	8004130 <siprintf>
 8000c50:	4603      	mov	r3, r0
				HAL_UART_Transmit(huart, traffic_light_num,
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	2364      	movs	r3, #100	; 0x64
 8000c56:	491d      	ldr	r1, [pc, #116]	; (8000ccc <fsm_for_input_processing+0x810>)
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f002 fdac 	bl	80037b6 <HAL_UART_Transmit>
			/* UART TRANSMIT END */

		/* INCREASE TEMP DURATION END */
		//TO DO
		/* UART TRANSMIT START */
		if(LedToChange==RED){
 8000c5e:	4b13      	ldr	r3, [pc, #76]	; (8000cac <fsm_for_input_processing+0x7f0>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d105      	bne.n	8000c72 <fsm_for_input_processing+0x7b6>
			update_led_buffer(red_temp_dur);
 8000c66:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <fsm_for_input_processing+0x7fc>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 fa6a 	bl	8001144 <update_led_buffer>
			update_led_buffer(green_temp_dur);
		}else if(LedToChange==YELLOW){
			update_led_buffer(yellow_temp_dur);
		}
		/* UART TRANSMIT END */
		break;
 8000c70:	e05d      	b.n	8000d2e <fsm_for_input_processing+0x872>
		}else if(LedToChange==GREEN){
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <fsm_for_input_processing+0x7f0>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d105      	bne.n	8000c86 <fsm_for_input_processing+0x7ca>
			update_led_buffer(green_temp_dur);
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <fsm_for_input_processing+0x800>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 fa60 	bl	8001144 <update_led_buffer>
		break;
 8000c84:	e053      	b.n	8000d2e <fsm_for_input_processing+0x872>
		}else if(LedToChange==YELLOW){
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <fsm_for_input_processing+0x7f0>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d14f      	bne.n	8000d2e <fsm_for_input_processing+0x872>
			update_led_buffer(yellow_temp_dur);
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <fsm_for_input_processing+0x804>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 fa56 	bl	8001144 <update_led_buffer>
		break;
 8000c98:	e049      	b.n	8000d2e <fsm_for_input_processing+0x872>
 8000c9a:	bf00      	nop
 8000c9c:	20000170 	.word	0x20000170
 8000ca0:	20000160 	.word	0x20000160
 8000ca4:	20000140 	.word	0x20000140
 8000ca8:	20000174 	.word	0x20000174
 8000cac:	20000178 	.word	0x20000178
 8000cb0:	20000164 	.word	0x20000164
 8000cb4:	200000c8 	.word	0x200000c8
 8000cb8:	20000134 	.word	0x20000134
 8000cbc:	2000013c 	.word	0x2000013c
 8000cc0:	20000138 	.word	0x20000138
 8000cc4:	2000017c 	.word	0x2000017c
 8000cc8:	08004a3c 	.word	0x08004a3c
 8000ccc:	200000e8 	.word	0x200000e8
 8000cd0:	200000d8 	.word	0x200000d8
	case UPDATE_DURATION:
		updateDuration(LedToChange);
 8000cd4:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <fsm_for_input_processing+0x880>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 f879 	bl	8000dd0 <updateDuration>
		if(button3_pressed()==FALSE){
 8000cde:	f7ff fbcd 	bl	800047c <button3_pressed>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d116      	bne.n	8000d16 <fsm_for_input_processing+0x85a>
			switch(LedToChange){
 8000ce8:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <fsm_for_input_processing+0x880>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d00a      	beq.n	8000d06 <fsm_for_input_processing+0x84a>
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	dc1e      	bgt.n	8000d32 <fsm_for_input_processing+0x876>
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d002      	beq.n	8000cfe <fsm_for_input_processing+0x842>
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d008      	beq.n	8000d0e <fsm_for_input_processing+0x852>
					state=MODE4;
					break;
			}
		}
		//TO DO
		break;
 8000cfc:	e019      	b.n	8000d32 <fsm_for_input_processing+0x876>
					state=MODE2;
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <fsm_for_input_processing+0x884>)
 8000d00:	2202      	movs	r2, #2
 8000d02:	701a      	strb	r2, [r3, #0]
					break;
 8000d04:	e008      	b.n	8000d18 <fsm_for_input_processing+0x85c>
					state=MODE3;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <fsm_for_input_processing+0x884>)
 8000d08:	2203      	movs	r2, #3
 8000d0a:	701a      	strb	r2, [r3, #0]
					break;
 8000d0c:	e004      	b.n	8000d18 <fsm_for_input_processing+0x85c>
					state=MODE4;
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <fsm_for_input_processing+0x884>)
 8000d10:	2204      	movs	r2, #4
 8000d12:	701a      	strb	r2, [r3, #0]
					break;
 8000d14:	e000      	b.n	8000d18 <fsm_for_input_processing+0x85c>
		}
 8000d16:	bf00      	nop
		break;
 8000d18:	e00b      	b.n	8000d32 <fsm_for_input_processing+0x876>
		break;
 8000d1a:	bf00      	nop
 8000d1c:	e00a      	b.n	8000d34 <fsm_for_input_processing+0x878>
		break;
 8000d1e:	bf00      	nop
 8000d20:	e008      	b.n	8000d34 <fsm_for_input_processing+0x878>
		break;
 8000d22:	bf00      	nop
 8000d24:	e006      	b.n	8000d34 <fsm_for_input_processing+0x878>
		break;
 8000d26:	bf00      	nop
 8000d28:	e004      	b.n	8000d34 <fsm_for_input_processing+0x878>
		break;
 8000d2a:	bf00      	nop
 8000d2c:	e002      	b.n	8000d34 <fsm_for_input_processing+0x878>
		break;
 8000d2e:	bf00      	nop
 8000d30:	e000      	b.n	8000d34 <fsm_for_input_processing+0x878>
		break;
 8000d32:	bf00      	nop
	}
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000178 	.word	0x20000178
 8000d40:	20000140 	.word	0x20000140

08000d44 <increaseTempDur>:


void increaseTempDur(enum LED color){
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
	switch(color){
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d020      	beq.n	8000d96 <increaseTempDur+0x52>
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	dc30      	bgt.n	8000dba <increaseTempDur+0x76>
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d002      	beq.n	8000d62 <increaseTempDur+0x1e>
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d00d      	beq.n	8000d7c <increaseTempDur+0x38>
			green_temp_dur++;
			if(red_temp_dur>99)
				green_temp_dur=1;
			break;
	}
}
 8000d60:	e02b      	b.n	8000dba <increaseTempDur+0x76>
			red_temp_dur++;
 8000d62:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <increaseTempDur+0x80>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	3301      	adds	r3, #1
 8000d68:	4a16      	ldr	r2, [pc, #88]	; (8000dc4 <increaseTempDur+0x80>)
 8000d6a:	6013      	str	r3, [r2, #0]
			if(red_temp_dur>99)
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <increaseTempDur+0x80>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b63      	cmp	r3, #99	; 0x63
 8000d72:	dd1d      	ble.n	8000db0 <increaseTempDur+0x6c>
				red_temp_dur=1;
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <increaseTempDur+0x80>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	601a      	str	r2, [r3, #0]
			break;
 8000d7a:	e019      	b.n	8000db0 <increaseTempDur+0x6c>
			yellow_temp_dur++;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <increaseTempDur+0x84>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	3301      	adds	r3, #1
 8000d82:	4a11      	ldr	r2, [pc, #68]	; (8000dc8 <increaseTempDur+0x84>)
 8000d84:	6013      	str	r3, [r2, #0]
			if(yellow_temp_dur>99)
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <increaseTempDur+0x84>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2b63      	cmp	r3, #99	; 0x63
 8000d8c:	dd12      	ble.n	8000db4 <increaseTempDur+0x70>
				yellow_temp_dur=1;
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <increaseTempDur+0x84>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	601a      	str	r2, [r3, #0]
			break;
 8000d94:	e00e      	b.n	8000db4 <increaseTempDur+0x70>
			green_temp_dur++;
 8000d96:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <increaseTempDur+0x88>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	4a0b      	ldr	r2, [pc, #44]	; (8000dcc <increaseTempDur+0x88>)
 8000d9e:	6013      	str	r3, [r2, #0]
			if(red_temp_dur>99)
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <increaseTempDur+0x80>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b63      	cmp	r3, #99	; 0x63
 8000da6:	dd07      	ble.n	8000db8 <increaseTempDur+0x74>
				green_temp_dur=1;
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <increaseTempDur+0x88>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	601a      	str	r2, [r3, #0]
			break;
 8000dae:	e003      	b.n	8000db8 <increaseTempDur+0x74>
			break;
 8000db0:	bf00      	nop
 8000db2:	e002      	b.n	8000dba <increaseTempDur+0x76>
			break;
 8000db4:	bf00      	nop
 8000db6:	e000      	b.n	8000dba <increaseTempDur+0x76>
			break;
 8000db8:	bf00      	nop
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr
 8000dc4:	20000134 	.word	0x20000134
 8000dc8:	20000138 	.word	0x20000138
 8000dcc:	2000013c 	.word	0x2000013c

08000dd0 <updateDuration>:

void updateDuration(enum LED color){
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
	switch(color){
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d010      	beq.n	8000e02 <updateDuration+0x32>
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	dc13      	bgt.n	8000e0c <updateDuration+0x3c>
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d002      	beq.n	8000dee <updateDuration+0x1e>
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d005      	beq.n	8000df8 <updateDuration+0x28>
			break;
		case GREEN:
			GREEN_DURATION=green_temp_dur;
			break;
	}
}
 8000dec:	e00e      	b.n	8000e0c <updateDuration+0x3c>
			RED_DURATION=red_temp_dur;
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <updateDuration+0x48>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <updateDuration+0x4c>)
 8000df4:	6013      	str	r3, [r2, #0]
			break;
 8000df6:	e009      	b.n	8000e0c <updateDuration+0x3c>
			YELLOW_DURATION=yellow_temp_dur;
 8000df8:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <updateDuration+0x50>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a09      	ldr	r2, [pc, #36]	; (8000e24 <updateDuration+0x54>)
 8000dfe:	6013      	str	r3, [r2, #0]
			break;
 8000e00:	e004      	b.n	8000e0c <updateDuration+0x3c>
			GREEN_DURATION=green_temp_dur;
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <updateDuration+0x58>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a09      	ldr	r2, [pc, #36]	; (8000e2c <updateDuration+0x5c>)
 8000e08:	6013      	str	r3, [r2, #0]
			break;
 8000e0a:	bf00      	nop
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000134 	.word	0x20000134
 8000e1c:	20000120 	.word	0x20000120
 8000e20:	20000138 	.word	0x20000138
 8000e24:	20000124 	.word	0x20000124
 8000e28:	2000013c 	.word	0x2000013c
 8000e2c:	20000128 	.word	0x20000128

08000e30 <displaySingleLedsMode1>:



void displaySingleLedsMode1(){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	if(current_led_way1==RED){
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <displaySingleLedsMode1+0x50>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d101      	bne.n	8000e40 <displaySingleLedsMode1+0x10>
		turnOnRed1();  // TURN ON RED LED
 8000e3c:	f000 f906 	bl	800104c <turnOnRed1>
	}
	if(current_led_way1==GREEN){
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <displaySingleLedsMode1+0x50>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d101      	bne.n	8000e4c <displaySingleLedsMode1+0x1c>
		turnOnGreen1();  // TURN ON GREEN LED
 8000e48:	f000 f8ec 	bl	8001024 <turnOnGreen1>
	}
	if(current_led_way1==YELLOW){
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <displaySingleLedsMode1+0x50>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d101      	bne.n	8000e58 <displaySingleLedsMode1+0x28>
		turnOnYellow1();  // TURN ON YELLOW LED
 8000e54:	f000 f90e 	bl	8001074 <turnOnYellow1>
	}

	if(current_led_way2==RED){
 8000e58:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <displaySingleLedsMode1+0x54>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d101      	bne.n	8000e64 <displaySingleLedsMode1+0x34>
		turnOnRed2();  // TURN ON RED LED
 8000e60:	f000 f940 	bl	80010e4 <turnOnRed2>
	}
	if(current_led_way2==GREEN){
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <displaySingleLedsMode1+0x54>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d101      	bne.n	8000e70 <displaySingleLedsMode1+0x40>
		turnOnGreen2();  // TURN ON GREEN LED
 8000e6c:	f000 f92a 	bl	80010c4 <turnOnGreen2>
	}
	if(current_led_way2==YELLOW){
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <displaySingleLedsMode1+0x54>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d101      	bne.n	8000e7c <displaySingleLedsMode1+0x4c>
		turnOnYellow2();  // TURN ON YELLOW LED
 8000e78:	f000 f944 	bl	8001104 <turnOnYellow2>
	}
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000141 	.word	0x20000141
 8000e84:	20000150 	.word	0x20000150

08000e88 <trafficLightCount>:

void trafficLightCount(int*leds_count,enum LED*current_led){
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
	if(*current_led==RED){
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d110      	bne.n	8000ebc <trafficLightCount+0x34>
		leds_count[0]--;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	1e5a      	subs	r2, r3, #1
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	601a      	str	r2, [r3, #0]
		if(leds_count[0]<=0){
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	dc34      	bgt.n	8000f16 <trafficLightCount+0x8e>
			leds_count[0]=RED_DURATION;
 8000eac:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <trafficLightCount+0x98>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	601a      	str	r2, [r3, #0]
			*current_led=GREEN;
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	701a      	strb	r2, [r3, #0]
		if(leds_count[2]<=0){
			leds_count[2]=YELLOW_DURATION;
			*current_led=RED;
		}
	}
}
 8000eba:	e02c      	b.n	8000f16 <trafficLightCount+0x8e>
	else if(*current_led==GREEN){
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d112      	bne.n	8000eea <trafficLightCount+0x62>
		leds_count[1]--;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3304      	adds	r3, #4
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	3a01      	subs	r2, #1
 8000ecc:	601a      	str	r2, [r3, #0]
		if(leds_count[1]<=0){
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	dc1e      	bgt.n	8000f16 <trafficLightCount+0x8e>
			leds_count[1]=GREEN_DURATION;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3304      	adds	r3, #4
 8000edc:	4a11      	ldr	r2, [pc, #68]	; (8000f24 <trafficLightCount+0x9c>)
 8000ede:	6812      	ldr	r2, [r2, #0]
 8000ee0:	601a      	str	r2, [r3, #0]
			*current_led=YELLOW;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	701a      	strb	r2, [r3, #0]
}
 8000ee8:	e015      	b.n	8000f16 <trafficLightCount+0x8e>
	else if(*current_led==YELLOW){
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d111      	bne.n	8000f16 <trafficLightCount+0x8e>
		leds_count[2]--;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3308      	adds	r3, #8
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	3a01      	subs	r2, #1
 8000efa:	601a      	str	r2, [r3, #0]
		if(leds_count[2]<=0){
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3308      	adds	r3, #8
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	dc07      	bgt.n	8000f16 <trafficLightCount+0x8e>
			leds_count[2]=YELLOW_DURATION;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3308      	adds	r3, #8
 8000f0a:	4a07      	ldr	r2, [pc, #28]	; (8000f28 <trafficLightCount+0xa0>)
 8000f0c:	6812      	ldr	r2, [r2, #0]
 8000f0e:	601a      	str	r2, [r3, #0]
			*current_led=RED;
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	2200      	movs	r2, #0
 8000f14:	701a      	strb	r2, [r3, #0]
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	20000120 	.word	0x20000120
 8000f24:	20000128 	.word	0x20000128
 8000f28:	20000124 	.word	0x20000124

08000f2c <turnOffSingleLed>:

void turnOffSingleLed(){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	turnOff1();
 8000f30:	f000 f8b4 	bl	800109c <turnOff1>
	turnOff2();
 8000f34:	f000 f8f6 	bl	8001124 <turnOff2>
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <ledBlinking>:

void ledBlinking(enum LED led_to_change){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
	if(led_state==0){
 8000f46:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <ledBlinking+0x6c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d11c      	bne.n	8000f88 <ledBlinking+0x4c>
		switch(led_to_change){
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d010      	beq.n	8000f76 <ledBlinking+0x3a>
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	dc13      	bgt.n	8000f80 <ledBlinking+0x44>
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d002      	beq.n	8000f62 <ledBlinking+0x26>
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d005      	beq.n	8000f6c <ledBlinking+0x30>
 8000f60:	e00e      	b.n	8000f80 <ledBlinking+0x44>
		case RED:
			turnOnRed1();
 8000f62:	f000 f873 	bl	800104c <turnOnRed1>
			turnOnRed2();
 8000f66:	f000 f8bd 	bl	80010e4 <turnOnRed2>
			break;
 8000f6a:	e009      	b.n	8000f80 <ledBlinking+0x44>
		case YELLOW:
			turnOnYellow1();
 8000f6c:	f000 f882 	bl	8001074 <turnOnYellow1>
			turnOnYellow2();
 8000f70:	f000 f8c8 	bl	8001104 <turnOnYellow2>
			break;
 8000f74:	e004      	b.n	8000f80 <ledBlinking+0x44>
		case GREEN:
			turnOnGreen1();
 8000f76:	f000 f855 	bl	8001024 <turnOnGreen1>
			turnOnGreen2();
 8000f7a:	f000 f8a3 	bl	80010c4 <turnOnGreen2>
			break;
 8000f7e:	bf00      	nop
		}
		led_state=1;
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <ledBlinking+0x6c>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	601a      	str	r2, [r3, #0]
		turnOff1();
		turnOff2();
		led_state=0;
	}

}
 8000f86:	e00a      	b.n	8000f9e <ledBlinking+0x62>
	}else if(led_state==1){
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <ledBlinking+0x6c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d106      	bne.n	8000f9e <ledBlinking+0x62>
		turnOff1();
 8000f90:	f000 f884 	bl	800109c <turnOff1>
		turnOff2();
 8000f94:	f000 f8c6 	bl	8001124 <turnOff2>
		led_state=0;
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <ledBlinking+0x6c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000170 	.word	0x20000170

08000fac <PES_LED_ON>:

void PES_LED_ON(){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <PES_LED_ON+0x20>)
 8000fb8:	f001 f81f 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 1);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fc2:	4803      	ldr	r0, [pc, #12]	; (8000fd0 <PES_LED_ON+0x24>)
 8000fc4:	f001 f819 	bl	8001ffa <HAL_GPIO_WritePin>
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40010c00 	.word	0x40010c00
 8000fd0:	40010800 	.word	0x40010800

08000fd4 <PES_LED_RED>:
void PES_LED_RED(){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <PES_LED_RED+0x20>)
 8000fe0:	f001 f80b 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fea:	4803      	ldr	r0, [pc, #12]	; (8000ff8 <PES_LED_RED+0x24>)
 8000fec:	f001 f805 	bl	8001ffa <HAL_GPIO_WritePin>
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40010c00 	.word	0x40010c00
 8000ff8:	40010800 	.word	0x40010800

08000ffc <PES_LED_OFF>:
void PES_LED_OFF(){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <PES_LED_OFF+0x20>)
 8001008:	f000 fff7 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 0);
 800100c:	2200      	movs	r2, #0
 800100e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001012:	4803      	ldr	r0, [pc, #12]	; (8001020 <PES_LED_OFF+0x24>)
 8001014:	f000 fff1 	bl	8001ffa <HAL_GPIO_WritePin>
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40010c00 	.word	0x40010c00
 8001020:	40010800 	.word	0x40010800

08001024 <turnOnGreen1>:
void turnOnGreen1(){
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
 8001028:	2200      	movs	r2, #0
 800102a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <turnOnGreen1+0x20>)
 8001030:	f000 ffe3 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 8001034:	2201      	movs	r2, #1
 8001036:	2108      	movs	r1, #8
 8001038:	4803      	ldr	r0, [pc, #12]	; (8001048 <turnOnGreen1+0x24>)
 800103a:	f000 ffde 	bl	8001ffa <HAL_GPIO_WritePin>
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40010800 	.word	0x40010800
 8001048:	40010c00 	.word	0x40010c00

0800104c <turnOnRed1>:
void turnOnRed1(){
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 8001050:	2201      	movs	r2, #1
 8001052:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <turnOnRed1+0x20>)
 8001058:	f000 ffcf 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 800105c:	2200      	movs	r2, #0
 800105e:	2108      	movs	r1, #8
 8001060:	4803      	ldr	r0, [pc, #12]	; (8001070 <turnOnRed1+0x24>)
 8001062:	f000 ffca 	bl	8001ffa <HAL_GPIO_WritePin>
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40010800 	.word	0x40010800
 8001070:	40010c00 	.word	0x40010c00

08001074 <turnOnYellow1>:
void turnOnYellow1(){
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 8001078:	2201      	movs	r2, #1
 800107a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <turnOnYellow1+0x20>)
 8001080:	f000 ffbb 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 8001084:	2201      	movs	r2, #1
 8001086:	2108      	movs	r1, #8
 8001088:	4803      	ldr	r0, [pc, #12]	; (8001098 <turnOnYellow1+0x24>)
 800108a:	f000 ffb6 	bl	8001ffa <HAL_GPIO_WritePin>
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40010800 	.word	0x40010800
 8001098:	40010c00 	.word	0x40010c00

0800109c <turnOff1>:
void turnOff1(){
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010a6:	4805      	ldr	r0, [pc, #20]	; (80010bc <turnOff1+0x20>)
 80010a8:	f000 ffa7 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2108      	movs	r1, #8
 80010b0:	4803      	ldr	r0, [pc, #12]	; (80010c0 <turnOff1+0x24>)
 80010b2:	f000 ffa2 	bl	8001ffa <HAL_GPIO_WritePin>
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40010800 	.word	0x40010800
 80010c0:	40010c00 	.word	0x40010c00

080010c4 <turnOnGreen2>:
void turnOnGreen2(){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2120      	movs	r1, #32
 80010cc:	4804      	ldr	r0, [pc, #16]	; (80010e0 <turnOnGreen2+0x1c>)
 80010ce:	f000 ff94 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 80010d2:	2201      	movs	r2, #1
 80010d4:	2110      	movs	r1, #16
 80010d6:	4802      	ldr	r0, [pc, #8]	; (80010e0 <turnOnGreen2+0x1c>)
 80010d8:	f000 ff8f 	bl	8001ffa <HAL_GPIO_WritePin>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40010c00 	.word	0x40010c00

080010e4 <turnOnRed2>:
void turnOnRed2(){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 80010e8:	2201      	movs	r2, #1
 80010ea:	2120      	movs	r1, #32
 80010ec:	4804      	ldr	r0, [pc, #16]	; (8001100 <turnOnRed2+0x1c>)
 80010ee:	f000 ff84 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2110      	movs	r1, #16
 80010f6:	4802      	ldr	r0, [pc, #8]	; (8001100 <turnOnRed2+0x1c>)
 80010f8:	f000 ff7f 	bl	8001ffa <HAL_GPIO_WritePin>
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40010c00 	.word	0x40010c00

08001104 <turnOnYellow2>:
void turnOnYellow2(){
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 8001108:	2201      	movs	r2, #1
 800110a:	2120      	movs	r1, #32
 800110c:	4804      	ldr	r0, [pc, #16]	; (8001120 <turnOnYellow2+0x1c>)
 800110e:	f000 ff74 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8001112:	2201      	movs	r2, #1
 8001114:	2110      	movs	r1, #16
 8001116:	4802      	ldr	r0, [pc, #8]	; (8001120 <turnOnYellow2+0x1c>)
 8001118:	f000 ff6f 	bl	8001ffa <HAL_GPIO_WritePin>
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40010c00 	.word	0x40010c00

08001124 <turnOff2>:
void turnOff2(){
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8001128:	2200      	movs	r2, #0
 800112a:	2120      	movs	r1, #32
 800112c:	4804      	ldr	r0, [pc, #16]	; (8001140 <turnOff2+0x1c>)
 800112e:	f000 ff64 	bl	8001ffa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2110      	movs	r1, #16
 8001136:	4802      	ldr	r0, [pc, #8]	; (8001140 <turnOff2+0x1c>)
 8001138:	f000 ff5f 	bl	8001ffa <HAL_GPIO_WritePin>
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40010c00 	.word	0x40010c00

08001144 <update_led_buffer>:
void update_led_buffer(int val){
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	led_buffer1[0]=val/10;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a0d      	ldr	r2, [pc, #52]	; (8001184 <update_led_buffer+0x40>)
 8001150:	fb82 1203 	smull	r1, r2, r2, r3
 8001154:	1092      	asrs	r2, r2, #2
 8001156:	17db      	asrs	r3, r3, #31
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <update_led_buffer+0x44>)
 800115c:	6013      	str	r3, [r2, #0]
	led_buffer1[1]=val%10;
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <update_led_buffer+0x40>)
 8001162:	fb83 2301 	smull	r2, r3, r3, r1
 8001166:	109a      	asrs	r2, r3, #2
 8001168:	17cb      	asrs	r3, r1, #31
 800116a:	1ad2      	subs	r2, r2, r3
 800116c:	4613      	mov	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	1aca      	subs	r2, r1, r3
 8001176:	4b04      	ldr	r3, [pc, #16]	; (8001188 <update_led_buffer+0x44>)
 8001178:	605a      	str	r2, [r3, #4]
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr
 8001184:	66666667 	.word	0x66666667
 8001188:	2000017c 	.word	0x2000017c

0800118c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001190:	f000 fb78 	bl	8001884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001194:	f000 f82a 	bl	80011ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001198:	f000 f950 	bl	800143c <MX_GPIO_Init>
  MX_TIM3_Init();
 800119c:	f000 f8ae 	bl	80012fc <MX_TIM3_Init>
  MX_TIM2_Init();
 80011a0:	f000 f860 	bl	8001264 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80011a4:	f000 f920 	bl	80013e8 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 80011a8:	480a      	ldr	r0, [pc, #40]	; (80011d4 <main+0x48>)
 80011aa:	f001 fba9 	bl	8002900 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011ae:	2100      	movs	r1, #0
 80011b0:	4809      	ldr	r0, [pc, #36]	; (80011d8 <main+0x4c>)
 80011b2:	f001 fc4f 	bl	8002a54 <HAL_TIM_PWM_Start>
  RED_DURATION=5;
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <main+0x50>)
 80011b8:	2205      	movs	r2, #5
 80011ba:	601a      	str	r2, [r3, #0]
  YELLOW_DURATION=2;
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <main+0x54>)
 80011be:	2202      	movs	r2, #2
 80011c0:	601a      	str	r2, [r3, #0]
  GREEN_DURATION=3;
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <main+0x58>)
 80011c4:	2203      	movs	r2, #3
 80011c6:	601a      	str	r2, [r3, #0]
  while (1)
  {


	  fsm_for_input_processing(&huart2, &htim3);
 80011c8:	4903      	ldr	r1, [pc, #12]	; (80011d8 <main+0x4c>)
 80011ca:	4807      	ldr	r0, [pc, #28]	; (80011e8 <main+0x5c>)
 80011cc:	f7ff f976 	bl	80004bc <fsm_for_input_processing>
 80011d0:	e7fa      	b.n	80011c8 <main+0x3c>
 80011d2:	bf00      	nop
 80011d4:	20000184 	.word	0x20000184
 80011d8:	200001cc 	.word	0x200001cc
 80011dc:	20000120 	.word	0x20000120
 80011e0:	20000124 	.word	0x20000124
 80011e4:	20000128 	.word	0x20000128
 80011e8:	20000214 	.word	0x20000214

080011ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b090      	sub	sp, #64	; 0x40
 80011f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f2:	f107 0318 	add.w	r3, r7, #24
 80011f6:	2228      	movs	r2, #40	; 0x28
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f002 ff90 	bl	8004120 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001200:	1d3b      	adds	r3, r7, #4
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800120e:	2302      	movs	r3, #2
 8001210:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001212:	2301      	movs	r3, #1
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001216:	2310      	movs	r3, #16
 8001218:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800121a:	2300      	movs	r3, #0
 800121c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121e:	f107 0318 	add.w	r3, r7, #24
 8001222:	4618      	mov	r0, r3
 8001224:	f000 ff02 	bl	800202c <HAL_RCC_OscConfig>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800122e:	f000 f985 	bl	800153c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001232:	230f      	movs	r3, #15
 8001234:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f001 f970 	bl	8002530 <HAL_RCC_ClockConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001256:	f000 f971 	bl	800153c <Error_Handler>
  }
}
 800125a:	bf00      	nop
 800125c:	3740      	adds	r7, #64	; 0x40
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126a:	f107 0308 	add.w	r3, r7, #8
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001278:	463b      	mov	r3, r7
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001280:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <MX_TIM2_Init+0x94>)
 8001282:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001286:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001288:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <MX_TIM2_Init+0x94>)
 800128a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800128e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001290:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <MX_TIM2_Init+0x94>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001296:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <MX_TIM2_Init+0x94>)
 8001298:	2209      	movs	r2, #9
 800129a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129c:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <MX_TIM2_Init+0x94>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <MX_TIM2_Init+0x94>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012a8:	4813      	ldr	r0, [pc, #76]	; (80012f8 <MX_TIM2_Init+0x94>)
 80012aa:	f001 fad9 	bl	8002860 <HAL_TIM_Base_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012b4:	f000 f942 	bl	800153c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012be:	f107 0308 	add.w	r3, r7, #8
 80012c2:	4619      	mov	r1, r3
 80012c4:	480c      	ldr	r0, [pc, #48]	; (80012f8 <MX_TIM2_Init+0x94>)
 80012c6:	f001 fe2d 	bl	8002f24 <HAL_TIM_ConfigClockSource>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012d0:	f000 f934 	bl	800153c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d4:	2300      	movs	r3, #0
 80012d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012dc:	463b      	mov	r3, r7
 80012de:	4619      	mov	r1, r3
 80012e0:	4805      	ldr	r0, [pc, #20]	; (80012f8 <MX_TIM2_Init+0x94>)
 80012e2:	f002 f9ab 	bl	800363c <HAL_TIMEx_MasterConfigSynchronization>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012ec:	f000 f926 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000184 	.word	0x20000184

080012fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08e      	sub	sp, #56	; 0x38
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001302:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001310:	f107 0320 	add.w	r3, r7, #32
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
 8001328:	615a      	str	r2, [r3, #20]
 800132a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800132c:	4b2c      	ldr	r3, [pc, #176]	; (80013e0 <MX_TIM3_Init+0xe4>)
 800132e:	4a2d      	ldr	r2, [pc, #180]	; (80013e4 <MX_TIM3_Init+0xe8>)
 8001330:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001332:	4b2b      	ldr	r3, [pc, #172]	; (80013e0 <MX_TIM3_Init+0xe4>)
 8001334:	223f      	movs	r2, #63	; 0x3f
 8001336:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001338:	4b29      	ldr	r3, [pc, #164]	; (80013e0 <MX_TIM3_Init+0xe4>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800133e:	4b28      	ldr	r3, [pc, #160]	; (80013e0 <MX_TIM3_Init+0xe4>)
 8001340:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001344:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001346:	4b26      	ldr	r3, [pc, #152]	; (80013e0 <MX_TIM3_Init+0xe4>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134c:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <MX_TIM3_Init+0xe4>)
 800134e:	2200      	movs	r2, #0
 8001350:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001352:	4823      	ldr	r0, [pc, #140]	; (80013e0 <MX_TIM3_Init+0xe4>)
 8001354:	f001 fa84 	bl	8002860 <HAL_TIM_Base_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800135e:	f000 f8ed 	bl	800153c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001368:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800136c:	4619      	mov	r1, r3
 800136e:	481c      	ldr	r0, [pc, #112]	; (80013e0 <MX_TIM3_Init+0xe4>)
 8001370:	f001 fdd8 	bl	8002f24 <HAL_TIM_ConfigClockSource>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800137a:	f000 f8df 	bl	800153c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800137e:	4818      	ldr	r0, [pc, #96]	; (80013e0 <MX_TIM3_Init+0xe4>)
 8001380:	f001 fb10 	bl	80029a4 <HAL_TIM_PWM_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800138a:	f000 f8d7 	bl	800153c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001392:	2300      	movs	r3, #0
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001396:	f107 0320 	add.w	r3, r7, #32
 800139a:	4619      	mov	r1, r3
 800139c:	4810      	ldr	r0, [pc, #64]	; (80013e0 <MX_TIM3_Init+0xe4>)
 800139e:	f002 f94d 	bl	800363c <HAL_TIMEx_MasterConfigSynchronization>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80013a8:	f000 f8c8 	bl	800153c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ac:	2360      	movs	r3, #96	; 0x60
 80013ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2200      	movs	r2, #0
 80013c0:	4619      	mov	r1, r3
 80013c2:	4807      	ldr	r0, [pc, #28]	; (80013e0 <MX_TIM3_Init+0xe4>)
 80013c4:	f001 fcf0 	bl	8002da8 <HAL_TIM_PWM_ConfigChannel>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80013ce:	f000 f8b5 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013d2:	4803      	ldr	r0, [pc, #12]	; (80013e0 <MX_TIM3_Init+0xe4>)
 80013d4:	f000 f92a 	bl	800162c <HAL_TIM_MspPostInit>

}
 80013d8:	bf00      	nop
 80013da:	3738      	adds	r7, #56	; 0x38
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	200001cc 	.word	0x200001cc
 80013e4:	40000400 	.word	0x40000400

080013e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <MX_USART2_UART_Init+0x4c>)
 80013ee:	4a12      	ldr	r2, [pc, #72]	; (8001438 <MX_USART2_UART_Init+0x50>)
 80013f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <MX_USART2_UART_Init+0x4c>)
 80013f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <MX_USART2_UART_Init+0x4c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <MX_USART2_UART_Init+0x4c>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <MX_USART2_UART_Init+0x4c>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800140c:	4b09      	ldr	r3, [pc, #36]	; (8001434 <MX_USART2_UART_Init+0x4c>)
 800140e:	220c      	movs	r2, #12
 8001410:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001412:	4b08      	ldr	r3, [pc, #32]	; (8001434 <MX_USART2_UART_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <MX_USART2_UART_Init+0x4c>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800141e:	4805      	ldr	r0, [pc, #20]	; (8001434 <MX_USART2_UART_Init+0x4c>)
 8001420:	f002 f97c 	bl	800371c <HAL_UART_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800142a:	f000 f887 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000214 	.word	0x20000214
 8001438:	40004400 	.word	0x40004400

0800143c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001442:	f107 0308 	add.w	r3, r7, #8
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001450:	4b2e      	ldr	r3, [pc, #184]	; (800150c <MX_GPIO_Init+0xd0>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	4a2d      	ldr	r2, [pc, #180]	; (800150c <MX_GPIO_Init+0xd0>)
 8001456:	f043 0304 	orr.w	r3, r3, #4
 800145a:	6193      	str	r3, [r2, #24]
 800145c:	4b2b      	ldr	r3, [pc, #172]	; (800150c <MX_GPIO_Init+0xd0>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001468:	4b28      	ldr	r3, [pc, #160]	; (800150c <MX_GPIO_Init+0xd0>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4a27      	ldr	r2, [pc, #156]	; (800150c <MX_GPIO_Init+0xd0>)
 800146e:	f043 0308 	orr.w	r3, r3, #8
 8001472:	6193      	str	r3, [r2, #24]
 8001474:	4b25      	ldr	r3, [pc, #148]	; (800150c <MX_GPIO_Init+0xd0>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	f003 0308 	and.w	r3, r3, #8
 800147c:	603b      	str	r3, [r7, #0]
 800147e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001486:	4822      	ldr	r0, [pc, #136]	; (8001510 <MX_GPIO_Init+0xd4>)
 8001488:	f000 fdb7 	bl	8001ffa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 800148c:	2200      	movs	r2, #0
 800148e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001492:	4820      	ldr	r0, [pc, #128]	; (8001514 <MX_GPIO_Init+0xd8>)
 8001494:	f000 fdb1 	bl	8001ffa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Button4_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button4_Pin|Button1_Pin|Button2_Pin;
 8001498:	2313      	movs	r3, #19
 800149a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	4619      	mov	r1, r3
 80014aa:	481a      	ldr	r0, [pc, #104]	; (8001514 <MX_GPIO_Init+0xd8>)
 80014ac:	f000 fc0a 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 80014b0:	2301      	movs	r3, #1
 80014b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 80014bc:	f107 0308 	add.w	r3, r7, #8
 80014c0:	4619      	mov	r1, r3
 80014c2:	4813      	ldr	r0, [pc, #76]	; (8001510 <MX_GPIO_Init+0xd4>)
 80014c4:	f000 fbfe 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 80014c8:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80014cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ce:	2301      	movs	r3, #1
 80014d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2302      	movs	r3, #2
 80014d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014da:	f107 0308 	add.w	r3, r7, #8
 80014de:	4619      	mov	r1, r3
 80014e0:	480b      	ldr	r0, [pc, #44]	; (8001510 <MX_GPIO_Init+0xd4>)
 80014e2:	f000 fbef 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 80014e6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80014ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2302      	movs	r3, #2
 80014f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f8:	f107 0308 	add.w	r3, r7, #8
 80014fc:	4619      	mov	r1, r3
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_GPIO_Init+0xd8>)
 8001500:	f000 fbe0 	bl	8001cc4 <HAL_GPIO_Init>

}
 8001504:	bf00      	nop
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40021000 	.word	0x40021000
 8001510:	40010c00 	.word	0x40010c00
 8001514:	40010800 	.word	0x40010800

08001518 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef*htim){
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	TimerRun();
 8001520:	f7fe fe7c 	bl	800021c <TimerRun>
	button1_reading();
 8001524:	f7fe fed0 	bl	80002c8 <button1_reading>
	button2_reading();
 8001528:	f7fe fef0 	bl	800030c <button2_reading>
	button3_reading();
 800152c:	f7fe ff32 	bl	8000394 <button3_reading>
	button4_reading();
 8001530:	f7fe ff52 	bl	80003d8 <button4_reading>
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001540:	b672      	cpsid	i
}
 8001542:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001544:	e7fe      	b.n	8001544 <Error_Handler+0x8>
	...

08001548 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <HAL_MspInit+0x5c>)
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	4a14      	ldr	r2, [pc, #80]	; (80015a4 <HAL_MspInit+0x5c>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6193      	str	r3, [r2, #24]
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_MspInit+0x5c>)
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001566:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <HAL_MspInit+0x5c>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	4a0e      	ldr	r2, [pc, #56]	; (80015a4 <HAL_MspInit+0x5c>)
 800156c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001570:	61d3      	str	r3, [r2, #28]
 8001572:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <HAL_MspInit+0x5c>)
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800157e:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <HAL_MspInit+0x60>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <HAL_MspInit+0x60>)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800159a:	bf00      	nop
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40010000 	.word	0x40010000

080015ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015bc:	d114      	bne.n	80015e8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015be:	4b19      	ldr	r3, [pc, #100]	; (8001624 <HAL_TIM_Base_MspInit+0x78>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	4a18      	ldr	r2, [pc, #96]	; (8001624 <HAL_TIM_Base_MspInit+0x78>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	61d3      	str	r3, [r2, #28]
 80015ca:	4b16      	ldr	r3, [pc, #88]	; (8001624 <HAL_TIM_Base_MspInit+0x78>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2100      	movs	r1, #0
 80015da:	201c      	movs	r0, #28
 80015dc:	f000 fa8b 	bl	8001af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015e0:	201c      	movs	r0, #28
 80015e2:	f000 faa4 	bl	8001b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015e6:	e018      	b.n	800161a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a0e      	ldr	r2, [pc, #56]	; (8001628 <HAL_TIM_Base_MspInit+0x7c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d113      	bne.n	800161a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <HAL_TIM_Base_MspInit+0x78>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <HAL_TIM_Base_MspInit+0x78>)
 80015f8:	f043 0302 	orr.w	r3, r3, #2
 80015fc:	61d3      	str	r3, [r2, #28]
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <HAL_TIM_Base_MspInit+0x78>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2100      	movs	r1, #0
 800160e:	201d      	movs	r0, #29
 8001610:	f000 fa71 	bl	8001af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001614:	201d      	movs	r0, #29
 8001616:	f000 fa8a 	bl	8001b2e <HAL_NVIC_EnableIRQ>
}
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40021000 	.word	0x40021000
 8001628:	40000400 	.word	0x40000400

0800162c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 0310 	add.w	r3, r7, #16
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a0f      	ldr	r2, [pc, #60]	; (8001684 <HAL_TIM_MspPostInit+0x58>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d117      	bne.n	800167c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164c:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <HAL_TIM_MspPostInit+0x5c>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	4a0d      	ldr	r2, [pc, #52]	; (8001688 <HAL_TIM_MspPostInit+0x5c>)
 8001652:	f043 0304 	orr.w	r3, r3, #4
 8001656:	6193      	str	r3, [r2, #24]
 8001658:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <HAL_TIM_MspPostInit+0x5c>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001664:	2340      	movs	r3, #64	; 0x40
 8001666:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166c:	2302      	movs	r3, #2
 800166e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001670:	f107 0310 	add.w	r3, r7, #16
 8001674:	4619      	mov	r1, r3
 8001676:	4805      	ldr	r0, [pc, #20]	; (800168c <HAL_TIM_MspPostInit+0x60>)
 8001678:	f000 fb24 	bl	8001cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800167c:	bf00      	nop
 800167e:	3720      	adds	r7, #32
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40000400 	.word	0x40000400
 8001688:	40021000 	.word	0x40021000
 800168c:	40010800 	.word	0x40010800

08001690 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 0310 	add.w	r3, r7, #16
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a1f      	ldr	r2, [pc, #124]	; (8001728 <HAL_UART_MspInit+0x98>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d137      	bne.n	8001720 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016b0:	4b1e      	ldr	r3, [pc, #120]	; (800172c <HAL_UART_MspInit+0x9c>)
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	4a1d      	ldr	r2, [pc, #116]	; (800172c <HAL_UART_MspInit+0x9c>)
 80016b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ba:	61d3      	str	r3, [r2, #28]
 80016bc:	4b1b      	ldr	r3, [pc, #108]	; (800172c <HAL_UART_MspInit+0x9c>)
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c8:	4b18      	ldr	r3, [pc, #96]	; (800172c <HAL_UART_MspInit+0x9c>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	4a17      	ldr	r2, [pc, #92]	; (800172c <HAL_UART_MspInit+0x9c>)
 80016ce:	f043 0304 	orr.w	r3, r3, #4
 80016d2:	6193      	str	r3, [r2, #24]
 80016d4:	4b15      	ldr	r3, [pc, #84]	; (800172c <HAL_UART_MspInit+0x9c>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016e0:	2304      	movs	r3, #4
 80016e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e8:	2303      	movs	r3, #3
 80016ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ec:	f107 0310 	add.w	r3, r7, #16
 80016f0:	4619      	mov	r1, r3
 80016f2:	480f      	ldr	r0, [pc, #60]	; (8001730 <HAL_UART_MspInit+0xa0>)
 80016f4:	f000 fae6 	bl	8001cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016f8:	2308      	movs	r3, #8
 80016fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001704:	f107 0310 	add.w	r3, r7, #16
 8001708:	4619      	mov	r1, r3
 800170a:	4809      	ldr	r0, [pc, #36]	; (8001730 <HAL_UART_MspInit+0xa0>)
 800170c:	f000 fada 	bl	8001cc4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001710:	2200      	movs	r2, #0
 8001712:	2100      	movs	r1, #0
 8001714:	2026      	movs	r0, #38	; 0x26
 8001716:	f000 f9ee 	bl	8001af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800171a:	2026      	movs	r0, #38	; 0x26
 800171c:	f000 fa07 	bl	8001b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001720:	bf00      	nop
 8001722:	3720      	adds	r7, #32
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40004400 	.word	0x40004400
 800172c:	40021000 	.word	0x40021000
 8001730:	40010800 	.word	0x40010800

08001734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001738:	e7fe      	b.n	8001738 <NMI_Handler+0x4>

0800173a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173e:	e7fe      	b.n	800173e <HardFault_Handler+0x4>

08001740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <MemManage_Handler+0x4>

08001746 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174a:	e7fe      	b.n	800174a <BusFault_Handler+0x4>

0800174c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <UsageFault_Handler+0x4>

08001752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr

0800175e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr

0800176a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr

08001776 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800177a:	f000 f8c9 	bl	8001910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001788:	4802      	ldr	r0, [pc, #8]	; (8001794 <TIM2_IRQHandler+0x10>)
 800178a:	f001 fa05 	bl	8002b98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000184 	.word	0x20000184

08001798 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800179c:	4802      	ldr	r0, [pc, #8]	; (80017a8 <TIM3_IRQHandler+0x10>)
 800179e:	f001 f9fb 	bl	8002b98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200001cc 	.word	0x200001cc

080017ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017b0:	4802      	ldr	r0, [pc, #8]	; (80017bc <USART2_IRQHandler+0x10>)
 80017b2:	f002 f893 	bl	80038dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000214 	.word	0x20000214

080017c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c8:	4a14      	ldr	r2, [pc, #80]	; (800181c <_sbrk+0x5c>)
 80017ca:	4b15      	ldr	r3, [pc, #84]	; (8001820 <_sbrk+0x60>)
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d4:	4b13      	ldr	r3, [pc, #76]	; (8001824 <_sbrk+0x64>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d102      	bne.n	80017e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017dc:	4b11      	ldr	r3, [pc, #68]	; (8001824 <_sbrk+0x64>)
 80017de:	4a12      	ldr	r2, [pc, #72]	; (8001828 <_sbrk+0x68>)
 80017e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <_sbrk+0x64>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d207      	bcs.n	8001800 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f0:	f002 fc6c 	bl	80040cc <__errno>
 80017f4:	4603      	mov	r3, r0
 80017f6:	220c      	movs	r2, #12
 80017f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017fa:	f04f 33ff 	mov.w	r3, #4294967295
 80017fe:	e009      	b.n	8001814 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <_sbrk+0x64>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001806:	4b07      	ldr	r3, [pc, #28]	; (8001824 <_sbrk+0x64>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	4a05      	ldr	r2, [pc, #20]	; (8001824 <_sbrk+0x64>)
 8001810:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001812:	68fb      	ldr	r3, [r7, #12]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20005000 	.word	0x20005000
 8001820:	00000400 	.word	0x00000400
 8001824:	20000258 	.word	0x20000258
 8001828:	20000270 	.word	0x20000270

0800182c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr

08001838 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001838:	480c      	ldr	r0, [pc, #48]	; (800186c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800183a:	490d      	ldr	r1, [pc, #52]	; (8001870 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800183c:	4a0d      	ldr	r2, [pc, #52]	; (8001874 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800183e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001840:	e002      	b.n	8001848 <LoopCopyDataInit>

08001842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001846:	3304      	adds	r3, #4

08001848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800184a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800184c:	d3f9      	bcc.n	8001842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184e:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001850:	4c0a      	ldr	r4, [pc, #40]	; (800187c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001854:	e001      	b.n	800185a <LoopFillZerobss>

08001856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001858:	3204      	adds	r2, #4

0800185a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800185a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800185c:	d3fb      	bcc.n	8001856 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800185e:	f7ff ffe5 	bl	800182c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001862:	f002 fc39 	bl	80040d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001866:	f7ff fc91 	bl	800118c <main>
  bx lr
 800186a:	4770      	bx	lr
  ldr r0, =_sdata
 800186c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001870:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001874:	08004ab0 	.word	0x08004ab0
  ldr r2, =_sbss
 8001878:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 800187c:	20000270 	.word	0x20000270

08001880 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001880:	e7fe      	b.n	8001880 <ADC1_2_IRQHandler>
	...

08001884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <HAL_Init+0x28>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a07      	ldr	r2, [pc, #28]	; (80018ac <HAL_Init+0x28>)
 800188e:	f043 0310 	orr.w	r3, r3, #16
 8001892:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001894:	2003      	movs	r0, #3
 8001896:	f000 f923 	bl	8001ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800189a:	200f      	movs	r0, #15
 800189c:	f000 f808 	bl	80018b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a0:	f7ff fe52 	bl	8001548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40022000 	.word	0x40022000

080018b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_InitTick+0x54>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <HAL_InitTick+0x58>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 f93b 	bl	8001b4a <HAL_SYSTICK_Config>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e00e      	b.n	80018fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b0f      	cmp	r3, #15
 80018e2:	d80a      	bhi.n	80018fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e4:	2200      	movs	r2, #0
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ec:	f000 f903 	bl	8001af6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018f0:	4a06      	ldr	r2, [pc, #24]	; (800190c <HAL_InitTick+0x5c>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e000      	b.n	80018fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000038 	.word	0x20000038
 8001908:	20000040 	.word	0x20000040
 800190c:	2000003c 	.word	0x2000003c

08001910 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <HAL_IncTick+0x1c>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_IncTick+0x20>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4413      	add	r3, r2
 8001920:	4a03      	ldr	r2, [pc, #12]	; (8001930 <HAL_IncTick+0x20>)
 8001922:	6013      	str	r3, [r2, #0]
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr
 800192c:	20000040 	.word	0x20000040
 8001930:	2000025c 	.word	0x2000025c

08001934 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return uwTick;
 8001938:	4b02      	ldr	r3, [pc, #8]	; (8001944 <HAL_GetTick+0x10>)
 800193a:	681b      	ldr	r3, [r3, #0]
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr
 8001944:	2000025c 	.word	0x2000025c

08001948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001964:	4013      	ands	r3, r2
 8001966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197a:	4a04      	ldr	r2, [pc, #16]	; (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	60d3      	str	r3, [r2, #12]
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001994:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	0a1b      	lsrs	r3, r3, #8
 800199a:	f003 0307 	and.w	r3, r3, #7
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	db0b      	blt.n	80019d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	f003 021f 	and.w	r2, r3, #31
 80019c4:	4906      	ldr	r1, [pc, #24]	; (80019e0 <__NVIC_EnableIRQ+0x34>)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	095b      	lsrs	r3, r3, #5
 80019cc:	2001      	movs	r0, #1
 80019ce:	fa00 f202 	lsl.w	r2, r0, r2
 80019d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	e000e100 	.word	0xe000e100

080019e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	6039      	str	r1, [r7, #0]
 80019ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	db0a      	blt.n	8001a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	490c      	ldr	r1, [pc, #48]	; (8001a30 <__NVIC_SetPriority+0x4c>)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	0112      	lsls	r2, r2, #4
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	440b      	add	r3, r1
 8001a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a0c:	e00a      	b.n	8001a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	4908      	ldr	r1, [pc, #32]	; (8001a34 <__NVIC_SetPriority+0x50>)
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	3b04      	subs	r3, #4
 8001a1c:	0112      	lsls	r2, r2, #4
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	440b      	add	r3, r1
 8001a22:	761a      	strb	r2, [r3, #24]
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000e100 	.word	0xe000e100
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f1c3 0307 	rsb	r3, r3, #7
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	bf28      	it	cs
 8001a56:	2304      	movcs	r3, #4
 8001a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	2b06      	cmp	r3, #6
 8001a60:	d902      	bls.n	8001a68 <NVIC_EncodePriority+0x30>
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3b03      	subs	r3, #3
 8001a66:	e000      	b.n	8001a6a <NVIC_EncodePriority+0x32>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43da      	mvns	r2, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a80:	f04f 31ff 	mov.w	r1, #4294967295
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	43d9      	mvns	r1, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	4313      	orrs	r3, r2
         );
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3724      	adds	r7, #36	; 0x24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aac:	d301      	bcc.n	8001ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e00f      	b.n	8001ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <SysTick_Config+0x40>)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aba:	210f      	movs	r1, #15
 8001abc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac0:	f7ff ff90 	bl	80019e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <SysTick_Config+0x40>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aca:	4b04      	ldr	r3, [pc, #16]	; (8001adc <SysTick_Config+0x40>)
 8001acc:	2207      	movs	r2, #7
 8001ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	e000e010 	.word	0xe000e010

08001ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff ff2d 	bl	8001948 <__NVIC_SetPriorityGrouping>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b086      	sub	sp, #24
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	4603      	mov	r3, r0
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
 8001b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b08:	f7ff ff42 	bl	8001990 <__NVIC_GetPriorityGrouping>
 8001b0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	68b9      	ldr	r1, [r7, #8]
 8001b12:	6978      	ldr	r0, [r7, #20]
 8001b14:	f7ff ff90 	bl	8001a38 <NVIC_EncodePriority>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1e:	4611      	mov	r1, r2
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff5f 	bl	80019e4 <__NVIC_SetPriority>
}
 8001b26:	bf00      	nop
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	4603      	mov	r3, r0
 8001b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff35 	bl	80019ac <__NVIC_EnableIRQ>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff ffa2 	bl	8001a9c <SysTick_Config>
 8001b58:	4603      	mov	r3, r0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b085      	sub	sp, #20
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d008      	beq.n	8001b8a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e020      	b.n	8001bcc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 020e 	bic.w	r2, r2, #14
 8001b98:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 0201 	bic.w	r2, r2, #1
 8001ba8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr
	...

08001bd8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d005      	beq.n	8001bfa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2204      	movs	r2, #4
 8001bf2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	73fb      	strb	r3, [r7, #15]
 8001bf8:	e051      	b.n	8001c9e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 020e 	bic.w	r2, r2, #14
 8001c08:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0201 	bic.w	r2, r2, #1
 8001c18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a22      	ldr	r2, [pc, #136]	; (8001ca8 <HAL_DMA_Abort_IT+0xd0>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d029      	beq.n	8001c78 <HAL_DMA_Abort_IT+0xa0>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a20      	ldr	r2, [pc, #128]	; (8001cac <HAL_DMA_Abort_IT+0xd4>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d022      	beq.n	8001c74 <HAL_DMA_Abort_IT+0x9c>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a1f      	ldr	r2, [pc, #124]	; (8001cb0 <HAL_DMA_Abort_IT+0xd8>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d01a      	beq.n	8001c6e <HAL_DMA_Abort_IT+0x96>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a1d      	ldr	r2, [pc, #116]	; (8001cb4 <HAL_DMA_Abort_IT+0xdc>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d012      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x90>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a1c      	ldr	r2, [pc, #112]	; (8001cb8 <HAL_DMA_Abort_IT+0xe0>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d00a      	beq.n	8001c62 <HAL_DMA_Abort_IT+0x8a>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a1a      	ldr	r2, [pc, #104]	; (8001cbc <HAL_DMA_Abort_IT+0xe4>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d102      	bne.n	8001c5c <HAL_DMA_Abort_IT+0x84>
 8001c56:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c5a:	e00e      	b.n	8001c7a <HAL_DMA_Abort_IT+0xa2>
 8001c5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c60:	e00b      	b.n	8001c7a <HAL_DMA_Abort_IT+0xa2>
 8001c62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c66:	e008      	b.n	8001c7a <HAL_DMA_Abort_IT+0xa2>
 8001c68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c6c:	e005      	b.n	8001c7a <HAL_DMA_Abort_IT+0xa2>
 8001c6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c72:	e002      	b.n	8001c7a <HAL_DMA_Abort_IT+0xa2>
 8001c74:	2310      	movs	r3, #16
 8001c76:	e000      	b.n	8001c7a <HAL_DMA_Abort_IT+0xa2>
 8001c78:	2301      	movs	r3, #1
 8001c7a:	4a11      	ldr	r2, [pc, #68]	; (8001cc0 <HAL_DMA_Abort_IT+0xe8>)
 8001c7c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	4798      	blx	r3
    } 
  }
  return status;
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40020008 	.word	0x40020008
 8001cac:	4002001c 	.word	0x4002001c
 8001cb0:	40020030 	.word	0x40020030
 8001cb4:	40020044 	.word	0x40020044
 8001cb8:	40020058 	.word	0x40020058
 8001cbc:	4002006c 	.word	0x4002006c
 8001cc0:	40020000 	.word	0x40020000

08001cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b08b      	sub	sp, #44	; 0x2c
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd6:	e169      	b.n	8001fac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cd8:	2201      	movs	r2, #1
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	69fa      	ldr	r2, [r7, #28]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	f040 8158 	bne.w	8001fa6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	4a9a      	ldr	r2, [pc, #616]	; (8001f64 <HAL_GPIO_Init+0x2a0>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d05e      	beq.n	8001dbe <HAL_GPIO_Init+0xfa>
 8001d00:	4a98      	ldr	r2, [pc, #608]	; (8001f64 <HAL_GPIO_Init+0x2a0>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d875      	bhi.n	8001df2 <HAL_GPIO_Init+0x12e>
 8001d06:	4a98      	ldr	r2, [pc, #608]	; (8001f68 <HAL_GPIO_Init+0x2a4>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d058      	beq.n	8001dbe <HAL_GPIO_Init+0xfa>
 8001d0c:	4a96      	ldr	r2, [pc, #600]	; (8001f68 <HAL_GPIO_Init+0x2a4>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d86f      	bhi.n	8001df2 <HAL_GPIO_Init+0x12e>
 8001d12:	4a96      	ldr	r2, [pc, #600]	; (8001f6c <HAL_GPIO_Init+0x2a8>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d052      	beq.n	8001dbe <HAL_GPIO_Init+0xfa>
 8001d18:	4a94      	ldr	r2, [pc, #592]	; (8001f6c <HAL_GPIO_Init+0x2a8>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d869      	bhi.n	8001df2 <HAL_GPIO_Init+0x12e>
 8001d1e:	4a94      	ldr	r2, [pc, #592]	; (8001f70 <HAL_GPIO_Init+0x2ac>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d04c      	beq.n	8001dbe <HAL_GPIO_Init+0xfa>
 8001d24:	4a92      	ldr	r2, [pc, #584]	; (8001f70 <HAL_GPIO_Init+0x2ac>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d863      	bhi.n	8001df2 <HAL_GPIO_Init+0x12e>
 8001d2a:	4a92      	ldr	r2, [pc, #584]	; (8001f74 <HAL_GPIO_Init+0x2b0>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d046      	beq.n	8001dbe <HAL_GPIO_Init+0xfa>
 8001d30:	4a90      	ldr	r2, [pc, #576]	; (8001f74 <HAL_GPIO_Init+0x2b0>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d85d      	bhi.n	8001df2 <HAL_GPIO_Init+0x12e>
 8001d36:	2b12      	cmp	r3, #18
 8001d38:	d82a      	bhi.n	8001d90 <HAL_GPIO_Init+0xcc>
 8001d3a:	2b12      	cmp	r3, #18
 8001d3c:	d859      	bhi.n	8001df2 <HAL_GPIO_Init+0x12e>
 8001d3e:	a201      	add	r2, pc, #4	; (adr r2, 8001d44 <HAL_GPIO_Init+0x80>)
 8001d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d44:	08001dbf 	.word	0x08001dbf
 8001d48:	08001d99 	.word	0x08001d99
 8001d4c:	08001dab 	.word	0x08001dab
 8001d50:	08001ded 	.word	0x08001ded
 8001d54:	08001df3 	.word	0x08001df3
 8001d58:	08001df3 	.word	0x08001df3
 8001d5c:	08001df3 	.word	0x08001df3
 8001d60:	08001df3 	.word	0x08001df3
 8001d64:	08001df3 	.word	0x08001df3
 8001d68:	08001df3 	.word	0x08001df3
 8001d6c:	08001df3 	.word	0x08001df3
 8001d70:	08001df3 	.word	0x08001df3
 8001d74:	08001df3 	.word	0x08001df3
 8001d78:	08001df3 	.word	0x08001df3
 8001d7c:	08001df3 	.word	0x08001df3
 8001d80:	08001df3 	.word	0x08001df3
 8001d84:	08001df3 	.word	0x08001df3
 8001d88:	08001da1 	.word	0x08001da1
 8001d8c:	08001db5 	.word	0x08001db5
 8001d90:	4a79      	ldr	r2, [pc, #484]	; (8001f78 <HAL_GPIO_Init+0x2b4>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d013      	beq.n	8001dbe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d96:	e02c      	b.n	8001df2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	623b      	str	r3, [r7, #32]
          break;
 8001d9e:	e029      	b.n	8001df4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	3304      	adds	r3, #4
 8001da6:	623b      	str	r3, [r7, #32]
          break;
 8001da8:	e024      	b.n	8001df4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	3308      	adds	r3, #8
 8001db0:	623b      	str	r3, [r7, #32]
          break;
 8001db2:	e01f      	b.n	8001df4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	330c      	adds	r3, #12
 8001dba:	623b      	str	r3, [r7, #32]
          break;
 8001dbc:	e01a      	b.n	8001df4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d102      	bne.n	8001dcc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dc6:	2304      	movs	r3, #4
 8001dc8:	623b      	str	r3, [r7, #32]
          break;
 8001dca:	e013      	b.n	8001df4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d105      	bne.n	8001de0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dd4:	2308      	movs	r3, #8
 8001dd6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	69fa      	ldr	r2, [r7, #28]
 8001ddc:	611a      	str	r2, [r3, #16]
          break;
 8001dde:	e009      	b.n	8001df4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001de0:	2308      	movs	r3, #8
 8001de2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	69fa      	ldr	r2, [r7, #28]
 8001de8:	615a      	str	r2, [r3, #20]
          break;
 8001dea:	e003      	b.n	8001df4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dec:	2300      	movs	r3, #0
 8001dee:	623b      	str	r3, [r7, #32]
          break;
 8001df0:	e000      	b.n	8001df4 <HAL_GPIO_Init+0x130>
          break;
 8001df2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	2bff      	cmp	r3, #255	; 0xff
 8001df8:	d801      	bhi.n	8001dfe <HAL_GPIO_Init+0x13a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	e001      	b.n	8001e02 <HAL_GPIO_Init+0x13e>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3304      	adds	r3, #4
 8001e02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	2bff      	cmp	r3, #255	; 0xff
 8001e08:	d802      	bhi.n	8001e10 <HAL_GPIO_Init+0x14c>
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	e002      	b.n	8001e16 <HAL_GPIO_Init+0x152>
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	3b08      	subs	r3, #8
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	210f      	movs	r1, #15
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	fa01 f303 	lsl.w	r3, r1, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	401a      	ands	r2, r3
 8001e28:	6a39      	ldr	r1, [r7, #32]
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e30:	431a      	orrs	r2, r3
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f000 80b1 	beq.w	8001fa6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e44:	4b4d      	ldr	r3, [pc, #308]	; (8001f7c <HAL_GPIO_Init+0x2b8>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	4a4c      	ldr	r2, [pc, #304]	; (8001f7c <HAL_GPIO_Init+0x2b8>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	6193      	str	r3, [r2, #24]
 8001e50:	4b4a      	ldr	r3, [pc, #296]	; (8001f7c <HAL_GPIO_Init+0x2b8>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e5c:	4a48      	ldr	r2, [pc, #288]	; (8001f80 <HAL_GPIO_Init+0x2bc>)
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	089b      	lsrs	r3, r3, #2
 8001e62:	3302      	adds	r3, #2
 8001e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	f003 0303 	and.w	r3, r3, #3
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	220f      	movs	r2, #15
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a40      	ldr	r2, [pc, #256]	; (8001f84 <HAL_GPIO_Init+0x2c0>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d013      	beq.n	8001eb0 <HAL_GPIO_Init+0x1ec>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a3f      	ldr	r2, [pc, #252]	; (8001f88 <HAL_GPIO_Init+0x2c4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d00d      	beq.n	8001eac <HAL_GPIO_Init+0x1e8>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a3e      	ldr	r2, [pc, #248]	; (8001f8c <HAL_GPIO_Init+0x2c8>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d007      	beq.n	8001ea8 <HAL_GPIO_Init+0x1e4>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a3d      	ldr	r2, [pc, #244]	; (8001f90 <HAL_GPIO_Init+0x2cc>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d101      	bne.n	8001ea4 <HAL_GPIO_Init+0x1e0>
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e006      	b.n	8001eb2 <HAL_GPIO_Init+0x1ee>
 8001ea4:	2304      	movs	r3, #4
 8001ea6:	e004      	b.n	8001eb2 <HAL_GPIO_Init+0x1ee>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	e002      	b.n	8001eb2 <HAL_GPIO_Init+0x1ee>
 8001eac:	2301      	movs	r3, #1
 8001eae:	e000      	b.n	8001eb2 <HAL_GPIO_Init+0x1ee>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb4:	f002 0203 	and.w	r2, r2, #3
 8001eb8:	0092      	lsls	r2, r2, #2
 8001eba:	4093      	lsls	r3, r2
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ec2:	492f      	ldr	r1, [pc, #188]	; (8001f80 <HAL_GPIO_Init+0x2bc>)
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	089b      	lsrs	r3, r3, #2
 8001ec8:	3302      	adds	r3, #2
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d006      	beq.n	8001eea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001edc:	4b2d      	ldr	r3, [pc, #180]	; (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	492c      	ldr	r1, [pc, #176]	; (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	600b      	str	r3, [r1, #0]
 8001ee8:	e006      	b.n	8001ef8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001eea:	4b2a      	ldr	r3, [pc, #168]	; (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	4928      	ldr	r1, [pc, #160]	; (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d006      	beq.n	8001f12 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f04:	4b23      	ldr	r3, [pc, #140]	; (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	4922      	ldr	r1, [pc, #136]	; (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	604b      	str	r3, [r1, #4]
 8001f10:	e006      	b.n	8001f20 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f12:	4b20      	ldr	r3, [pc, #128]	; (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	491e      	ldr	r1, [pc, #120]	; (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d006      	beq.n	8001f3a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f2c:	4b19      	ldr	r3, [pc, #100]	; (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	4918      	ldr	r1, [pc, #96]	; (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	608b      	str	r3, [r1, #8]
 8001f38:	e006      	b.n	8001f48 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f3a:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	43db      	mvns	r3, r3
 8001f42:	4914      	ldr	r1, [pc, #80]	; (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d021      	beq.n	8001f98 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f54:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	490e      	ldr	r1, [pc, #56]	; (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	60cb      	str	r3, [r1, #12]
 8001f60:	e021      	b.n	8001fa6 <HAL_GPIO_Init+0x2e2>
 8001f62:	bf00      	nop
 8001f64:	10320000 	.word	0x10320000
 8001f68:	10310000 	.word	0x10310000
 8001f6c:	10220000 	.word	0x10220000
 8001f70:	10210000 	.word	0x10210000
 8001f74:	10120000 	.word	0x10120000
 8001f78:	10110000 	.word	0x10110000
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40010000 	.word	0x40010000
 8001f84:	40010800 	.word	0x40010800
 8001f88:	40010c00 	.word	0x40010c00
 8001f8c:	40011000 	.word	0x40011000
 8001f90:	40011400 	.word	0x40011400
 8001f94:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f98:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <HAL_GPIO_Init+0x304>)
 8001f9a:	68da      	ldr	r2, [r3, #12]
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	4909      	ldr	r1, [pc, #36]	; (8001fc8 <HAL_GPIO_Init+0x304>)
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	3301      	adds	r3, #1
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f47f ae8e 	bne.w	8001cd8 <HAL_GPIO_Init+0x14>
  }
}
 8001fbc:	bf00      	nop
 8001fbe:	bf00      	nop
 8001fc0:	372c      	adds	r7, #44	; 0x2c
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr
 8001fc8:	40010400 	.word	0x40010400

08001fcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	887b      	ldrh	r3, [r7, #2]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d002      	beq.n	8001fea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	73fb      	strb	r3, [r7, #15]
 8001fe8:	e001      	b.n	8001fee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fea:	2300      	movs	r3, #0
 8001fec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr

08001ffa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	460b      	mov	r3, r1
 8002004:	807b      	strh	r3, [r7, #2]
 8002006:	4613      	mov	r3, r2
 8002008:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800200a:	787b      	ldrb	r3, [r7, #1]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002010:	887a      	ldrh	r2, [r7, #2]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002016:	e003      	b.n	8002020 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002018:	887b      	ldrh	r3, [r7, #2]
 800201a:	041a      	lsls	r2, r3, #16
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	611a      	str	r2, [r3, #16]
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr
	...

0800202c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e272      	b.n	8002524 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 8087 	beq.w	800215a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800204c:	4b92      	ldr	r3, [pc, #584]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 030c 	and.w	r3, r3, #12
 8002054:	2b04      	cmp	r3, #4
 8002056:	d00c      	beq.n	8002072 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002058:	4b8f      	ldr	r3, [pc, #572]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 030c 	and.w	r3, r3, #12
 8002060:	2b08      	cmp	r3, #8
 8002062:	d112      	bne.n	800208a <HAL_RCC_OscConfig+0x5e>
 8002064:	4b8c      	ldr	r3, [pc, #560]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002070:	d10b      	bne.n	800208a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002072:	4b89      	ldr	r3, [pc, #548]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d06c      	beq.n	8002158 <HAL_RCC_OscConfig+0x12c>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d168      	bne.n	8002158 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e24c      	b.n	8002524 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002092:	d106      	bne.n	80020a2 <HAL_RCC_OscConfig+0x76>
 8002094:	4b80      	ldr	r3, [pc, #512]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a7f      	ldr	r2, [pc, #508]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 800209a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209e:	6013      	str	r3, [r2, #0]
 80020a0:	e02e      	b.n	8002100 <HAL_RCC_OscConfig+0xd4>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10c      	bne.n	80020c4 <HAL_RCC_OscConfig+0x98>
 80020aa:	4b7b      	ldr	r3, [pc, #492]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a7a      	ldr	r2, [pc, #488]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	4b78      	ldr	r3, [pc, #480]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a77      	ldr	r2, [pc, #476]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	e01d      	b.n	8002100 <HAL_RCC_OscConfig+0xd4>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020cc:	d10c      	bne.n	80020e8 <HAL_RCC_OscConfig+0xbc>
 80020ce:	4b72      	ldr	r3, [pc, #456]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a71      	ldr	r2, [pc, #452]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	4b6f      	ldr	r3, [pc, #444]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a6e      	ldr	r2, [pc, #440]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	e00b      	b.n	8002100 <HAL_RCC_OscConfig+0xd4>
 80020e8:	4b6b      	ldr	r3, [pc, #428]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a6a      	ldr	r2, [pc, #424]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	4b68      	ldr	r3, [pc, #416]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a67      	ldr	r2, [pc, #412]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80020fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d013      	beq.n	8002130 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002108:	f7ff fc14 	bl	8001934 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002110:	f7ff fc10 	bl	8001934 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b64      	cmp	r3, #100	; 0x64
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e200      	b.n	8002524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002122:	4b5d      	ldr	r3, [pc, #372]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0xe4>
 800212e:	e014      	b.n	800215a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002130:	f7ff fc00 	bl	8001934 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002138:	f7ff fbfc 	bl	8001934 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b64      	cmp	r3, #100	; 0x64
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e1ec      	b.n	8002524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214a:	4b53      	ldr	r3, [pc, #332]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f0      	bne.n	8002138 <HAL_RCC_OscConfig+0x10c>
 8002156:	e000      	b.n	800215a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d063      	beq.n	800222e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002166:	4b4c      	ldr	r3, [pc, #304]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 030c 	and.w	r3, r3, #12
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00b      	beq.n	800218a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002172:	4b49      	ldr	r3, [pc, #292]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 030c 	and.w	r3, r3, #12
 800217a:	2b08      	cmp	r3, #8
 800217c:	d11c      	bne.n	80021b8 <HAL_RCC_OscConfig+0x18c>
 800217e:	4b46      	ldr	r3, [pc, #280]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d116      	bne.n	80021b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800218a:	4b43      	ldr	r3, [pc, #268]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d005      	beq.n	80021a2 <HAL_RCC_OscConfig+0x176>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d001      	beq.n	80021a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e1c0      	b.n	8002524 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a2:	4b3d      	ldr	r3, [pc, #244]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4939      	ldr	r1, [pc, #228]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b6:	e03a      	b.n	800222e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d020      	beq.n	8002202 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021c0:	4b36      	ldr	r3, [pc, #216]	; (800229c <HAL_RCC_OscConfig+0x270>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c6:	f7ff fbb5 	bl	8001934 <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ce:	f7ff fbb1 	bl	8001934 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e1a1      	b.n	8002524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e0:	4b2d      	ldr	r3, [pc, #180]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0f0      	beq.n	80021ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ec:	4b2a      	ldr	r3, [pc, #168]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	4927      	ldr	r1, [pc, #156]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	600b      	str	r3, [r1, #0]
 8002200:	e015      	b.n	800222e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002202:	4b26      	ldr	r3, [pc, #152]	; (800229c <HAL_RCC_OscConfig+0x270>)
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7ff fb94 	bl	8001934 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002210:	f7ff fb90 	bl	8001934 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e180      	b.n	8002524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002222:	4b1d      	ldr	r3, [pc, #116]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d03a      	beq.n	80022b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d019      	beq.n	8002276 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002242:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <HAL_RCC_OscConfig+0x274>)
 8002244:	2201      	movs	r2, #1
 8002246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002248:	f7ff fb74 	bl	8001934 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002250:	f7ff fb70 	bl	8001934 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e160      	b.n	8002524 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002262:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <HAL_RCC_OscConfig+0x26c>)
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800226e:	2001      	movs	r0, #1
 8002270:	f000 fad8 	bl	8002824 <RCC_Delay>
 8002274:	e01c      	b.n	80022b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002276:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <HAL_RCC_OscConfig+0x274>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227c:	f7ff fb5a 	bl	8001934 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002282:	e00f      	b.n	80022a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002284:	f7ff fb56 	bl	8001934 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d908      	bls.n	80022a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e146      	b.n	8002524 <HAL_RCC_OscConfig+0x4f8>
 8002296:	bf00      	nop
 8002298:	40021000 	.word	0x40021000
 800229c:	42420000 	.word	0x42420000
 80022a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a4:	4b92      	ldr	r3, [pc, #584]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1e9      	bne.n	8002284 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 80a6 	beq.w	800240a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022be:	2300      	movs	r3, #0
 80022c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022c2:	4b8b      	ldr	r3, [pc, #556]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10d      	bne.n	80022ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ce:	4b88      	ldr	r3, [pc, #544]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	4a87      	ldr	r2, [pc, #540]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 80022d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d8:	61d3      	str	r3, [r2, #28]
 80022da:	4b85      	ldr	r3, [pc, #532]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e6:	2301      	movs	r3, #1
 80022e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ea:	4b82      	ldr	r3, [pc, #520]	; (80024f4 <HAL_RCC_OscConfig+0x4c8>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d118      	bne.n	8002328 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022f6:	4b7f      	ldr	r3, [pc, #508]	; (80024f4 <HAL_RCC_OscConfig+0x4c8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a7e      	ldr	r2, [pc, #504]	; (80024f4 <HAL_RCC_OscConfig+0x4c8>)
 80022fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002302:	f7ff fb17 	bl	8001934 <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230a:	f7ff fb13 	bl	8001934 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b64      	cmp	r3, #100	; 0x64
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e103      	b.n	8002524 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231c:	4b75      	ldr	r3, [pc, #468]	; (80024f4 <HAL_RCC_OscConfig+0x4c8>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0f0      	beq.n	800230a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d106      	bne.n	800233e <HAL_RCC_OscConfig+0x312>
 8002330:	4b6f      	ldr	r3, [pc, #444]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	4a6e      	ldr	r2, [pc, #440]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	6213      	str	r3, [r2, #32]
 800233c:	e02d      	b.n	800239a <HAL_RCC_OscConfig+0x36e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10c      	bne.n	8002360 <HAL_RCC_OscConfig+0x334>
 8002346:	4b6a      	ldr	r3, [pc, #424]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	4a69      	ldr	r2, [pc, #420]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 800234c:	f023 0301 	bic.w	r3, r3, #1
 8002350:	6213      	str	r3, [r2, #32]
 8002352:	4b67      	ldr	r3, [pc, #412]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	4a66      	ldr	r2, [pc, #408]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 8002358:	f023 0304 	bic.w	r3, r3, #4
 800235c:	6213      	str	r3, [r2, #32]
 800235e:	e01c      	b.n	800239a <HAL_RCC_OscConfig+0x36e>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	2b05      	cmp	r3, #5
 8002366:	d10c      	bne.n	8002382 <HAL_RCC_OscConfig+0x356>
 8002368:	4b61      	ldr	r3, [pc, #388]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	4a60      	ldr	r2, [pc, #384]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 800236e:	f043 0304 	orr.w	r3, r3, #4
 8002372:	6213      	str	r3, [r2, #32]
 8002374:	4b5e      	ldr	r3, [pc, #376]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	4a5d      	ldr	r2, [pc, #372]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	6213      	str	r3, [r2, #32]
 8002380:	e00b      	b.n	800239a <HAL_RCC_OscConfig+0x36e>
 8002382:	4b5b      	ldr	r3, [pc, #364]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	4a5a      	ldr	r2, [pc, #360]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 8002388:	f023 0301 	bic.w	r3, r3, #1
 800238c:	6213      	str	r3, [r2, #32]
 800238e:	4b58      	ldr	r3, [pc, #352]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	4a57      	ldr	r2, [pc, #348]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 8002394:	f023 0304 	bic.w	r3, r3, #4
 8002398:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d015      	beq.n	80023ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a2:	f7ff fac7 	bl	8001934 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a8:	e00a      	b.n	80023c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023aa:	f7ff fac3 	bl	8001934 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e0b1      	b.n	8002524 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c0:	4b4b      	ldr	r3, [pc, #300]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0ee      	beq.n	80023aa <HAL_RCC_OscConfig+0x37e>
 80023cc:	e014      	b.n	80023f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ce:	f7ff fab1 	bl	8001934 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d4:	e00a      	b.n	80023ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d6:	f7ff faad 	bl	8001934 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e09b      	b.n	8002524 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ec:	4b40      	ldr	r3, [pc, #256]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1ee      	bne.n	80023d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023f8:	7dfb      	ldrb	r3, [r7, #23]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d105      	bne.n	800240a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023fe:	4b3c      	ldr	r3, [pc, #240]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	4a3b      	ldr	r2, [pc, #236]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 8002404:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002408:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 8087 	beq.w	8002522 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002414:	4b36      	ldr	r3, [pc, #216]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 030c 	and.w	r3, r3, #12
 800241c:	2b08      	cmp	r3, #8
 800241e:	d061      	beq.n	80024e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	2b02      	cmp	r3, #2
 8002426:	d146      	bne.n	80024b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002428:	4b33      	ldr	r3, [pc, #204]	; (80024f8 <HAL_RCC_OscConfig+0x4cc>)
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242e:	f7ff fa81 	bl	8001934 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002436:	f7ff fa7d 	bl	8001934 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e06d      	b.n	8002524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002448:	4b29      	ldr	r3, [pc, #164]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1f0      	bne.n	8002436 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245c:	d108      	bne.n	8002470 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800245e:	4b24      	ldr	r3, [pc, #144]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	4921      	ldr	r1, [pc, #132]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 800246c:	4313      	orrs	r3, r2
 800246e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002470:	4b1f      	ldr	r3, [pc, #124]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a19      	ldr	r1, [r3, #32]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	430b      	orrs	r3, r1
 8002482:	491b      	ldr	r1, [pc, #108]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 8002484:	4313      	orrs	r3, r2
 8002486:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002488:	4b1b      	ldr	r3, [pc, #108]	; (80024f8 <HAL_RCC_OscConfig+0x4cc>)
 800248a:	2201      	movs	r2, #1
 800248c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248e:	f7ff fa51 	bl	8001934 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002496:	f7ff fa4d 	bl	8001934 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e03d      	b.n	8002524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024a8:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0f0      	beq.n	8002496 <HAL_RCC_OscConfig+0x46a>
 80024b4:	e035      	b.n	8002522 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b6:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <HAL_RCC_OscConfig+0x4cc>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024bc:	f7ff fa3a 	bl	8001934 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c4:	f7ff fa36 	bl	8001934 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e026      	b.n	8002524 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d6:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f0      	bne.n	80024c4 <HAL_RCC_OscConfig+0x498>
 80024e2:	e01e      	b.n	8002522 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69db      	ldr	r3, [r3, #28]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d107      	bne.n	80024fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e019      	b.n	8002524 <HAL_RCC_OscConfig+0x4f8>
 80024f0:	40021000 	.word	0x40021000
 80024f4:	40007000 	.word	0x40007000
 80024f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <HAL_RCC_OscConfig+0x500>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	429a      	cmp	r2, r3
 800250e:	d106      	bne.n	800251e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800251a:	429a      	cmp	r2, r3
 800251c:	d001      	beq.n	8002522 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40021000 	.word	0x40021000

08002530 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e0d0      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002544:	4b6a      	ldr	r3, [pc, #424]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d910      	bls.n	8002574 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002552:	4b67      	ldr	r3, [pc, #412]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 0207 	bic.w	r2, r3, #7
 800255a:	4965      	ldr	r1, [pc, #404]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002562:	4b63      	ldr	r3, [pc, #396]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d001      	beq.n	8002574 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0b8      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d020      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b00      	cmp	r3, #0
 800258a:	d005      	beq.n	8002598 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800258c:	4b59      	ldr	r3, [pc, #356]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	4a58      	ldr	r2, [pc, #352]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002592:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002596:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0308 	and.w	r3, r3, #8
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d005      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025a4:	4b53      	ldr	r3, [pc, #332]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	4a52      	ldr	r2, [pc, #328]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b0:	4b50      	ldr	r3, [pc, #320]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	494d      	ldr	r1, [pc, #308]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d040      	beq.n	8002650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d107      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d6:	4b47      	ldr	r3, [pc, #284]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d115      	bne.n	800260e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e07f      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d107      	bne.n	80025fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ee:	4b41      	ldr	r3, [pc, #260]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d109      	bne.n	800260e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e073      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fe:	4b3d      	ldr	r3, [pc, #244]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e06b      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800260e:	4b39      	ldr	r3, [pc, #228]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f023 0203 	bic.w	r2, r3, #3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	4936      	ldr	r1, [pc, #216]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 800261c:	4313      	orrs	r3, r2
 800261e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002620:	f7ff f988 	bl	8001934 <HAL_GetTick>
 8002624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002626:	e00a      	b.n	800263e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002628:	f7ff f984 	bl	8001934 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	f241 3288 	movw	r2, #5000	; 0x1388
 8002636:	4293      	cmp	r3, r2
 8002638:	d901      	bls.n	800263e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e053      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263e:	4b2d      	ldr	r3, [pc, #180]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f003 020c 	and.w	r2, r3, #12
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	429a      	cmp	r2, r3
 800264e:	d1eb      	bne.n	8002628 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002650:	4b27      	ldr	r3, [pc, #156]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	429a      	cmp	r2, r3
 800265c:	d210      	bcs.n	8002680 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265e:	4b24      	ldr	r3, [pc, #144]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 0207 	bic.w	r2, r3, #7
 8002666:	4922      	ldr	r1, [pc, #136]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	4313      	orrs	r3, r2
 800266c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800266e:	4b20      	ldr	r3, [pc, #128]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d001      	beq.n	8002680 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e032      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800268c:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	4916      	ldr	r1, [pc, #88]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 800269a:	4313      	orrs	r3, r2
 800269c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d009      	beq.n	80026be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026aa:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	490e      	ldr	r1, [pc, #56]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026be:	f000 f821 	bl	8002704 <HAL_RCC_GetSysClockFreq>
 80026c2:	4602      	mov	r2, r0
 80026c4:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	091b      	lsrs	r3, r3, #4
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	490a      	ldr	r1, [pc, #40]	; (80026f8 <HAL_RCC_ClockConfig+0x1c8>)
 80026d0:	5ccb      	ldrb	r3, [r1, r3]
 80026d2:	fa22 f303 	lsr.w	r3, r2, r3
 80026d6:	4a09      	ldr	r2, [pc, #36]	; (80026fc <HAL_RCC_ClockConfig+0x1cc>)
 80026d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026da:	4b09      	ldr	r3, [pc, #36]	; (8002700 <HAL_RCC_ClockConfig+0x1d0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff f8e6 	bl	80018b0 <HAL_InitTick>

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40022000 	.word	0x40022000
 80026f4:	40021000 	.word	0x40021000
 80026f8:	08004a5c 	.word	0x08004a5c
 80026fc:	20000038 	.word	0x20000038
 8002700:	2000003c 	.word	0x2000003c

08002704 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002704:	b490      	push	{r4, r7}
 8002706:	b08a      	sub	sp, #40	; 0x28
 8002708:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800270a:	4b29      	ldr	r3, [pc, #164]	; (80027b0 <HAL_RCC_GetSysClockFreq+0xac>)
 800270c:	1d3c      	adds	r4, r7, #4
 800270e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002710:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002714:	f240 2301 	movw	r3, #513	; 0x201
 8002718:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
 800271e:	2300      	movs	r3, #0
 8002720:	61bb      	str	r3, [r7, #24]
 8002722:	2300      	movs	r3, #0
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800272a:	2300      	movs	r3, #0
 800272c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800272e:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f003 030c 	and.w	r3, r3, #12
 800273a:	2b04      	cmp	r3, #4
 800273c:	d002      	beq.n	8002744 <HAL_RCC_GetSysClockFreq+0x40>
 800273e:	2b08      	cmp	r3, #8
 8002740:	d003      	beq.n	800274a <HAL_RCC_GetSysClockFreq+0x46>
 8002742:	e02b      	b.n	800279c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002744:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002746:	623b      	str	r3, [r7, #32]
      break;
 8002748:	e02b      	b.n	80027a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	0c9b      	lsrs	r3, r3, #18
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	3328      	adds	r3, #40	; 0x28
 8002754:	443b      	add	r3, r7
 8002756:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800275a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d012      	beq.n	800278c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002766:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	0c5b      	lsrs	r3, r3, #17
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	3328      	adds	r3, #40	; 0x28
 8002772:	443b      	add	r3, r7
 8002774:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002778:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	4a0e      	ldr	r2, [pc, #56]	; (80027b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800277e:	fb03 f202 	mul.w	r2, r3, r2
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	fbb2 f3f3 	udiv	r3, r2, r3
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
 800278a:	e004      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	4a0b      	ldr	r2, [pc, #44]	; (80027bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002790:	fb02 f303 	mul.w	r3, r2, r3
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	623b      	str	r3, [r7, #32]
      break;
 800279a:	e002      	b.n	80027a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800279e:	623b      	str	r3, [r7, #32]
      break;
 80027a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027a2:	6a3b      	ldr	r3, [r7, #32]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3728      	adds	r7, #40	; 0x28
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bc90      	pop	{r4, r7}
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	08004a4c 	.word	0x08004a4c
 80027b4:	40021000 	.word	0x40021000
 80027b8:	007a1200 	.word	0x007a1200
 80027bc:	003d0900 	.word	0x003d0900

080027c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027c4:	4b02      	ldr	r3, [pc, #8]	; (80027d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80027c6:	681b      	ldr	r3, [r3, #0]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr
 80027d0:	20000038 	.word	0x20000038

080027d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027d8:	f7ff fff2 	bl	80027c0 <HAL_RCC_GetHCLKFreq>
 80027dc:	4602      	mov	r2, r0
 80027de:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	0a1b      	lsrs	r3, r3, #8
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	4903      	ldr	r1, [pc, #12]	; (80027f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ea:	5ccb      	ldrb	r3, [r1, r3]
 80027ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40021000 	.word	0x40021000
 80027f8:	08004a6c 	.word	0x08004a6c

080027fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002800:	f7ff ffde 	bl	80027c0 <HAL_RCC_GetHCLKFreq>
 8002804:	4602      	mov	r2, r0
 8002806:	4b05      	ldr	r3, [pc, #20]	; (800281c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	0adb      	lsrs	r3, r3, #11
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	4903      	ldr	r1, [pc, #12]	; (8002820 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002812:	5ccb      	ldrb	r3, [r1, r3]
 8002814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002818:	4618      	mov	r0, r3
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40021000 	.word	0x40021000
 8002820:	08004a6c 	.word	0x08004a6c

08002824 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800282c:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <RCC_Delay+0x34>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a0a      	ldr	r2, [pc, #40]	; (800285c <RCC_Delay+0x38>)
 8002832:	fba2 2303 	umull	r2, r3, r2, r3
 8002836:	0a5b      	lsrs	r3, r3, #9
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	fb02 f303 	mul.w	r3, r2, r3
 800283e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002840:	bf00      	nop
  }
  while (Delay --);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1e5a      	subs	r2, r3, #1
 8002846:	60fa      	str	r2, [r7, #12]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f9      	bne.n	8002840 <RCC_Delay+0x1c>
}
 800284c:	bf00      	nop
 800284e:	bf00      	nop
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr
 8002858:	20000038 	.word	0x20000038
 800285c:	10624dd3 	.word	0x10624dd3

08002860 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e041      	b.n	80028f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d106      	bne.n	800288c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7fe fe90 	bl	80015ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3304      	adds	r3, #4
 800289c:	4619      	mov	r1, r3
 800289e:	4610      	mov	r0, r2
 80028a0:	f000 fc28 	bl	80030f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
	...

08002900 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b01      	cmp	r3, #1
 8002912:	d001      	beq.n	8002918 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e03a      	b.n	800298e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68da      	ldr	r2, [r3, #12]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0201 	orr.w	r2, r2, #1
 800292e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a18      	ldr	r2, [pc, #96]	; (8002998 <HAL_TIM_Base_Start_IT+0x98>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00e      	beq.n	8002958 <HAL_TIM_Base_Start_IT+0x58>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002942:	d009      	beq.n	8002958 <HAL_TIM_Base_Start_IT+0x58>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a14      	ldr	r2, [pc, #80]	; (800299c <HAL_TIM_Base_Start_IT+0x9c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d004      	beq.n	8002958 <HAL_TIM_Base_Start_IT+0x58>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a13      	ldr	r2, [pc, #76]	; (80029a0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d111      	bne.n	800297c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2b06      	cmp	r3, #6
 8002968:	d010      	beq.n	800298c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f042 0201 	orr.w	r2, r2, #1
 8002978:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800297a:	e007      	b.n	800298c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr
 8002998:	40012c00 	.word	0x40012c00
 800299c:	40000400 	.word	0x40000400
 80029a0:	40000800 	.word	0x40000800

080029a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e041      	b.n	8002a3a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d106      	bne.n	80029d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f839 	bl	8002a42 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2202      	movs	r2, #2
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3304      	adds	r3, #4
 80029e0:	4619      	mov	r1, r3
 80029e2:	4610      	mov	r0, r2
 80029e4:	f000 fb86 	bl	80030f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr

08002a54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d109      	bne.n	8002a78 <HAL_TIM_PWM_Start+0x24>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	bf14      	ite	ne
 8002a70:	2301      	movne	r3, #1
 8002a72:	2300      	moveq	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	e022      	b.n	8002abe <HAL_TIM_PWM_Start+0x6a>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d109      	bne.n	8002a92 <HAL_TIM_PWM_Start+0x3e>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	bf14      	ite	ne
 8002a8a:	2301      	movne	r3, #1
 8002a8c:	2300      	moveq	r3, #0
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	e015      	b.n	8002abe <HAL_TIM_PWM_Start+0x6a>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d109      	bne.n	8002aac <HAL_TIM_PWM_Start+0x58>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	bf14      	ite	ne
 8002aa4:	2301      	movne	r3, #1
 8002aa6:	2300      	moveq	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	e008      	b.n	8002abe <HAL_TIM_PWM_Start+0x6a>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	bf14      	ite	ne
 8002ab8:	2301      	movne	r3, #1
 8002aba:	2300      	moveq	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e05e      	b.n	8002b84 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d104      	bne.n	8002ad6 <HAL_TIM_PWM_Start+0x82>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ad4:	e013      	b.n	8002afe <HAL_TIM_PWM_Start+0xaa>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d104      	bne.n	8002ae6 <HAL_TIM_PWM_Start+0x92>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ae4:	e00b      	b.n	8002afe <HAL_TIM_PWM_Start+0xaa>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d104      	bne.n	8002af6 <HAL_TIM_PWM_Start+0xa2>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002af4:	e003      	b.n	8002afe <HAL_TIM_PWM_Start+0xaa>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2202      	movs	r2, #2
 8002afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2201      	movs	r2, #1
 8002b04:	6839      	ldr	r1, [r7, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 fd74 	bl	80035f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a1e      	ldr	r2, [pc, #120]	; (8002b8c <HAL_TIM_PWM_Start+0x138>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d107      	bne.n	8002b26 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a18      	ldr	r2, [pc, #96]	; (8002b8c <HAL_TIM_PWM_Start+0x138>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d00e      	beq.n	8002b4e <HAL_TIM_PWM_Start+0xfa>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b38:	d009      	beq.n	8002b4e <HAL_TIM_PWM_Start+0xfa>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a14      	ldr	r2, [pc, #80]	; (8002b90 <HAL_TIM_PWM_Start+0x13c>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d004      	beq.n	8002b4e <HAL_TIM_PWM_Start+0xfa>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a12      	ldr	r2, [pc, #72]	; (8002b94 <HAL_TIM_PWM_Start+0x140>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d111      	bne.n	8002b72 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2b06      	cmp	r3, #6
 8002b5e:	d010      	beq.n	8002b82 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0201 	orr.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b70:	e007      	b.n	8002b82 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f042 0201 	orr.w	r2, r2, #1
 8002b80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40012c00 	.word	0x40012c00
 8002b90:	40000400 	.word	0x40000400
 8002b94:	40000800 	.word	0x40000800

08002b98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d122      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d11b      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f06f 0202 	mvn.w	r2, #2
 8002bc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 fa6f 	bl	80030be <HAL_TIM_IC_CaptureCallback>
 8002be0:	e005      	b.n	8002bee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 fa62 	bl	80030ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 fa71 	bl	80030d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d122      	bne.n	8002c48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	d11b      	bne.n	8002c48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0204 	mvn.w	r2, #4
 8002c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 fa45 	bl	80030be <HAL_TIM_IC_CaptureCallback>
 8002c34:	e005      	b.n	8002c42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 fa38 	bl	80030ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 fa47 	bl	80030d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b08      	cmp	r3, #8
 8002c54:	d122      	bne.n	8002c9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f003 0308 	and.w	r3, r3, #8
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d11b      	bne.n	8002c9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f06f 0208 	mvn.w	r2, #8
 8002c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2204      	movs	r2, #4
 8002c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 fa1b 	bl	80030be <HAL_TIM_IC_CaptureCallback>
 8002c88:	e005      	b.n	8002c96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 fa0e 	bl	80030ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 fa1d 	bl	80030d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f003 0310 	and.w	r3, r3, #16
 8002ca6:	2b10      	cmp	r3, #16
 8002ca8:	d122      	bne.n	8002cf0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f003 0310 	and.w	r3, r3, #16
 8002cb4:	2b10      	cmp	r3, #16
 8002cb6:	d11b      	bne.n	8002cf0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f06f 0210 	mvn.w	r2, #16
 8002cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2208      	movs	r2, #8
 8002cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f9f1 	bl	80030be <HAL_TIM_IC_CaptureCallback>
 8002cdc:	e005      	b.n	8002cea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f9e4 	bl	80030ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f9f3 	bl	80030d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d10e      	bne.n	8002d1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d107      	bne.n	8002d1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f06f 0201 	mvn.w	r2, #1
 8002d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7fe fbfe 	bl	8001518 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d26:	2b80      	cmp	r3, #128	; 0x80
 8002d28:	d10e      	bne.n	8002d48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d34:	2b80      	cmp	r3, #128	; 0x80
 8002d36:	d107      	bne.n	8002d48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 fce1 	bl	800370a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d52:	2b40      	cmp	r3, #64	; 0x40
 8002d54:	d10e      	bne.n	8002d74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d60:	2b40      	cmp	r3, #64	; 0x40
 8002d62:	d107      	bne.n	8002d74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f9b7 	bl	80030e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	f003 0320 	and.w	r3, r3, #32
 8002d7e:	2b20      	cmp	r3, #32
 8002d80:	d10e      	bne.n	8002da0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f003 0320 	and.w	r3, r3, #32
 8002d8c:	2b20      	cmp	r3, #32
 8002d8e:	d107      	bne.n	8002da0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0220 	mvn.w	r2, #32
 8002d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 fcac 	bl	80036f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002da0:	bf00      	nop
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d101      	bne.n	8002dc2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e0ac      	b.n	8002f1c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b0c      	cmp	r3, #12
 8002dce:	f200 809f 	bhi.w	8002f10 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002dd2:	a201      	add	r2, pc, #4	; (adr r2, 8002dd8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd8:	08002e0d 	.word	0x08002e0d
 8002ddc:	08002f11 	.word	0x08002f11
 8002de0:	08002f11 	.word	0x08002f11
 8002de4:	08002f11 	.word	0x08002f11
 8002de8:	08002e4d 	.word	0x08002e4d
 8002dec:	08002f11 	.word	0x08002f11
 8002df0:	08002f11 	.word	0x08002f11
 8002df4:	08002f11 	.word	0x08002f11
 8002df8:	08002e8f 	.word	0x08002e8f
 8002dfc:	08002f11 	.word	0x08002f11
 8002e00:	08002f11 	.word	0x08002f11
 8002e04:	08002f11 	.word	0x08002f11
 8002e08:	08002ecf 	.word	0x08002ecf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68b9      	ldr	r1, [r7, #8]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 f9d0 	bl	80031b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	699a      	ldr	r2, [r3, #24]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0208 	orr.w	r2, r2, #8
 8002e26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	699a      	ldr	r2, [r3, #24]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0204 	bic.w	r2, r2, #4
 8002e36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6999      	ldr	r1, [r3, #24]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	691a      	ldr	r2, [r3, #16]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	619a      	str	r2, [r3, #24]
      break;
 8002e4a:	e062      	b.n	8002f12 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68b9      	ldr	r1, [r7, #8]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 fa16 	bl	8003284 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	699a      	ldr	r2, [r3, #24]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699a      	ldr	r2, [r3, #24]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6999      	ldr	r1, [r3, #24]
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	021a      	lsls	r2, r3, #8
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	619a      	str	r2, [r3, #24]
      break;
 8002e8c:	e041      	b.n	8002f12 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68b9      	ldr	r1, [r7, #8]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 fa5f 	bl	8003358 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	69da      	ldr	r2, [r3, #28]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f042 0208 	orr.w	r2, r2, #8
 8002ea8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	69da      	ldr	r2, [r3, #28]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0204 	bic.w	r2, r2, #4
 8002eb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	69d9      	ldr	r1, [r3, #28]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	61da      	str	r2, [r3, #28]
      break;
 8002ecc:	e021      	b.n	8002f12 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68b9      	ldr	r1, [r7, #8]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 faa9 	bl	800342c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	69da      	ldr	r2, [r3, #28]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ee8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	69da      	ldr	r2, [r3, #28]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ef8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	69d9      	ldr	r1, [r3, #28]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	021a      	lsls	r2, r3, #8
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	61da      	str	r2, [r3, #28]
      break;
 8002f0e:	e000      	b.n	8002f12 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002f10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_TIM_ConfigClockSource+0x18>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	e0b3      	b.n	80030a4 <HAL_TIM_ConfigClockSource+0x180>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f62:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f74:	d03e      	beq.n	8002ff4 <HAL_TIM_ConfigClockSource+0xd0>
 8002f76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f7a:	f200 8087 	bhi.w	800308c <HAL_TIM_ConfigClockSource+0x168>
 8002f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f82:	f000 8085 	beq.w	8003090 <HAL_TIM_ConfigClockSource+0x16c>
 8002f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f8a:	d87f      	bhi.n	800308c <HAL_TIM_ConfigClockSource+0x168>
 8002f8c:	2b70      	cmp	r3, #112	; 0x70
 8002f8e:	d01a      	beq.n	8002fc6 <HAL_TIM_ConfigClockSource+0xa2>
 8002f90:	2b70      	cmp	r3, #112	; 0x70
 8002f92:	d87b      	bhi.n	800308c <HAL_TIM_ConfigClockSource+0x168>
 8002f94:	2b60      	cmp	r3, #96	; 0x60
 8002f96:	d050      	beq.n	800303a <HAL_TIM_ConfigClockSource+0x116>
 8002f98:	2b60      	cmp	r3, #96	; 0x60
 8002f9a:	d877      	bhi.n	800308c <HAL_TIM_ConfigClockSource+0x168>
 8002f9c:	2b50      	cmp	r3, #80	; 0x50
 8002f9e:	d03c      	beq.n	800301a <HAL_TIM_ConfigClockSource+0xf6>
 8002fa0:	2b50      	cmp	r3, #80	; 0x50
 8002fa2:	d873      	bhi.n	800308c <HAL_TIM_ConfigClockSource+0x168>
 8002fa4:	2b40      	cmp	r3, #64	; 0x40
 8002fa6:	d058      	beq.n	800305a <HAL_TIM_ConfigClockSource+0x136>
 8002fa8:	2b40      	cmp	r3, #64	; 0x40
 8002faa:	d86f      	bhi.n	800308c <HAL_TIM_ConfigClockSource+0x168>
 8002fac:	2b30      	cmp	r3, #48	; 0x30
 8002fae:	d064      	beq.n	800307a <HAL_TIM_ConfigClockSource+0x156>
 8002fb0:	2b30      	cmp	r3, #48	; 0x30
 8002fb2:	d86b      	bhi.n	800308c <HAL_TIM_ConfigClockSource+0x168>
 8002fb4:	2b20      	cmp	r3, #32
 8002fb6:	d060      	beq.n	800307a <HAL_TIM_ConfigClockSource+0x156>
 8002fb8:	2b20      	cmp	r3, #32
 8002fba:	d867      	bhi.n	800308c <HAL_TIM_ConfigClockSource+0x168>
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d05c      	beq.n	800307a <HAL_TIM_ConfigClockSource+0x156>
 8002fc0:	2b10      	cmp	r3, #16
 8002fc2:	d05a      	beq.n	800307a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002fc4:	e062      	b.n	800308c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6818      	ldr	r0, [r3, #0]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	6899      	ldr	r1, [r3, #8]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	f000 faee 	bl	80035b6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fe8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	609a      	str	r2, [r3, #8]
      break;
 8002ff2:	e04e      	b.n	8003092 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6818      	ldr	r0, [r3, #0]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	6899      	ldr	r1, [r3, #8]
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f000 fad7 	bl	80035b6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689a      	ldr	r2, [r3, #8]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003016:	609a      	str	r2, [r3, #8]
      break;
 8003018:	e03b      	b.n	8003092 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6818      	ldr	r0, [r3, #0]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	6859      	ldr	r1, [r3, #4]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	461a      	mov	r2, r3
 8003028:	f000 fa4e 	bl	80034c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2150      	movs	r1, #80	; 0x50
 8003032:	4618      	mov	r0, r3
 8003034:	f000 faa5 	bl	8003582 <TIM_ITRx_SetConfig>
      break;
 8003038:	e02b      	b.n	8003092 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6818      	ldr	r0, [r3, #0]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	6859      	ldr	r1, [r3, #4]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	461a      	mov	r2, r3
 8003048:	f000 fa6c 	bl	8003524 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2160      	movs	r1, #96	; 0x60
 8003052:	4618      	mov	r0, r3
 8003054:	f000 fa95 	bl	8003582 <TIM_ITRx_SetConfig>
      break;
 8003058:	e01b      	b.n	8003092 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6818      	ldr	r0, [r3, #0]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	6859      	ldr	r1, [r3, #4]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	461a      	mov	r2, r3
 8003068:	f000 fa2e 	bl	80034c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2140      	movs	r1, #64	; 0x40
 8003072:	4618      	mov	r0, r3
 8003074:	f000 fa85 	bl	8003582 <TIM_ITRx_SetConfig>
      break;
 8003078:	e00b      	b.n	8003092 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4619      	mov	r1, r3
 8003084:	4610      	mov	r0, r2
 8003086:	f000 fa7c 	bl	8003582 <TIM_ITRx_SetConfig>
        break;
 800308a:	e002      	b.n	8003092 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800308c:	bf00      	nop
 800308e:	e000      	b.n	8003092 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003090:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr

080030be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr

080030d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr

080030e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a29      	ldr	r2, [pc, #164]	; (80031ac <TIM_Base_SetConfig+0xb8>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d00b      	beq.n	8003124 <TIM_Base_SetConfig+0x30>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003112:	d007      	beq.n	8003124 <TIM_Base_SetConfig+0x30>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a26      	ldr	r2, [pc, #152]	; (80031b0 <TIM_Base_SetConfig+0xbc>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d003      	beq.n	8003124 <TIM_Base_SetConfig+0x30>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a25      	ldr	r2, [pc, #148]	; (80031b4 <TIM_Base_SetConfig+0xc0>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d108      	bne.n	8003136 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	4313      	orrs	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a1c      	ldr	r2, [pc, #112]	; (80031ac <TIM_Base_SetConfig+0xb8>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d00b      	beq.n	8003156 <TIM_Base_SetConfig+0x62>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003144:	d007      	beq.n	8003156 <TIM_Base_SetConfig+0x62>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a19      	ldr	r2, [pc, #100]	; (80031b0 <TIM_Base_SetConfig+0xbc>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d003      	beq.n	8003156 <TIM_Base_SetConfig+0x62>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a18      	ldr	r2, [pc, #96]	; (80031b4 <TIM_Base_SetConfig+0xc0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d108      	bne.n	8003168 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800315c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	4313      	orrs	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	4313      	orrs	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a07      	ldr	r2, [pc, #28]	; (80031ac <TIM_Base_SetConfig+0xb8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d103      	bne.n	800319c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	691a      	ldr	r2, [r3, #16]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	615a      	str	r2, [r3, #20]
}
 80031a2:	bf00      	nop
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr
 80031ac:	40012c00 	.word	0x40012c00
 80031b0:	40000400 	.word	0x40000400
 80031b4:	40000800 	.word	0x40000800

080031b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b087      	sub	sp, #28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	f023 0201 	bic.w	r2, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f023 0303 	bic.w	r3, r3, #3
 80031ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f023 0302 	bic.w	r3, r3, #2
 8003200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	4313      	orrs	r3, r2
 800320a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a1c      	ldr	r2, [pc, #112]	; (8003280 <TIM_OC1_SetConfig+0xc8>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d10c      	bne.n	800322e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	f023 0308 	bic.w	r3, r3, #8
 800321a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	4313      	orrs	r3, r2
 8003224:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f023 0304 	bic.w	r3, r3, #4
 800322c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a13      	ldr	r2, [pc, #76]	; (8003280 <TIM_OC1_SetConfig+0xc8>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d111      	bne.n	800325a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800323c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4313      	orrs	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	621a      	str	r2, [r3, #32]
}
 8003274:	bf00      	nop
 8003276:	371c      	adds	r7, #28
 8003278:	46bd      	mov	sp, r7
 800327a:	bc80      	pop	{r7}
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	40012c00 	.word	0x40012c00

08003284 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003284:	b480      	push	{r7}
 8003286:	b087      	sub	sp, #28
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	f023 0210 	bic.w	r2, r3, #16
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	021b      	lsls	r3, r3, #8
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f023 0320 	bic.w	r3, r3, #32
 80032ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	4313      	orrs	r3, r2
 80032da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a1d      	ldr	r2, [pc, #116]	; (8003354 <TIM_OC2_SetConfig+0xd0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d10d      	bne.n	8003300 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a14      	ldr	r2, [pc, #80]	; (8003354 <TIM_OC2_SetConfig+0xd0>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d113      	bne.n	8003330 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800330e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003316:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4313      	orrs	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	621a      	str	r2, [r3, #32]
}
 800334a:	bf00      	nop
 800334c:	371c      	adds	r7, #28
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr
 8003354:	40012c00 	.word	0x40012c00

08003358 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f023 0303 	bic.w	r3, r3, #3
 800338e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	021b      	lsls	r3, r3, #8
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a1d      	ldr	r2, [pc, #116]	; (8003428 <TIM_OC3_SetConfig+0xd0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d10d      	bne.n	80033d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	021b      	lsls	r3, r3, #8
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a14      	ldr	r2, [pc, #80]	; (8003428 <TIM_OC3_SetConfig+0xd0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d113      	bne.n	8003402 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	4313      	orrs	r3, r2
 8003400:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	621a      	str	r2, [r3, #32]
}
 800341c:	bf00      	nop
 800341e:	371c      	adds	r7, #28
 8003420:	46bd      	mov	sp, r7
 8003422:	bc80      	pop	{r7}
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	40012c00 	.word	0x40012c00

0800342c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800342c:	b480      	push	{r7}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800345a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003462:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	021b      	lsls	r3, r3, #8
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	4313      	orrs	r3, r2
 800346e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003476:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	031b      	lsls	r3, r3, #12
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a0f      	ldr	r2, [pc, #60]	; (80034c4 <TIM_OC4_SetConfig+0x98>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d109      	bne.n	80034a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003492:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	019b      	lsls	r3, r3, #6
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	4313      	orrs	r3, r2
 800349e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	621a      	str	r2, [r3, #32]
}
 80034ba:	bf00      	nop
 80034bc:	371c      	adds	r7, #28
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr
 80034c4:	40012c00 	.word	0x40012c00

080034c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b087      	sub	sp, #28
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	f023 0201 	bic.w	r2, r3, #1
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f023 030a 	bic.w	r3, r3, #10
 8003504:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	4313      	orrs	r3, r2
 800350c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	621a      	str	r2, [r3, #32]
}
 800351a:	bf00      	nop
 800351c:	371c      	adds	r7, #28
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr

08003524 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	f023 0210 	bic.w	r2, r3, #16
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800354e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	031b      	lsls	r3, r3, #12
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	4313      	orrs	r3, r2
 8003558:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003560:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	4313      	orrs	r3, r2
 800356a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	621a      	str	r2, [r3, #32]
}
 8003578:	bf00      	nop
 800357a:	371c      	adds	r7, #28
 800357c:	46bd      	mov	sp, r7
 800357e:	bc80      	pop	{r7}
 8003580:	4770      	bx	lr

08003582 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003582:	b480      	push	{r7}
 8003584:	b085      	sub	sp, #20
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003598:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	f043 0307 	orr.w	r3, r3, #7
 80035a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	609a      	str	r2, [r3, #8]
}
 80035ac:	bf00      	nop
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bc80      	pop	{r7}
 80035b4:	4770      	bx	lr

080035b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b087      	sub	sp, #28
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	60b9      	str	r1, [r7, #8]
 80035c0:	607a      	str	r2, [r7, #4]
 80035c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	021a      	lsls	r2, r3, #8
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	431a      	orrs	r2, r3
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	4313      	orrs	r3, r2
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	609a      	str	r2, [r3, #8]
}
 80035ea:	bf00      	nop
 80035ec:	371c      	adds	r7, #28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr

080035f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	f003 031f 	and.w	r3, r3, #31
 8003606:	2201      	movs	r2, #1
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a1a      	ldr	r2, [r3, #32]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	43db      	mvns	r3, r3
 8003616:	401a      	ands	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a1a      	ldr	r2, [r3, #32]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f003 031f 	and.w	r3, r3, #31
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	fa01 f303 	lsl.w	r3, r1, r3
 800362c:	431a      	orrs	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	621a      	str	r2, [r3, #32]
}
 8003632:	bf00      	nop
 8003634:	371c      	adds	r7, #28
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr

0800363c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800364c:	2b01      	cmp	r3, #1
 800364e:	d101      	bne.n	8003654 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003650:	2302      	movs	r3, #2
 8003652:	e046      	b.n	80036e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800367a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4313      	orrs	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a16      	ldr	r2, [pc, #88]	; (80036ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d00e      	beq.n	80036b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a0:	d009      	beq.n	80036b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a12      	ldr	r2, [pc, #72]	; (80036f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d004      	beq.n	80036b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a10      	ldr	r2, [pc, #64]	; (80036f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d10c      	bne.n	80036d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc80      	pop	{r7}
 80036ea:	4770      	bx	lr
 80036ec:	40012c00 	.word	0x40012c00
 80036f0:	40000400 	.word	0x40000400
 80036f4:	40000800 	.word	0x40000800

080036f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr

0800370a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr

0800371c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e03f      	b.n	80037ae <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d106      	bne.n	8003748 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7fd ffa4 	bl	8001690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2224      	movs	r2, #36	; 0x24
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800375e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 fc25 	bl	8003fb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003774:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695a      	ldr	r2, [r3, #20]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003784:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003794:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2220      	movs	r2, #32
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b08a      	sub	sp, #40	; 0x28
 80037ba:	af02      	add	r7, sp, #8
 80037bc:	60f8      	str	r0, [r7, #12]
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	603b      	str	r3, [r7, #0]
 80037c2:	4613      	mov	r3, r2
 80037c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037c6:	2300      	movs	r3, #0
 80037c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b20      	cmp	r3, #32
 80037d4:	d17c      	bne.n	80038d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d002      	beq.n	80037e2 <HAL_UART_Transmit+0x2c>
 80037dc:	88fb      	ldrh	r3, [r7, #6]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e075      	b.n	80038d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d101      	bne.n	80037f4 <HAL_UART_Transmit+0x3e>
 80037f0:	2302      	movs	r3, #2
 80037f2:	e06e      	b.n	80038d2 <HAL_UART_Transmit+0x11c>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2221      	movs	r2, #33	; 0x21
 8003806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800380a:	f7fe f893 	bl	8001934 <HAL_GetTick>
 800380e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	88fa      	ldrh	r2, [r7, #6]
 8003814:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	88fa      	ldrh	r2, [r7, #6]
 800381a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003824:	d108      	bne.n	8003838 <HAL_UART_Transmit+0x82>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d104      	bne.n	8003838 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800382e:	2300      	movs	r3, #0
 8003830:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	61bb      	str	r3, [r7, #24]
 8003836:	e003      	b.n	8003840 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800383c:	2300      	movs	r3, #0
 800383e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003848:	e02a      	b.n	80038a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2200      	movs	r2, #0
 8003852:	2180      	movs	r1, #128	; 0x80
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f000 fa11 	bl	8003c7c <UART_WaitOnFlagUntilTimeout>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e036      	b.n	80038d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10b      	bne.n	8003882 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	461a      	mov	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003878:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	3302      	adds	r3, #2
 800387e:	61bb      	str	r3, [r7, #24]
 8003880:	e007      	b.n	8003892 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	781a      	ldrb	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	3301      	adds	r3, #1
 8003890:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003896:	b29b      	uxth	r3, r3
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1cf      	bne.n	800384a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2200      	movs	r2, #0
 80038b2:	2140      	movs	r1, #64	; 0x40
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 f9e1 	bl	8003c7c <UART_WaitOnFlagUntilTimeout>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e006      	b.n	80038d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	e000      	b.n	80038d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80038d0:	2302      	movs	r3, #2
  }
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3720      	adds	r7, #32
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
	...

080038dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08a      	sub	sp, #40	; 0x28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80038fc:	2300      	movs	r3, #0
 80038fe:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003900:	2300      	movs	r3, #0
 8003902:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10d      	bne.n	800392e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	f003 0320 	and.w	r3, r3, #32
 8003918:	2b00      	cmp	r3, #0
 800391a:	d008      	beq.n	800392e <HAL_UART_IRQHandler+0x52>
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	f003 0320 	and.w	r3, r3, #32
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 fa99 	bl	8003e5e <UART_Receive_IT>
      return;
 800392c:	e17b      	b.n	8003c26 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 80b1 	beq.w	8003a98 <HAL_UART_IRQHandler+0x1bc>
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d105      	bne.n	800394c <HAL_UART_IRQHandler+0x70>
 8003940:	6a3b      	ldr	r3, [r7, #32]
 8003942:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 80a6 	beq.w	8003a98 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <HAL_UART_IRQHandler+0x90>
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395c:	2b00      	cmp	r3, #0
 800395e:	d005      	beq.n	800396c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	f043 0201 	orr.w	r2, r3, #1
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	f003 0304 	and.w	r3, r3, #4
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <HAL_UART_IRQHandler+0xb0>
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	f043 0202 	orr.w	r2, r3, #2
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00a      	beq.n	80039ac <HAL_UART_IRQHandler+0xd0>
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	d005      	beq.n	80039ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a4:	f043 0204 	orr.w	r2, r3, #4
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00f      	beq.n	80039d6 <HAL_UART_IRQHandler+0xfa>
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	f003 0320 	and.w	r3, r3, #32
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d104      	bne.n	80039ca <HAL_UART_IRQHandler+0xee>
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d005      	beq.n	80039d6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f043 0208 	orr.w	r2, r3, #8
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 811e 	beq.w	8003c1c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	f003 0320 	and.w	r3, r3, #32
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d007      	beq.n	80039fa <HAL_UART_IRQHandler+0x11e>
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	f003 0320 	and.w	r3, r3, #32
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 fa32 	bl	8003e5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	bf14      	ite	ne
 8003a08:	2301      	movne	r3, #1
 8003a0a:	2300      	moveq	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d102      	bne.n	8003a22 <HAL_UART_IRQHandler+0x146>
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d031      	beq.n	8003a86 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f974 	bl	8003d10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d023      	beq.n	8003a7e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695a      	ldr	r2, [r3, #20]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a44:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d013      	beq.n	8003a76 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a52:	4a76      	ldr	r2, [pc, #472]	; (8003c2c <HAL_UART_IRQHandler+0x350>)
 8003a54:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fe f8bc 	bl	8001bd8 <HAL_DMA_Abort_IT>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d016      	beq.n	8003a94 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a70:	4610      	mov	r0, r2
 8003a72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a74:	e00e      	b.n	8003a94 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f8ec 	bl	8003c54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a7c:	e00a      	b.n	8003a94 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f8e8 	bl	8003c54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a84:	e006      	b.n	8003a94 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f8e4 	bl	8003c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003a92:	e0c3      	b.n	8003c1c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a94:	bf00      	nop
    return;
 8003a96:	e0c1      	b.n	8003c1c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	f040 80a1 	bne.w	8003be4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	f003 0310 	and.w	r3, r3, #16
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 809b 	beq.w	8003be4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	f003 0310 	and.w	r3, r3, #16
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 8095 	beq.w	8003be4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003aba:	2300      	movs	r3, #0
 8003abc:	60fb      	str	r3, [r7, #12]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	60fb      	str	r3, [r7, #12]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d04e      	beq.n	8003b7c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003ae8:	8a3b      	ldrh	r3, [r7, #16]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 8098 	beq.w	8003c20 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003af4:	8a3a      	ldrh	r2, [r7, #16]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	f080 8092 	bcs.w	8003c20 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	8a3a      	ldrh	r2, [r7, #16]
 8003b00:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	2b20      	cmp	r3, #32
 8003b0a:	d02b      	beq.n	8003b64 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b1a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695a      	ldr	r2, [r3, #20]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0201 	bic.w	r2, r2, #1
 8003b2a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695a      	ldr	r2, [r3, #20]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b3a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68da      	ldr	r2, [r3, #12]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0210 	bic.w	r2, r2, #16
 8003b58:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fd ffff 	bl	8001b62 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	4619      	mov	r1, r3
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f876 	bl	8003c66 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003b7a:	e051      	b.n	8003c20 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d047      	beq.n	8003c24 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003b94:	8a7b      	ldrh	r3, [r7, #18]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d044      	beq.n	8003c24 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68da      	ldr	r2, [r3, #12]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ba8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695a      	ldr	r2, [r3, #20]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0201 	bic.w	r2, r2, #1
 8003bb8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0210 	bic.w	r2, r2, #16
 8003bd6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bd8:	8a7b      	ldrh	r3, [r7, #18]
 8003bda:	4619      	mov	r1, r3
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f842 	bl	8003c66 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003be2:	e01f      	b.n	8003c24 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d008      	beq.n	8003c00 <HAL_UART_IRQHandler+0x324>
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d003      	beq.n	8003c00 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f8c9 	bl	8003d90 <UART_Transmit_IT>
    return;
 8003bfe:	e012      	b.n	8003c26 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00d      	beq.n	8003c26 <HAL_UART_IRQHandler+0x34a>
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d008      	beq.n	8003c26 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 f90a 	bl	8003e2e <UART_EndTransmit_IT>
    return;
 8003c1a:	e004      	b.n	8003c26 <HAL_UART_IRQHandler+0x34a>
    return;
 8003c1c:	bf00      	nop
 8003c1e:	e002      	b.n	8003c26 <HAL_UART_IRQHandler+0x34a>
      return;
 8003c20:	bf00      	nop
 8003c22:	e000      	b.n	8003c26 <HAL_UART_IRQHandler+0x34a>
      return;
 8003c24:	bf00      	nop
  }
}
 8003c26:	3728      	adds	r7, #40	; 0x28
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	08003d69 	.word	0x08003d69

08003c30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc80      	pop	{r7}
 8003c40:	4770      	bx	lr

08003c42 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bc80      	pop	{r7}
 8003c52:	4770      	bx	lr

08003c54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bc80      	pop	{r7}
 8003c64:	4770      	bx	lr

08003c66 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	460b      	mov	r3, r1
 8003c70:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c72:	bf00      	nop
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr

08003c7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	603b      	str	r3, [r7, #0]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c8c:	e02c      	b.n	8003ce8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c94:	d028      	beq.n	8003ce8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d007      	beq.n	8003cac <UART_WaitOnFlagUntilTimeout+0x30>
 8003c9c:	f7fd fe4a 	bl	8001934 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d21d      	bcs.n	8003ce8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68da      	ldr	r2, [r3, #12]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003cba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695a      	ldr	r2, [r3, #20]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0201 	bic.w	r2, r2, #1
 8003cca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e00f      	b.n	8003d08 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	bf0c      	ite	eq
 8003cf8:	2301      	moveq	r3, #1
 8003cfa:	2300      	movne	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	461a      	mov	r2, r3
 8003d00:	79fb      	ldrb	r3, [r7, #7]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d0c3      	beq.n	8003c8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d26:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695a      	ldr	r2, [r3, #20]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0201 	bic.w	r2, r2, #1
 8003d36:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d107      	bne.n	8003d50 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0210 	bic.w	r2, r2, #16
 8003d4e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d5e:	bf00      	nop
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bc80      	pop	{r7}
 8003d66:	4770      	bx	lr

08003d68 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f7ff ff66 	bl	8003c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d88:	bf00      	nop
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b21      	cmp	r3, #33	; 0x21
 8003da2:	d13e      	bne.n	8003e22 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dac:	d114      	bne.n	8003dd8 <UART_Transmit_IT+0x48>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d110      	bne.n	8003dd8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	1c9a      	adds	r2, r3, #2
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	621a      	str	r2, [r3, #32]
 8003dd6:	e008      	b.n	8003dea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	1c59      	adds	r1, r3, #1
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6211      	str	r1, [r2, #32]
 8003de2:	781a      	ldrb	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	3b01      	subs	r3, #1
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	4619      	mov	r1, r3
 8003df8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10f      	bne.n	8003e1e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68da      	ldr	r2, [r3, #12]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e0c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e1c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	e000      	b.n	8003e24 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e22:	2302      	movs	r3, #2
  }
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bc80      	pop	{r7}
 8003e2c:	4770      	bx	lr

08003e2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b082      	sub	sp, #8
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68da      	ldr	r2, [r3, #12]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7ff feee 	bl	8003c30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b086      	sub	sp, #24
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b22      	cmp	r3, #34	; 0x22
 8003e70:	f040 8099 	bne.w	8003fa6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e7c:	d117      	bne.n	8003eae <UART_Receive_IT+0x50>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d113      	bne.n	8003eae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e86:	2300      	movs	r3, #0
 8003e88:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea6:	1c9a      	adds	r2, r3, #2
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	629a      	str	r2, [r3, #40]	; 0x28
 8003eac:	e026      	b.n	8003efc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec0:	d007      	beq.n	8003ed2 <UART_Receive_IT+0x74>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10a      	bne.n	8003ee0 <UART_Receive_IT+0x82>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d106      	bne.n	8003ee0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	b2da      	uxtb	r2, r3
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	701a      	strb	r2, [r3, #0]
 8003ede:	e008      	b.n	8003ef2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	3b01      	subs	r3, #1
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	4619      	mov	r1, r3
 8003f0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d148      	bne.n	8003fa2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0220 	bic.w	r2, r2, #32
 8003f1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68da      	ldr	r2, [r3, #12]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	695a      	ldr	r2, [r3, #20]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 0201 	bic.w	r2, r2, #1
 8003f3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d123      	bne.n	8003f98 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0210 	bic.w	r2, r2, #16
 8003f64:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0310 	and.w	r3, r3, #16
 8003f70:	2b10      	cmp	r3, #16
 8003f72:	d10a      	bne.n	8003f8a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f74:	2300      	movs	r3, #0
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f8e:	4619      	mov	r1, r3
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f7ff fe68 	bl	8003c66 <HAL_UARTEx_RxEventCallback>
 8003f96:	e002      	b.n	8003f9e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f7ff fe52 	bl	8003c42 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	e002      	b.n	8003fa8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	e000      	b.n	8003fa8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003fa6:	2302      	movs	r3, #2
  }
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689a      	ldr	r2, [r3, #8]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003fea:	f023 030c 	bic.w	r3, r3, #12
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6812      	ldr	r2, [r2, #0]
 8003ff2:	68b9      	ldr	r1, [r7, #8]
 8003ff4:	430b      	orrs	r3, r1
 8003ff6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	699a      	ldr	r2, [r3, #24]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a2c      	ldr	r2, [pc, #176]	; (80040c4 <UART_SetConfig+0x114>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d103      	bne.n	8004020 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004018:	f7fe fbf0 	bl	80027fc <HAL_RCC_GetPCLK2Freq>
 800401c:	60f8      	str	r0, [r7, #12]
 800401e:	e002      	b.n	8004026 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004020:	f7fe fbd8 	bl	80027d4 <HAL_RCC_GetPCLK1Freq>
 8004024:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	4613      	mov	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	009a      	lsls	r2, r3, #2
 8004030:	441a      	add	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	fbb2 f3f3 	udiv	r3, r2, r3
 800403c:	4a22      	ldr	r2, [pc, #136]	; (80040c8 <UART_SetConfig+0x118>)
 800403e:	fba2 2303 	umull	r2, r3, r2, r3
 8004042:	095b      	lsrs	r3, r3, #5
 8004044:	0119      	lsls	r1, r3, #4
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	4613      	mov	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	009a      	lsls	r2, r3, #2
 8004050:	441a      	add	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	fbb2 f2f3 	udiv	r2, r2, r3
 800405c:	4b1a      	ldr	r3, [pc, #104]	; (80040c8 <UART_SetConfig+0x118>)
 800405e:	fba3 0302 	umull	r0, r3, r3, r2
 8004062:	095b      	lsrs	r3, r3, #5
 8004064:	2064      	movs	r0, #100	; 0x64
 8004066:	fb00 f303 	mul.w	r3, r0, r3
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	011b      	lsls	r3, r3, #4
 800406e:	3332      	adds	r3, #50	; 0x32
 8004070:	4a15      	ldr	r2, [pc, #84]	; (80040c8 <UART_SetConfig+0x118>)
 8004072:	fba2 2303 	umull	r2, r3, r2, r3
 8004076:	095b      	lsrs	r3, r3, #5
 8004078:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800407c:	4419      	add	r1, r3
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4613      	mov	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	009a      	lsls	r2, r3, #2
 8004088:	441a      	add	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	fbb2 f2f3 	udiv	r2, r2, r3
 8004094:	4b0c      	ldr	r3, [pc, #48]	; (80040c8 <UART_SetConfig+0x118>)
 8004096:	fba3 0302 	umull	r0, r3, r3, r2
 800409a:	095b      	lsrs	r3, r3, #5
 800409c:	2064      	movs	r0, #100	; 0x64
 800409e:	fb00 f303 	mul.w	r3, r0, r3
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	011b      	lsls	r3, r3, #4
 80040a6:	3332      	adds	r3, #50	; 0x32
 80040a8:	4a07      	ldr	r2, [pc, #28]	; (80040c8 <UART_SetConfig+0x118>)
 80040aa:	fba2 2303 	umull	r2, r3, r2, r3
 80040ae:	095b      	lsrs	r3, r3, #5
 80040b0:	f003 020f 	and.w	r2, r3, #15
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	440a      	add	r2, r1
 80040ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80040bc:	bf00      	nop
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	40013800 	.word	0x40013800
 80040c8:	51eb851f 	.word	0x51eb851f

080040cc <__errno>:
 80040cc:	4b01      	ldr	r3, [pc, #4]	; (80040d4 <__errno+0x8>)
 80040ce:	6818      	ldr	r0, [r3, #0]
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	20000044 	.word	0x20000044

080040d8 <__libc_init_array>:
 80040d8:	b570      	push	{r4, r5, r6, lr}
 80040da:	2600      	movs	r6, #0
 80040dc:	4d0c      	ldr	r5, [pc, #48]	; (8004110 <__libc_init_array+0x38>)
 80040de:	4c0d      	ldr	r4, [pc, #52]	; (8004114 <__libc_init_array+0x3c>)
 80040e0:	1b64      	subs	r4, r4, r5
 80040e2:	10a4      	asrs	r4, r4, #2
 80040e4:	42a6      	cmp	r6, r4
 80040e6:	d109      	bne.n	80040fc <__libc_init_array+0x24>
 80040e8:	f000 fc9c 	bl	8004a24 <_init>
 80040ec:	2600      	movs	r6, #0
 80040ee:	4d0a      	ldr	r5, [pc, #40]	; (8004118 <__libc_init_array+0x40>)
 80040f0:	4c0a      	ldr	r4, [pc, #40]	; (800411c <__libc_init_array+0x44>)
 80040f2:	1b64      	subs	r4, r4, r5
 80040f4:	10a4      	asrs	r4, r4, #2
 80040f6:	42a6      	cmp	r6, r4
 80040f8:	d105      	bne.n	8004106 <__libc_init_array+0x2e>
 80040fa:	bd70      	pop	{r4, r5, r6, pc}
 80040fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004100:	4798      	blx	r3
 8004102:	3601      	adds	r6, #1
 8004104:	e7ee      	b.n	80040e4 <__libc_init_array+0xc>
 8004106:	f855 3b04 	ldr.w	r3, [r5], #4
 800410a:	4798      	blx	r3
 800410c:	3601      	adds	r6, #1
 800410e:	e7f2      	b.n	80040f6 <__libc_init_array+0x1e>
 8004110:	08004aa8 	.word	0x08004aa8
 8004114:	08004aa8 	.word	0x08004aa8
 8004118:	08004aa8 	.word	0x08004aa8
 800411c:	08004aac 	.word	0x08004aac

08004120 <memset>:
 8004120:	4603      	mov	r3, r0
 8004122:	4402      	add	r2, r0
 8004124:	4293      	cmp	r3, r2
 8004126:	d100      	bne.n	800412a <memset+0xa>
 8004128:	4770      	bx	lr
 800412a:	f803 1b01 	strb.w	r1, [r3], #1
 800412e:	e7f9      	b.n	8004124 <memset+0x4>

08004130 <siprintf>:
 8004130:	b40e      	push	{r1, r2, r3}
 8004132:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004136:	b500      	push	{lr}
 8004138:	b09c      	sub	sp, #112	; 0x70
 800413a:	ab1d      	add	r3, sp, #116	; 0x74
 800413c:	9002      	str	r0, [sp, #8]
 800413e:	9006      	str	r0, [sp, #24]
 8004140:	9107      	str	r1, [sp, #28]
 8004142:	9104      	str	r1, [sp, #16]
 8004144:	4808      	ldr	r0, [pc, #32]	; (8004168 <siprintf+0x38>)
 8004146:	4909      	ldr	r1, [pc, #36]	; (800416c <siprintf+0x3c>)
 8004148:	f853 2b04 	ldr.w	r2, [r3], #4
 800414c:	9105      	str	r1, [sp, #20]
 800414e:	6800      	ldr	r0, [r0, #0]
 8004150:	a902      	add	r1, sp, #8
 8004152:	9301      	str	r3, [sp, #4]
 8004154:	f000 f868 	bl	8004228 <_svfiprintf_r>
 8004158:	2200      	movs	r2, #0
 800415a:	9b02      	ldr	r3, [sp, #8]
 800415c:	701a      	strb	r2, [r3, #0]
 800415e:	b01c      	add	sp, #112	; 0x70
 8004160:	f85d eb04 	ldr.w	lr, [sp], #4
 8004164:	b003      	add	sp, #12
 8004166:	4770      	bx	lr
 8004168:	20000044 	.word	0x20000044
 800416c:	ffff0208 	.word	0xffff0208

08004170 <__ssputs_r>:
 8004170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004174:	688e      	ldr	r6, [r1, #8]
 8004176:	4682      	mov	sl, r0
 8004178:	429e      	cmp	r6, r3
 800417a:	460c      	mov	r4, r1
 800417c:	4690      	mov	r8, r2
 800417e:	461f      	mov	r7, r3
 8004180:	d838      	bhi.n	80041f4 <__ssputs_r+0x84>
 8004182:	898a      	ldrh	r2, [r1, #12]
 8004184:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004188:	d032      	beq.n	80041f0 <__ssputs_r+0x80>
 800418a:	6825      	ldr	r5, [r4, #0]
 800418c:	6909      	ldr	r1, [r1, #16]
 800418e:	3301      	adds	r3, #1
 8004190:	eba5 0901 	sub.w	r9, r5, r1
 8004194:	6965      	ldr	r5, [r4, #20]
 8004196:	444b      	add	r3, r9
 8004198:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800419c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041a0:	106d      	asrs	r5, r5, #1
 80041a2:	429d      	cmp	r5, r3
 80041a4:	bf38      	it	cc
 80041a6:	461d      	movcc	r5, r3
 80041a8:	0553      	lsls	r3, r2, #21
 80041aa:	d531      	bpl.n	8004210 <__ssputs_r+0xa0>
 80041ac:	4629      	mov	r1, r5
 80041ae:	f000 fb6f 	bl	8004890 <_malloc_r>
 80041b2:	4606      	mov	r6, r0
 80041b4:	b950      	cbnz	r0, 80041cc <__ssputs_r+0x5c>
 80041b6:	230c      	movs	r3, #12
 80041b8:	f04f 30ff 	mov.w	r0, #4294967295
 80041bc:	f8ca 3000 	str.w	r3, [sl]
 80041c0:	89a3      	ldrh	r3, [r4, #12]
 80041c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041c6:	81a3      	strh	r3, [r4, #12]
 80041c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041cc:	464a      	mov	r2, r9
 80041ce:	6921      	ldr	r1, [r4, #16]
 80041d0:	f000 face 	bl	8004770 <memcpy>
 80041d4:	89a3      	ldrh	r3, [r4, #12]
 80041d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041de:	81a3      	strh	r3, [r4, #12]
 80041e0:	6126      	str	r6, [r4, #16]
 80041e2:	444e      	add	r6, r9
 80041e4:	6026      	str	r6, [r4, #0]
 80041e6:	463e      	mov	r6, r7
 80041e8:	6165      	str	r5, [r4, #20]
 80041ea:	eba5 0509 	sub.w	r5, r5, r9
 80041ee:	60a5      	str	r5, [r4, #8]
 80041f0:	42be      	cmp	r6, r7
 80041f2:	d900      	bls.n	80041f6 <__ssputs_r+0x86>
 80041f4:	463e      	mov	r6, r7
 80041f6:	4632      	mov	r2, r6
 80041f8:	4641      	mov	r1, r8
 80041fa:	6820      	ldr	r0, [r4, #0]
 80041fc:	f000 fac6 	bl	800478c <memmove>
 8004200:	68a3      	ldr	r3, [r4, #8]
 8004202:	2000      	movs	r0, #0
 8004204:	1b9b      	subs	r3, r3, r6
 8004206:	60a3      	str	r3, [r4, #8]
 8004208:	6823      	ldr	r3, [r4, #0]
 800420a:	4433      	add	r3, r6
 800420c:	6023      	str	r3, [r4, #0]
 800420e:	e7db      	b.n	80041c8 <__ssputs_r+0x58>
 8004210:	462a      	mov	r2, r5
 8004212:	f000 fbb1 	bl	8004978 <_realloc_r>
 8004216:	4606      	mov	r6, r0
 8004218:	2800      	cmp	r0, #0
 800421a:	d1e1      	bne.n	80041e0 <__ssputs_r+0x70>
 800421c:	4650      	mov	r0, sl
 800421e:	6921      	ldr	r1, [r4, #16]
 8004220:	f000 face 	bl	80047c0 <_free_r>
 8004224:	e7c7      	b.n	80041b6 <__ssputs_r+0x46>
	...

08004228 <_svfiprintf_r>:
 8004228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800422c:	4698      	mov	r8, r3
 800422e:	898b      	ldrh	r3, [r1, #12]
 8004230:	4607      	mov	r7, r0
 8004232:	061b      	lsls	r3, r3, #24
 8004234:	460d      	mov	r5, r1
 8004236:	4614      	mov	r4, r2
 8004238:	b09d      	sub	sp, #116	; 0x74
 800423a:	d50e      	bpl.n	800425a <_svfiprintf_r+0x32>
 800423c:	690b      	ldr	r3, [r1, #16]
 800423e:	b963      	cbnz	r3, 800425a <_svfiprintf_r+0x32>
 8004240:	2140      	movs	r1, #64	; 0x40
 8004242:	f000 fb25 	bl	8004890 <_malloc_r>
 8004246:	6028      	str	r0, [r5, #0]
 8004248:	6128      	str	r0, [r5, #16]
 800424a:	b920      	cbnz	r0, 8004256 <_svfiprintf_r+0x2e>
 800424c:	230c      	movs	r3, #12
 800424e:	603b      	str	r3, [r7, #0]
 8004250:	f04f 30ff 	mov.w	r0, #4294967295
 8004254:	e0d1      	b.n	80043fa <_svfiprintf_r+0x1d2>
 8004256:	2340      	movs	r3, #64	; 0x40
 8004258:	616b      	str	r3, [r5, #20]
 800425a:	2300      	movs	r3, #0
 800425c:	9309      	str	r3, [sp, #36]	; 0x24
 800425e:	2320      	movs	r3, #32
 8004260:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004264:	2330      	movs	r3, #48	; 0x30
 8004266:	f04f 0901 	mov.w	r9, #1
 800426a:	f8cd 800c 	str.w	r8, [sp, #12]
 800426e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004414 <_svfiprintf_r+0x1ec>
 8004272:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004276:	4623      	mov	r3, r4
 8004278:	469a      	mov	sl, r3
 800427a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800427e:	b10a      	cbz	r2, 8004284 <_svfiprintf_r+0x5c>
 8004280:	2a25      	cmp	r2, #37	; 0x25
 8004282:	d1f9      	bne.n	8004278 <_svfiprintf_r+0x50>
 8004284:	ebba 0b04 	subs.w	fp, sl, r4
 8004288:	d00b      	beq.n	80042a2 <_svfiprintf_r+0x7a>
 800428a:	465b      	mov	r3, fp
 800428c:	4622      	mov	r2, r4
 800428e:	4629      	mov	r1, r5
 8004290:	4638      	mov	r0, r7
 8004292:	f7ff ff6d 	bl	8004170 <__ssputs_r>
 8004296:	3001      	adds	r0, #1
 8004298:	f000 80aa 	beq.w	80043f0 <_svfiprintf_r+0x1c8>
 800429c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800429e:	445a      	add	r2, fp
 80042a0:	9209      	str	r2, [sp, #36]	; 0x24
 80042a2:	f89a 3000 	ldrb.w	r3, [sl]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 80a2 	beq.w	80043f0 <_svfiprintf_r+0x1c8>
 80042ac:	2300      	movs	r3, #0
 80042ae:	f04f 32ff 	mov.w	r2, #4294967295
 80042b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042b6:	f10a 0a01 	add.w	sl, sl, #1
 80042ba:	9304      	str	r3, [sp, #16]
 80042bc:	9307      	str	r3, [sp, #28]
 80042be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042c2:	931a      	str	r3, [sp, #104]	; 0x68
 80042c4:	4654      	mov	r4, sl
 80042c6:	2205      	movs	r2, #5
 80042c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042cc:	4851      	ldr	r0, [pc, #324]	; (8004414 <_svfiprintf_r+0x1ec>)
 80042ce:	f000 fa41 	bl	8004754 <memchr>
 80042d2:	9a04      	ldr	r2, [sp, #16]
 80042d4:	b9d8      	cbnz	r0, 800430e <_svfiprintf_r+0xe6>
 80042d6:	06d0      	lsls	r0, r2, #27
 80042d8:	bf44      	itt	mi
 80042da:	2320      	movmi	r3, #32
 80042dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042e0:	0711      	lsls	r1, r2, #28
 80042e2:	bf44      	itt	mi
 80042e4:	232b      	movmi	r3, #43	; 0x2b
 80042e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042ea:	f89a 3000 	ldrb.w	r3, [sl]
 80042ee:	2b2a      	cmp	r3, #42	; 0x2a
 80042f0:	d015      	beq.n	800431e <_svfiprintf_r+0xf6>
 80042f2:	4654      	mov	r4, sl
 80042f4:	2000      	movs	r0, #0
 80042f6:	f04f 0c0a 	mov.w	ip, #10
 80042fa:	9a07      	ldr	r2, [sp, #28]
 80042fc:	4621      	mov	r1, r4
 80042fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004302:	3b30      	subs	r3, #48	; 0x30
 8004304:	2b09      	cmp	r3, #9
 8004306:	d94e      	bls.n	80043a6 <_svfiprintf_r+0x17e>
 8004308:	b1b0      	cbz	r0, 8004338 <_svfiprintf_r+0x110>
 800430a:	9207      	str	r2, [sp, #28]
 800430c:	e014      	b.n	8004338 <_svfiprintf_r+0x110>
 800430e:	eba0 0308 	sub.w	r3, r0, r8
 8004312:	fa09 f303 	lsl.w	r3, r9, r3
 8004316:	4313      	orrs	r3, r2
 8004318:	46a2      	mov	sl, r4
 800431a:	9304      	str	r3, [sp, #16]
 800431c:	e7d2      	b.n	80042c4 <_svfiprintf_r+0x9c>
 800431e:	9b03      	ldr	r3, [sp, #12]
 8004320:	1d19      	adds	r1, r3, #4
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	9103      	str	r1, [sp, #12]
 8004326:	2b00      	cmp	r3, #0
 8004328:	bfbb      	ittet	lt
 800432a:	425b      	neglt	r3, r3
 800432c:	f042 0202 	orrlt.w	r2, r2, #2
 8004330:	9307      	strge	r3, [sp, #28]
 8004332:	9307      	strlt	r3, [sp, #28]
 8004334:	bfb8      	it	lt
 8004336:	9204      	strlt	r2, [sp, #16]
 8004338:	7823      	ldrb	r3, [r4, #0]
 800433a:	2b2e      	cmp	r3, #46	; 0x2e
 800433c:	d10c      	bne.n	8004358 <_svfiprintf_r+0x130>
 800433e:	7863      	ldrb	r3, [r4, #1]
 8004340:	2b2a      	cmp	r3, #42	; 0x2a
 8004342:	d135      	bne.n	80043b0 <_svfiprintf_r+0x188>
 8004344:	9b03      	ldr	r3, [sp, #12]
 8004346:	3402      	adds	r4, #2
 8004348:	1d1a      	adds	r2, r3, #4
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	9203      	str	r2, [sp, #12]
 800434e:	2b00      	cmp	r3, #0
 8004350:	bfb8      	it	lt
 8004352:	f04f 33ff 	movlt.w	r3, #4294967295
 8004356:	9305      	str	r3, [sp, #20]
 8004358:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004418 <_svfiprintf_r+0x1f0>
 800435c:	2203      	movs	r2, #3
 800435e:	4650      	mov	r0, sl
 8004360:	7821      	ldrb	r1, [r4, #0]
 8004362:	f000 f9f7 	bl	8004754 <memchr>
 8004366:	b140      	cbz	r0, 800437a <_svfiprintf_r+0x152>
 8004368:	2340      	movs	r3, #64	; 0x40
 800436a:	eba0 000a 	sub.w	r0, r0, sl
 800436e:	fa03 f000 	lsl.w	r0, r3, r0
 8004372:	9b04      	ldr	r3, [sp, #16]
 8004374:	3401      	adds	r4, #1
 8004376:	4303      	orrs	r3, r0
 8004378:	9304      	str	r3, [sp, #16]
 800437a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800437e:	2206      	movs	r2, #6
 8004380:	4826      	ldr	r0, [pc, #152]	; (800441c <_svfiprintf_r+0x1f4>)
 8004382:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004386:	f000 f9e5 	bl	8004754 <memchr>
 800438a:	2800      	cmp	r0, #0
 800438c:	d038      	beq.n	8004400 <_svfiprintf_r+0x1d8>
 800438e:	4b24      	ldr	r3, [pc, #144]	; (8004420 <_svfiprintf_r+0x1f8>)
 8004390:	bb1b      	cbnz	r3, 80043da <_svfiprintf_r+0x1b2>
 8004392:	9b03      	ldr	r3, [sp, #12]
 8004394:	3307      	adds	r3, #7
 8004396:	f023 0307 	bic.w	r3, r3, #7
 800439a:	3308      	adds	r3, #8
 800439c:	9303      	str	r3, [sp, #12]
 800439e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043a0:	4433      	add	r3, r6
 80043a2:	9309      	str	r3, [sp, #36]	; 0x24
 80043a4:	e767      	b.n	8004276 <_svfiprintf_r+0x4e>
 80043a6:	460c      	mov	r4, r1
 80043a8:	2001      	movs	r0, #1
 80043aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80043ae:	e7a5      	b.n	80042fc <_svfiprintf_r+0xd4>
 80043b0:	2300      	movs	r3, #0
 80043b2:	f04f 0c0a 	mov.w	ip, #10
 80043b6:	4619      	mov	r1, r3
 80043b8:	3401      	adds	r4, #1
 80043ba:	9305      	str	r3, [sp, #20]
 80043bc:	4620      	mov	r0, r4
 80043be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043c2:	3a30      	subs	r2, #48	; 0x30
 80043c4:	2a09      	cmp	r2, #9
 80043c6:	d903      	bls.n	80043d0 <_svfiprintf_r+0x1a8>
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0c5      	beq.n	8004358 <_svfiprintf_r+0x130>
 80043cc:	9105      	str	r1, [sp, #20]
 80043ce:	e7c3      	b.n	8004358 <_svfiprintf_r+0x130>
 80043d0:	4604      	mov	r4, r0
 80043d2:	2301      	movs	r3, #1
 80043d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80043d8:	e7f0      	b.n	80043bc <_svfiprintf_r+0x194>
 80043da:	ab03      	add	r3, sp, #12
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	462a      	mov	r2, r5
 80043e0:	4638      	mov	r0, r7
 80043e2:	4b10      	ldr	r3, [pc, #64]	; (8004424 <_svfiprintf_r+0x1fc>)
 80043e4:	a904      	add	r1, sp, #16
 80043e6:	f3af 8000 	nop.w
 80043ea:	1c42      	adds	r2, r0, #1
 80043ec:	4606      	mov	r6, r0
 80043ee:	d1d6      	bne.n	800439e <_svfiprintf_r+0x176>
 80043f0:	89ab      	ldrh	r3, [r5, #12]
 80043f2:	065b      	lsls	r3, r3, #25
 80043f4:	f53f af2c 	bmi.w	8004250 <_svfiprintf_r+0x28>
 80043f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043fa:	b01d      	add	sp, #116	; 0x74
 80043fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004400:	ab03      	add	r3, sp, #12
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	462a      	mov	r2, r5
 8004406:	4638      	mov	r0, r7
 8004408:	4b06      	ldr	r3, [pc, #24]	; (8004424 <_svfiprintf_r+0x1fc>)
 800440a:	a904      	add	r1, sp, #16
 800440c:	f000 f87c 	bl	8004508 <_printf_i>
 8004410:	e7eb      	b.n	80043ea <_svfiprintf_r+0x1c2>
 8004412:	bf00      	nop
 8004414:	08004a74 	.word	0x08004a74
 8004418:	08004a7a 	.word	0x08004a7a
 800441c:	08004a7e 	.word	0x08004a7e
 8004420:	00000000 	.word	0x00000000
 8004424:	08004171 	.word	0x08004171

08004428 <_printf_common>:
 8004428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800442c:	4616      	mov	r6, r2
 800442e:	4699      	mov	r9, r3
 8004430:	688a      	ldr	r2, [r1, #8]
 8004432:	690b      	ldr	r3, [r1, #16]
 8004434:	4607      	mov	r7, r0
 8004436:	4293      	cmp	r3, r2
 8004438:	bfb8      	it	lt
 800443a:	4613      	movlt	r3, r2
 800443c:	6033      	str	r3, [r6, #0]
 800443e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004442:	460c      	mov	r4, r1
 8004444:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004448:	b10a      	cbz	r2, 800444e <_printf_common+0x26>
 800444a:	3301      	adds	r3, #1
 800444c:	6033      	str	r3, [r6, #0]
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	0699      	lsls	r1, r3, #26
 8004452:	bf42      	ittt	mi
 8004454:	6833      	ldrmi	r3, [r6, #0]
 8004456:	3302      	addmi	r3, #2
 8004458:	6033      	strmi	r3, [r6, #0]
 800445a:	6825      	ldr	r5, [r4, #0]
 800445c:	f015 0506 	ands.w	r5, r5, #6
 8004460:	d106      	bne.n	8004470 <_printf_common+0x48>
 8004462:	f104 0a19 	add.w	sl, r4, #25
 8004466:	68e3      	ldr	r3, [r4, #12]
 8004468:	6832      	ldr	r2, [r6, #0]
 800446a:	1a9b      	subs	r3, r3, r2
 800446c:	42ab      	cmp	r3, r5
 800446e:	dc28      	bgt.n	80044c2 <_printf_common+0x9a>
 8004470:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004474:	1e13      	subs	r3, r2, #0
 8004476:	6822      	ldr	r2, [r4, #0]
 8004478:	bf18      	it	ne
 800447a:	2301      	movne	r3, #1
 800447c:	0692      	lsls	r2, r2, #26
 800447e:	d42d      	bmi.n	80044dc <_printf_common+0xb4>
 8004480:	4649      	mov	r1, r9
 8004482:	4638      	mov	r0, r7
 8004484:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004488:	47c0      	blx	r8
 800448a:	3001      	adds	r0, #1
 800448c:	d020      	beq.n	80044d0 <_printf_common+0xa8>
 800448e:	6823      	ldr	r3, [r4, #0]
 8004490:	68e5      	ldr	r5, [r4, #12]
 8004492:	f003 0306 	and.w	r3, r3, #6
 8004496:	2b04      	cmp	r3, #4
 8004498:	bf18      	it	ne
 800449a:	2500      	movne	r5, #0
 800449c:	6832      	ldr	r2, [r6, #0]
 800449e:	f04f 0600 	mov.w	r6, #0
 80044a2:	68a3      	ldr	r3, [r4, #8]
 80044a4:	bf08      	it	eq
 80044a6:	1aad      	subeq	r5, r5, r2
 80044a8:	6922      	ldr	r2, [r4, #16]
 80044aa:	bf08      	it	eq
 80044ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044b0:	4293      	cmp	r3, r2
 80044b2:	bfc4      	itt	gt
 80044b4:	1a9b      	subgt	r3, r3, r2
 80044b6:	18ed      	addgt	r5, r5, r3
 80044b8:	341a      	adds	r4, #26
 80044ba:	42b5      	cmp	r5, r6
 80044bc:	d11a      	bne.n	80044f4 <_printf_common+0xcc>
 80044be:	2000      	movs	r0, #0
 80044c0:	e008      	b.n	80044d4 <_printf_common+0xac>
 80044c2:	2301      	movs	r3, #1
 80044c4:	4652      	mov	r2, sl
 80044c6:	4649      	mov	r1, r9
 80044c8:	4638      	mov	r0, r7
 80044ca:	47c0      	blx	r8
 80044cc:	3001      	adds	r0, #1
 80044ce:	d103      	bne.n	80044d8 <_printf_common+0xb0>
 80044d0:	f04f 30ff 	mov.w	r0, #4294967295
 80044d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044d8:	3501      	adds	r5, #1
 80044da:	e7c4      	b.n	8004466 <_printf_common+0x3e>
 80044dc:	2030      	movs	r0, #48	; 0x30
 80044de:	18e1      	adds	r1, r4, r3
 80044e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044e4:	1c5a      	adds	r2, r3, #1
 80044e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044ea:	4422      	add	r2, r4
 80044ec:	3302      	adds	r3, #2
 80044ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044f2:	e7c5      	b.n	8004480 <_printf_common+0x58>
 80044f4:	2301      	movs	r3, #1
 80044f6:	4622      	mov	r2, r4
 80044f8:	4649      	mov	r1, r9
 80044fa:	4638      	mov	r0, r7
 80044fc:	47c0      	blx	r8
 80044fe:	3001      	adds	r0, #1
 8004500:	d0e6      	beq.n	80044d0 <_printf_common+0xa8>
 8004502:	3601      	adds	r6, #1
 8004504:	e7d9      	b.n	80044ba <_printf_common+0x92>
	...

08004508 <_printf_i>:
 8004508:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800450c:	7e0f      	ldrb	r7, [r1, #24]
 800450e:	4691      	mov	r9, r2
 8004510:	2f78      	cmp	r7, #120	; 0x78
 8004512:	4680      	mov	r8, r0
 8004514:	460c      	mov	r4, r1
 8004516:	469a      	mov	sl, r3
 8004518:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800451a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800451e:	d807      	bhi.n	8004530 <_printf_i+0x28>
 8004520:	2f62      	cmp	r7, #98	; 0x62
 8004522:	d80a      	bhi.n	800453a <_printf_i+0x32>
 8004524:	2f00      	cmp	r7, #0
 8004526:	f000 80d9 	beq.w	80046dc <_printf_i+0x1d4>
 800452a:	2f58      	cmp	r7, #88	; 0x58
 800452c:	f000 80a4 	beq.w	8004678 <_printf_i+0x170>
 8004530:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004534:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004538:	e03a      	b.n	80045b0 <_printf_i+0xa8>
 800453a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800453e:	2b15      	cmp	r3, #21
 8004540:	d8f6      	bhi.n	8004530 <_printf_i+0x28>
 8004542:	a101      	add	r1, pc, #4	; (adr r1, 8004548 <_printf_i+0x40>)
 8004544:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004548:	080045a1 	.word	0x080045a1
 800454c:	080045b5 	.word	0x080045b5
 8004550:	08004531 	.word	0x08004531
 8004554:	08004531 	.word	0x08004531
 8004558:	08004531 	.word	0x08004531
 800455c:	08004531 	.word	0x08004531
 8004560:	080045b5 	.word	0x080045b5
 8004564:	08004531 	.word	0x08004531
 8004568:	08004531 	.word	0x08004531
 800456c:	08004531 	.word	0x08004531
 8004570:	08004531 	.word	0x08004531
 8004574:	080046c3 	.word	0x080046c3
 8004578:	080045e5 	.word	0x080045e5
 800457c:	080046a5 	.word	0x080046a5
 8004580:	08004531 	.word	0x08004531
 8004584:	08004531 	.word	0x08004531
 8004588:	080046e5 	.word	0x080046e5
 800458c:	08004531 	.word	0x08004531
 8004590:	080045e5 	.word	0x080045e5
 8004594:	08004531 	.word	0x08004531
 8004598:	08004531 	.word	0x08004531
 800459c:	080046ad 	.word	0x080046ad
 80045a0:	682b      	ldr	r3, [r5, #0]
 80045a2:	1d1a      	adds	r2, r3, #4
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	602a      	str	r2, [r5, #0]
 80045a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045b0:	2301      	movs	r3, #1
 80045b2:	e0a4      	b.n	80046fe <_printf_i+0x1f6>
 80045b4:	6820      	ldr	r0, [r4, #0]
 80045b6:	6829      	ldr	r1, [r5, #0]
 80045b8:	0606      	lsls	r6, r0, #24
 80045ba:	f101 0304 	add.w	r3, r1, #4
 80045be:	d50a      	bpl.n	80045d6 <_printf_i+0xce>
 80045c0:	680e      	ldr	r6, [r1, #0]
 80045c2:	602b      	str	r3, [r5, #0]
 80045c4:	2e00      	cmp	r6, #0
 80045c6:	da03      	bge.n	80045d0 <_printf_i+0xc8>
 80045c8:	232d      	movs	r3, #45	; 0x2d
 80045ca:	4276      	negs	r6, r6
 80045cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045d0:	230a      	movs	r3, #10
 80045d2:	485e      	ldr	r0, [pc, #376]	; (800474c <_printf_i+0x244>)
 80045d4:	e019      	b.n	800460a <_printf_i+0x102>
 80045d6:	680e      	ldr	r6, [r1, #0]
 80045d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80045dc:	602b      	str	r3, [r5, #0]
 80045de:	bf18      	it	ne
 80045e0:	b236      	sxthne	r6, r6
 80045e2:	e7ef      	b.n	80045c4 <_printf_i+0xbc>
 80045e4:	682b      	ldr	r3, [r5, #0]
 80045e6:	6820      	ldr	r0, [r4, #0]
 80045e8:	1d19      	adds	r1, r3, #4
 80045ea:	6029      	str	r1, [r5, #0]
 80045ec:	0601      	lsls	r1, r0, #24
 80045ee:	d501      	bpl.n	80045f4 <_printf_i+0xec>
 80045f0:	681e      	ldr	r6, [r3, #0]
 80045f2:	e002      	b.n	80045fa <_printf_i+0xf2>
 80045f4:	0646      	lsls	r6, r0, #25
 80045f6:	d5fb      	bpl.n	80045f0 <_printf_i+0xe8>
 80045f8:	881e      	ldrh	r6, [r3, #0]
 80045fa:	2f6f      	cmp	r7, #111	; 0x6f
 80045fc:	bf0c      	ite	eq
 80045fe:	2308      	moveq	r3, #8
 8004600:	230a      	movne	r3, #10
 8004602:	4852      	ldr	r0, [pc, #328]	; (800474c <_printf_i+0x244>)
 8004604:	2100      	movs	r1, #0
 8004606:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800460a:	6865      	ldr	r5, [r4, #4]
 800460c:	2d00      	cmp	r5, #0
 800460e:	bfa8      	it	ge
 8004610:	6821      	ldrge	r1, [r4, #0]
 8004612:	60a5      	str	r5, [r4, #8]
 8004614:	bfa4      	itt	ge
 8004616:	f021 0104 	bicge.w	r1, r1, #4
 800461a:	6021      	strge	r1, [r4, #0]
 800461c:	b90e      	cbnz	r6, 8004622 <_printf_i+0x11a>
 800461e:	2d00      	cmp	r5, #0
 8004620:	d04d      	beq.n	80046be <_printf_i+0x1b6>
 8004622:	4615      	mov	r5, r2
 8004624:	fbb6 f1f3 	udiv	r1, r6, r3
 8004628:	fb03 6711 	mls	r7, r3, r1, r6
 800462c:	5dc7      	ldrb	r7, [r0, r7]
 800462e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004632:	4637      	mov	r7, r6
 8004634:	42bb      	cmp	r3, r7
 8004636:	460e      	mov	r6, r1
 8004638:	d9f4      	bls.n	8004624 <_printf_i+0x11c>
 800463a:	2b08      	cmp	r3, #8
 800463c:	d10b      	bne.n	8004656 <_printf_i+0x14e>
 800463e:	6823      	ldr	r3, [r4, #0]
 8004640:	07de      	lsls	r6, r3, #31
 8004642:	d508      	bpl.n	8004656 <_printf_i+0x14e>
 8004644:	6923      	ldr	r3, [r4, #16]
 8004646:	6861      	ldr	r1, [r4, #4]
 8004648:	4299      	cmp	r1, r3
 800464a:	bfde      	ittt	le
 800464c:	2330      	movle	r3, #48	; 0x30
 800464e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004652:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004656:	1b52      	subs	r2, r2, r5
 8004658:	6122      	str	r2, [r4, #16]
 800465a:	464b      	mov	r3, r9
 800465c:	4621      	mov	r1, r4
 800465e:	4640      	mov	r0, r8
 8004660:	f8cd a000 	str.w	sl, [sp]
 8004664:	aa03      	add	r2, sp, #12
 8004666:	f7ff fedf 	bl	8004428 <_printf_common>
 800466a:	3001      	adds	r0, #1
 800466c:	d14c      	bne.n	8004708 <_printf_i+0x200>
 800466e:	f04f 30ff 	mov.w	r0, #4294967295
 8004672:	b004      	add	sp, #16
 8004674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004678:	4834      	ldr	r0, [pc, #208]	; (800474c <_printf_i+0x244>)
 800467a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800467e:	6829      	ldr	r1, [r5, #0]
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	f851 6b04 	ldr.w	r6, [r1], #4
 8004686:	6029      	str	r1, [r5, #0]
 8004688:	061d      	lsls	r5, r3, #24
 800468a:	d514      	bpl.n	80046b6 <_printf_i+0x1ae>
 800468c:	07df      	lsls	r7, r3, #31
 800468e:	bf44      	itt	mi
 8004690:	f043 0320 	orrmi.w	r3, r3, #32
 8004694:	6023      	strmi	r3, [r4, #0]
 8004696:	b91e      	cbnz	r6, 80046a0 <_printf_i+0x198>
 8004698:	6823      	ldr	r3, [r4, #0]
 800469a:	f023 0320 	bic.w	r3, r3, #32
 800469e:	6023      	str	r3, [r4, #0]
 80046a0:	2310      	movs	r3, #16
 80046a2:	e7af      	b.n	8004604 <_printf_i+0xfc>
 80046a4:	6823      	ldr	r3, [r4, #0]
 80046a6:	f043 0320 	orr.w	r3, r3, #32
 80046aa:	6023      	str	r3, [r4, #0]
 80046ac:	2378      	movs	r3, #120	; 0x78
 80046ae:	4828      	ldr	r0, [pc, #160]	; (8004750 <_printf_i+0x248>)
 80046b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046b4:	e7e3      	b.n	800467e <_printf_i+0x176>
 80046b6:	0659      	lsls	r1, r3, #25
 80046b8:	bf48      	it	mi
 80046ba:	b2b6      	uxthmi	r6, r6
 80046bc:	e7e6      	b.n	800468c <_printf_i+0x184>
 80046be:	4615      	mov	r5, r2
 80046c0:	e7bb      	b.n	800463a <_printf_i+0x132>
 80046c2:	682b      	ldr	r3, [r5, #0]
 80046c4:	6826      	ldr	r6, [r4, #0]
 80046c6:	1d18      	adds	r0, r3, #4
 80046c8:	6961      	ldr	r1, [r4, #20]
 80046ca:	6028      	str	r0, [r5, #0]
 80046cc:	0635      	lsls	r5, r6, #24
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	d501      	bpl.n	80046d6 <_printf_i+0x1ce>
 80046d2:	6019      	str	r1, [r3, #0]
 80046d4:	e002      	b.n	80046dc <_printf_i+0x1d4>
 80046d6:	0670      	lsls	r0, r6, #25
 80046d8:	d5fb      	bpl.n	80046d2 <_printf_i+0x1ca>
 80046da:	8019      	strh	r1, [r3, #0]
 80046dc:	2300      	movs	r3, #0
 80046de:	4615      	mov	r5, r2
 80046e0:	6123      	str	r3, [r4, #16]
 80046e2:	e7ba      	b.n	800465a <_printf_i+0x152>
 80046e4:	682b      	ldr	r3, [r5, #0]
 80046e6:	2100      	movs	r1, #0
 80046e8:	1d1a      	adds	r2, r3, #4
 80046ea:	602a      	str	r2, [r5, #0]
 80046ec:	681d      	ldr	r5, [r3, #0]
 80046ee:	6862      	ldr	r2, [r4, #4]
 80046f0:	4628      	mov	r0, r5
 80046f2:	f000 f82f 	bl	8004754 <memchr>
 80046f6:	b108      	cbz	r0, 80046fc <_printf_i+0x1f4>
 80046f8:	1b40      	subs	r0, r0, r5
 80046fa:	6060      	str	r0, [r4, #4]
 80046fc:	6863      	ldr	r3, [r4, #4]
 80046fe:	6123      	str	r3, [r4, #16]
 8004700:	2300      	movs	r3, #0
 8004702:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004706:	e7a8      	b.n	800465a <_printf_i+0x152>
 8004708:	462a      	mov	r2, r5
 800470a:	4649      	mov	r1, r9
 800470c:	4640      	mov	r0, r8
 800470e:	6923      	ldr	r3, [r4, #16]
 8004710:	47d0      	blx	sl
 8004712:	3001      	adds	r0, #1
 8004714:	d0ab      	beq.n	800466e <_printf_i+0x166>
 8004716:	6823      	ldr	r3, [r4, #0]
 8004718:	079b      	lsls	r3, r3, #30
 800471a:	d413      	bmi.n	8004744 <_printf_i+0x23c>
 800471c:	68e0      	ldr	r0, [r4, #12]
 800471e:	9b03      	ldr	r3, [sp, #12]
 8004720:	4298      	cmp	r0, r3
 8004722:	bfb8      	it	lt
 8004724:	4618      	movlt	r0, r3
 8004726:	e7a4      	b.n	8004672 <_printf_i+0x16a>
 8004728:	2301      	movs	r3, #1
 800472a:	4632      	mov	r2, r6
 800472c:	4649      	mov	r1, r9
 800472e:	4640      	mov	r0, r8
 8004730:	47d0      	blx	sl
 8004732:	3001      	adds	r0, #1
 8004734:	d09b      	beq.n	800466e <_printf_i+0x166>
 8004736:	3501      	adds	r5, #1
 8004738:	68e3      	ldr	r3, [r4, #12]
 800473a:	9903      	ldr	r1, [sp, #12]
 800473c:	1a5b      	subs	r3, r3, r1
 800473e:	42ab      	cmp	r3, r5
 8004740:	dcf2      	bgt.n	8004728 <_printf_i+0x220>
 8004742:	e7eb      	b.n	800471c <_printf_i+0x214>
 8004744:	2500      	movs	r5, #0
 8004746:	f104 0619 	add.w	r6, r4, #25
 800474a:	e7f5      	b.n	8004738 <_printf_i+0x230>
 800474c:	08004a85 	.word	0x08004a85
 8004750:	08004a96 	.word	0x08004a96

08004754 <memchr>:
 8004754:	4603      	mov	r3, r0
 8004756:	b510      	push	{r4, lr}
 8004758:	b2c9      	uxtb	r1, r1
 800475a:	4402      	add	r2, r0
 800475c:	4293      	cmp	r3, r2
 800475e:	4618      	mov	r0, r3
 8004760:	d101      	bne.n	8004766 <memchr+0x12>
 8004762:	2000      	movs	r0, #0
 8004764:	e003      	b.n	800476e <memchr+0x1a>
 8004766:	7804      	ldrb	r4, [r0, #0]
 8004768:	3301      	adds	r3, #1
 800476a:	428c      	cmp	r4, r1
 800476c:	d1f6      	bne.n	800475c <memchr+0x8>
 800476e:	bd10      	pop	{r4, pc}

08004770 <memcpy>:
 8004770:	440a      	add	r2, r1
 8004772:	4291      	cmp	r1, r2
 8004774:	f100 33ff 	add.w	r3, r0, #4294967295
 8004778:	d100      	bne.n	800477c <memcpy+0xc>
 800477a:	4770      	bx	lr
 800477c:	b510      	push	{r4, lr}
 800477e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004782:	4291      	cmp	r1, r2
 8004784:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004788:	d1f9      	bne.n	800477e <memcpy+0xe>
 800478a:	bd10      	pop	{r4, pc}

0800478c <memmove>:
 800478c:	4288      	cmp	r0, r1
 800478e:	b510      	push	{r4, lr}
 8004790:	eb01 0402 	add.w	r4, r1, r2
 8004794:	d902      	bls.n	800479c <memmove+0x10>
 8004796:	4284      	cmp	r4, r0
 8004798:	4623      	mov	r3, r4
 800479a:	d807      	bhi.n	80047ac <memmove+0x20>
 800479c:	1e43      	subs	r3, r0, #1
 800479e:	42a1      	cmp	r1, r4
 80047a0:	d008      	beq.n	80047b4 <memmove+0x28>
 80047a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80047aa:	e7f8      	b.n	800479e <memmove+0x12>
 80047ac:	4601      	mov	r1, r0
 80047ae:	4402      	add	r2, r0
 80047b0:	428a      	cmp	r2, r1
 80047b2:	d100      	bne.n	80047b6 <memmove+0x2a>
 80047b4:	bd10      	pop	{r4, pc}
 80047b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80047be:	e7f7      	b.n	80047b0 <memmove+0x24>

080047c0 <_free_r>:
 80047c0:	b538      	push	{r3, r4, r5, lr}
 80047c2:	4605      	mov	r5, r0
 80047c4:	2900      	cmp	r1, #0
 80047c6:	d040      	beq.n	800484a <_free_r+0x8a>
 80047c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047cc:	1f0c      	subs	r4, r1, #4
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	bfb8      	it	lt
 80047d2:	18e4      	addlt	r4, r4, r3
 80047d4:	f000 f910 	bl	80049f8 <__malloc_lock>
 80047d8:	4a1c      	ldr	r2, [pc, #112]	; (800484c <_free_r+0x8c>)
 80047da:	6813      	ldr	r3, [r2, #0]
 80047dc:	b933      	cbnz	r3, 80047ec <_free_r+0x2c>
 80047de:	6063      	str	r3, [r4, #4]
 80047e0:	6014      	str	r4, [r2, #0]
 80047e2:	4628      	mov	r0, r5
 80047e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047e8:	f000 b90c 	b.w	8004a04 <__malloc_unlock>
 80047ec:	42a3      	cmp	r3, r4
 80047ee:	d908      	bls.n	8004802 <_free_r+0x42>
 80047f0:	6820      	ldr	r0, [r4, #0]
 80047f2:	1821      	adds	r1, r4, r0
 80047f4:	428b      	cmp	r3, r1
 80047f6:	bf01      	itttt	eq
 80047f8:	6819      	ldreq	r1, [r3, #0]
 80047fa:	685b      	ldreq	r3, [r3, #4]
 80047fc:	1809      	addeq	r1, r1, r0
 80047fe:	6021      	streq	r1, [r4, #0]
 8004800:	e7ed      	b.n	80047de <_free_r+0x1e>
 8004802:	461a      	mov	r2, r3
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	b10b      	cbz	r3, 800480c <_free_r+0x4c>
 8004808:	42a3      	cmp	r3, r4
 800480a:	d9fa      	bls.n	8004802 <_free_r+0x42>
 800480c:	6811      	ldr	r1, [r2, #0]
 800480e:	1850      	adds	r0, r2, r1
 8004810:	42a0      	cmp	r0, r4
 8004812:	d10b      	bne.n	800482c <_free_r+0x6c>
 8004814:	6820      	ldr	r0, [r4, #0]
 8004816:	4401      	add	r1, r0
 8004818:	1850      	adds	r0, r2, r1
 800481a:	4283      	cmp	r3, r0
 800481c:	6011      	str	r1, [r2, #0]
 800481e:	d1e0      	bne.n	80047e2 <_free_r+0x22>
 8004820:	6818      	ldr	r0, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	4401      	add	r1, r0
 8004826:	6011      	str	r1, [r2, #0]
 8004828:	6053      	str	r3, [r2, #4]
 800482a:	e7da      	b.n	80047e2 <_free_r+0x22>
 800482c:	d902      	bls.n	8004834 <_free_r+0x74>
 800482e:	230c      	movs	r3, #12
 8004830:	602b      	str	r3, [r5, #0]
 8004832:	e7d6      	b.n	80047e2 <_free_r+0x22>
 8004834:	6820      	ldr	r0, [r4, #0]
 8004836:	1821      	adds	r1, r4, r0
 8004838:	428b      	cmp	r3, r1
 800483a:	bf01      	itttt	eq
 800483c:	6819      	ldreq	r1, [r3, #0]
 800483e:	685b      	ldreq	r3, [r3, #4]
 8004840:	1809      	addeq	r1, r1, r0
 8004842:	6021      	streq	r1, [r4, #0]
 8004844:	6063      	str	r3, [r4, #4]
 8004846:	6054      	str	r4, [r2, #4]
 8004848:	e7cb      	b.n	80047e2 <_free_r+0x22>
 800484a:	bd38      	pop	{r3, r4, r5, pc}
 800484c:	20000260 	.word	0x20000260

08004850 <sbrk_aligned>:
 8004850:	b570      	push	{r4, r5, r6, lr}
 8004852:	4e0e      	ldr	r6, [pc, #56]	; (800488c <sbrk_aligned+0x3c>)
 8004854:	460c      	mov	r4, r1
 8004856:	6831      	ldr	r1, [r6, #0]
 8004858:	4605      	mov	r5, r0
 800485a:	b911      	cbnz	r1, 8004862 <sbrk_aligned+0x12>
 800485c:	f000 f8bc 	bl	80049d8 <_sbrk_r>
 8004860:	6030      	str	r0, [r6, #0]
 8004862:	4621      	mov	r1, r4
 8004864:	4628      	mov	r0, r5
 8004866:	f000 f8b7 	bl	80049d8 <_sbrk_r>
 800486a:	1c43      	adds	r3, r0, #1
 800486c:	d00a      	beq.n	8004884 <sbrk_aligned+0x34>
 800486e:	1cc4      	adds	r4, r0, #3
 8004870:	f024 0403 	bic.w	r4, r4, #3
 8004874:	42a0      	cmp	r0, r4
 8004876:	d007      	beq.n	8004888 <sbrk_aligned+0x38>
 8004878:	1a21      	subs	r1, r4, r0
 800487a:	4628      	mov	r0, r5
 800487c:	f000 f8ac 	bl	80049d8 <_sbrk_r>
 8004880:	3001      	adds	r0, #1
 8004882:	d101      	bne.n	8004888 <sbrk_aligned+0x38>
 8004884:	f04f 34ff 	mov.w	r4, #4294967295
 8004888:	4620      	mov	r0, r4
 800488a:	bd70      	pop	{r4, r5, r6, pc}
 800488c:	20000264 	.word	0x20000264

08004890 <_malloc_r>:
 8004890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004894:	1ccd      	adds	r5, r1, #3
 8004896:	f025 0503 	bic.w	r5, r5, #3
 800489a:	3508      	adds	r5, #8
 800489c:	2d0c      	cmp	r5, #12
 800489e:	bf38      	it	cc
 80048a0:	250c      	movcc	r5, #12
 80048a2:	2d00      	cmp	r5, #0
 80048a4:	4607      	mov	r7, r0
 80048a6:	db01      	blt.n	80048ac <_malloc_r+0x1c>
 80048a8:	42a9      	cmp	r1, r5
 80048aa:	d905      	bls.n	80048b8 <_malloc_r+0x28>
 80048ac:	230c      	movs	r3, #12
 80048ae:	2600      	movs	r6, #0
 80048b0:	603b      	str	r3, [r7, #0]
 80048b2:	4630      	mov	r0, r6
 80048b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048b8:	4e2e      	ldr	r6, [pc, #184]	; (8004974 <_malloc_r+0xe4>)
 80048ba:	f000 f89d 	bl	80049f8 <__malloc_lock>
 80048be:	6833      	ldr	r3, [r6, #0]
 80048c0:	461c      	mov	r4, r3
 80048c2:	bb34      	cbnz	r4, 8004912 <_malloc_r+0x82>
 80048c4:	4629      	mov	r1, r5
 80048c6:	4638      	mov	r0, r7
 80048c8:	f7ff ffc2 	bl	8004850 <sbrk_aligned>
 80048cc:	1c43      	adds	r3, r0, #1
 80048ce:	4604      	mov	r4, r0
 80048d0:	d14d      	bne.n	800496e <_malloc_r+0xde>
 80048d2:	6834      	ldr	r4, [r6, #0]
 80048d4:	4626      	mov	r6, r4
 80048d6:	2e00      	cmp	r6, #0
 80048d8:	d140      	bne.n	800495c <_malloc_r+0xcc>
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	4631      	mov	r1, r6
 80048de:	4638      	mov	r0, r7
 80048e0:	eb04 0803 	add.w	r8, r4, r3
 80048e4:	f000 f878 	bl	80049d8 <_sbrk_r>
 80048e8:	4580      	cmp	r8, r0
 80048ea:	d13a      	bne.n	8004962 <_malloc_r+0xd2>
 80048ec:	6821      	ldr	r1, [r4, #0]
 80048ee:	3503      	adds	r5, #3
 80048f0:	1a6d      	subs	r5, r5, r1
 80048f2:	f025 0503 	bic.w	r5, r5, #3
 80048f6:	3508      	adds	r5, #8
 80048f8:	2d0c      	cmp	r5, #12
 80048fa:	bf38      	it	cc
 80048fc:	250c      	movcc	r5, #12
 80048fe:	4638      	mov	r0, r7
 8004900:	4629      	mov	r1, r5
 8004902:	f7ff ffa5 	bl	8004850 <sbrk_aligned>
 8004906:	3001      	adds	r0, #1
 8004908:	d02b      	beq.n	8004962 <_malloc_r+0xd2>
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	442b      	add	r3, r5
 800490e:	6023      	str	r3, [r4, #0]
 8004910:	e00e      	b.n	8004930 <_malloc_r+0xa0>
 8004912:	6822      	ldr	r2, [r4, #0]
 8004914:	1b52      	subs	r2, r2, r5
 8004916:	d41e      	bmi.n	8004956 <_malloc_r+0xc6>
 8004918:	2a0b      	cmp	r2, #11
 800491a:	d916      	bls.n	800494a <_malloc_r+0xba>
 800491c:	1961      	adds	r1, r4, r5
 800491e:	42a3      	cmp	r3, r4
 8004920:	6025      	str	r5, [r4, #0]
 8004922:	bf18      	it	ne
 8004924:	6059      	strne	r1, [r3, #4]
 8004926:	6863      	ldr	r3, [r4, #4]
 8004928:	bf08      	it	eq
 800492a:	6031      	streq	r1, [r6, #0]
 800492c:	5162      	str	r2, [r4, r5]
 800492e:	604b      	str	r3, [r1, #4]
 8004930:	4638      	mov	r0, r7
 8004932:	f104 060b 	add.w	r6, r4, #11
 8004936:	f000 f865 	bl	8004a04 <__malloc_unlock>
 800493a:	f026 0607 	bic.w	r6, r6, #7
 800493e:	1d23      	adds	r3, r4, #4
 8004940:	1af2      	subs	r2, r6, r3
 8004942:	d0b6      	beq.n	80048b2 <_malloc_r+0x22>
 8004944:	1b9b      	subs	r3, r3, r6
 8004946:	50a3      	str	r3, [r4, r2]
 8004948:	e7b3      	b.n	80048b2 <_malloc_r+0x22>
 800494a:	6862      	ldr	r2, [r4, #4]
 800494c:	42a3      	cmp	r3, r4
 800494e:	bf0c      	ite	eq
 8004950:	6032      	streq	r2, [r6, #0]
 8004952:	605a      	strne	r2, [r3, #4]
 8004954:	e7ec      	b.n	8004930 <_malloc_r+0xa0>
 8004956:	4623      	mov	r3, r4
 8004958:	6864      	ldr	r4, [r4, #4]
 800495a:	e7b2      	b.n	80048c2 <_malloc_r+0x32>
 800495c:	4634      	mov	r4, r6
 800495e:	6876      	ldr	r6, [r6, #4]
 8004960:	e7b9      	b.n	80048d6 <_malloc_r+0x46>
 8004962:	230c      	movs	r3, #12
 8004964:	4638      	mov	r0, r7
 8004966:	603b      	str	r3, [r7, #0]
 8004968:	f000 f84c 	bl	8004a04 <__malloc_unlock>
 800496c:	e7a1      	b.n	80048b2 <_malloc_r+0x22>
 800496e:	6025      	str	r5, [r4, #0]
 8004970:	e7de      	b.n	8004930 <_malloc_r+0xa0>
 8004972:	bf00      	nop
 8004974:	20000260 	.word	0x20000260

08004978 <_realloc_r>:
 8004978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800497c:	4680      	mov	r8, r0
 800497e:	4614      	mov	r4, r2
 8004980:	460e      	mov	r6, r1
 8004982:	b921      	cbnz	r1, 800498e <_realloc_r+0x16>
 8004984:	4611      	mov	r1, r2
 8004986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800498a:	f7ff bf81 	b.w	8004890 <_malloc_r>
 800498e:	b92a      	cbnz	r2, 800499c <_realloc_r+0x24>
 8004990:	f7ff ff16 	bl	80047c0 <_free_r>
 8004994:	4625      	mov	r5, r4
 8004996:	4628      	mov	r0, r5
 8004998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800499c:	f000 f838 	bl	8004a10 <_malloc_usable_size_r>
 80049a0:	4284      	cmp	r4, r0
 80049a2:	4607      	mov	r7, r0
 80049a4:	d802      	bhi.n	80049ac <_realloc_r+0x34>
 80049a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80049aa:	d812      	bhi.n	80049d2 <_realloc_r+0x5a>
 80049ac:	4621      	mov	r1, r4
 80049ae:	4640      	mov	r0, r8
 80049b0:	f7ff ff6e 	bl	8004890 <_malloc_r>
 80049b4:	4605      	mov	r5, r0
 80049b6:	2800      	cmp	r0, #0
 80049b8:	d0ed      	beq.n	8004996 <_realloc_r+0x1e>
 80049ba:	42bc      	cmp	r4, r7
 80049bc:	4622      	mov	r2, r4
 80049be:	4631      	mov	r1, r6
 80049c0:	bf28      	it	cs
 80049c2:	463a      	movcs	r2, r7
 80049c4:	f7ff fed4 	bl	8004770 <memcpy>
 80049c8:	4631      	mov	r1, r6
 80049ca:	4640      	mov	r0, r8
 80049cc:	f7ff fef8 	bl	80047c0 <_free_r>
 80049d0:	e7e1      	b.n	8004996 <_realloc_r+0x1e>
 80049d2:	4635      	mov	r5, r6
 80049d4:	e7df      	b.n	8004996 <_realloc_r+0x1e>
	...

080049d8 <_sbrk_r>:
 80049d8:	b538      	push	{r3, r4, r5, lr}
 80049da:	2300      	movs	r3, #0
 80049dc:	4d05      	ldr	r5, [pc, #20]	; (80049f4 <_sbrk_r+0x1c>)
 80049de:	4604      	mov	r4, r0
 80049e0:	4608      	mov	r0, r1
 80049e2:	602b      	str	r3, [r5, #0]
 80049e4:	f7fc feec 	bl	80017c0 <_sbrk>
 80049e8:	1c43      	adds	r3, r0, #1
 80049ea:	d102      	bne.n	80049f2 <_sbrk_r+0x1a>
 80049ec:	682b      	ldr	r3, [r5, #0]
 80049ee:	b103      	cbz	r3, 80049f2 <_sbrk_r+0x1a>
 80049f0:	6023      	str	r3, [r4, #0]
 80049f2:	bd38      	pop	{r3, r4, r5, pc}
 80049f4:	20000268 	.word	0x20000268

080049f8 <__malloc_lock>:
 80049f8:	4801      	ldr	r0, [pc, #4]	; (8004a00 <__malloc_lock+0x8>)
 80049fa:	f000 b811 	b.w	8004a20 <__retarget_lock_acquire_recursive>
 80049fe:	bf00      	nop
 8004a00:	2000026c 	.word	0x2000026c

08004a04 <__malloc_unlock>:
 8004a04:	4801      	ldr	r0, [pc, #4]	; (8004a0c <__malloc_unlock+0x8>)
 8004a06:	f000 b80c 	b.w	8004a22 <__retarget_lock_release_recursive>
 8004a0a:	bf00      	nop
 8004a0c:	2000026c 	.word	0x2000026c

08004a10 <_malloc_usable_size_r>:
 8004a10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a14:	1f18      	subs	r0, r3, #4
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	bfbc      	itt	lt
 8004a1a:	580b      	ldrlt	r3, [r1, r0]
 8004a1c:	18c0      	addlt	r0, r0, r3
 8004a1e:	4770      	bx	lr

08004a20 <__retarget_lock_acquire_recursive>:
 8004a20:	4770      	bx	lr

08004a22 <__retarget_lock_release_recursive>:
 8004a22:	4770      	bx	lr

08004a24 <_init>:
 8004a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a26:	bf00      	nop
 8004a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a2a:	bc08      	pop	{r3}
 8004a2c:	469e      	mov	lr, r3
 8004a2e:	4770      	bx	lr

08004a30 <_fini>:
 8004a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a32:	bf00      	nop
 8004a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a36:	bc08      	pop	{r3}
 8004a38:	469e      	mov	lr, r3
 8004a3a:	4770      	bx	lr
