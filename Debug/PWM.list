
PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004940  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004a4c  08004a4c  00014a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ab8  08004ab8  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  08004ab8  08004ab8  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ab8  08004ab8  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ab8  08004ab8  00014ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004abc  08004abc  00014abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08004ac0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  200000a8  08004b68  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08004b68  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bcd2  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f8c  00000000  00000000  0002bda3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  0002dd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  0002eaa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f8d  00000000  00000000  0002f720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d969  00000000  00000000  000476ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ad67  00000000  00000000  00055016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dfd7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a94  00000000  00000000  000dfdd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a8 	.word	0x200000a8
 8000128:	00000000 	.word	0x00000000
 800012c:	08004a34 	.word	0x08004a34

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ac 	.word	0x200000ac
 8000148:	08004a34 	.word	0x08004a34

0800014c <setTimer1>:
int counter4;
int timer4_flag;

int TIMER_CYCLE=10;

void setTimer1(int duration){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	counter1=duration/TIMER_CYCLE;
 8000154:	4b07      	ldr	r3, [pc, #28]	; (8000174 <setTimer1+0x28>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	687a      	ldr	r2, [r7, #4]
 800015a:	fb92 f3f3 	sdiv	r3, r2, r3
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <setTimer1+0x2c>)
 8000160:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 8000162:	4b06      	ldr	r3, [pc, #24]	; (800017c <setTimer1+0x30>)
 8000164:	2200      	movs	r2, #0
 8000166:	601a      	str	r2, [r3, #0]
}
 8000168:	bf00      	nop
 800016a:	370c      	adds	r7, #12
 800016c:	46bd      	mov	sp, r7
 800016e:	bc80      	pop	{r7}
 8000170:	4770      	bx	lr
 8000172:	bf00      	nop
 8000174:	20000000 	.word	0x20000000
 8000178:	200000c4 	.word	0x200000c4
 800017c:	200000c8 	.word	0x200000c8

08000180 <setTimer2>:

void setTimer2(int duration){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	counter2=duration/TIMER_CYCLE;
 8000188:	4b07      	ldr	r3, [pc, #28]	; (80001a8 <setTimer2+0x28>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	687a      	ldr	r2, [r7, #4]
 800018e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000192:	4a06      	ldr	r2, [pc, #24]	; (80001ac <setTimer2+0x2c>)
 8000194:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 8000196:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <setTimer2+0x30>)
 8000198:	2200      	movs	r2, #0
 800019a:	601a      	str	r2, [r3, #0]
}
 800019c:	bf00      	nop
 800019e:	370c      	adds	r7, #12
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr
 80001a6:	bf00      	nop
 80001a8:	20000000 	.word	0x20000000
 80001ac:	200000cc 	.word	0x200000cc
 80001b0:	200000d0 	.word	0x200000d0

080001b4 <setTimer3>:

void setTimer3(int duration){
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
	counter3=duration/TIMER_CYCLE;
 80001bc:	4b07      	ldr	r3, [pc, #28]	; (80001dc <setTimer3+0x28>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	687a      	ldr	r2, [r7, #4]
 80001c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80001c6:	4a06      	ldr	r2, [pc, #24]	; (80001e0 <setTimer3+0x2c>)
 80001c8:	6013      	str	r3, [r2, #0]
	timer3_flag=0;
 80001ca:	4b06      	ldr	r3, [pc, #24]	; (80001e4 <setTimer3+0x30>)
 80001cc:	2200      	movs	r2, #0
 80001ce:	601a      	str	r2, [r3, #0]
}
 80001d0:	bf00      	nop
 80001d2:	370c      	adds	r7, #12
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	20000000 	.word	0x20000000
 80001e0:	200000d4 	.word	0x200000d4
 80001e4:	200000d8 	.word	0x200000d8

080001e8 <setTimer4>:

void setTimer4(int duration){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	counter4=duration/TIMER_CYCLE;
 80001f0:	4b07      	ldr	r3, [pc, #28]	; (8000210 <setTimer4+0x28>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	687a      	ldr	r2, [r7, #4]
 80001f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80001fa:	4a06      	ldr	r2, [pc, #24]	; (8000214 <setTimer4+0x2c>)
 80001fc:	6013      	str	r3, [r2, #0]
	timer4_flag=0;
 80001fe:	4b06      	ldr	r3, [pc, #24]	; (8000218 <setTimer4+0x30>)
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	20000000 	.word	0x20000000
 8000214:	200000dc 	.word	0x200000dc
 8000218:	200000e0 	.word	0x200000e0

0800021c <TimerRun>:

void TimerRun(){
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	if(counter1>0){
 8000220:	4b21      	ldr	r3, [pc, #132]	; (80002a8 <TimerRun+0x8c>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	2b00      	cmp	r3, #0
 8000226:	dd0b      	ble.n	8000240 <TimerRun+0x24>
		counter1--;
 8000228:	4b1f      	ldr	r3, [pc, #124]	; (80002a8 <TimerRun+0x8c>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	3b01      	subs	r3, #1
 800022e:	4a1e      	ldr	r2, [pc, #120]	; (80002a8 <TimerRun+0x8c>)
 8000230:	6013      	str	r3, [r2, #0]
		if(counter1<=0){
 8000232:	4b1d      	ldr	r3, [pc, #116]	; (80002a8 <TimerRun+0x8c>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	2b00      	cmp	r3, #0
 8000238:	dc02      	bgt.n	8000240 <TimerRun+0x24>
			timer1_flag=1;
 800023a:	4b1c      	ldr	r3, [pc, #112]	; (80002ac <TimerRun+0x90>)
 800023c:	2201      	movs	r2, #1
 800023e:	601a      	str	r2, [r3, #0]
		}
	}

	if(counter2>0){
 8000240:	4b1b      	ldr	r3, [pc, #108]	; (80002b0 <TimerRun+0x94>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	2b00      	cmp	r3, #0
 8000246:	dd0b      	ble.n	8000260 <TimerRun+0x44>
		counter2--;
 8000248:	4b19      	ldr	r3, [pc, #100]	; (80002b0 <TimerRun+0x94>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	3b01      	subs	r3, #1
 800024e:	4a18      	ldr	r2, [pc, #96]	; (80002b0 <TimerRun+0x94>)
 8000250:	6013      	str	r3, [r2, #0]
		if(counter2<=0){
 8000252:	4b17      	ldr	r3, [pc, #92]	; (80002b0 <TimerRun+0x94>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	dc02      	bgt.n	8000260 <TimerRun+0x44>
			timer2_flag=1;
 800025a:	4b16      	ldr	r3, [pc, #88]	; (80002b4 <TimerRun+0x98>)
 800025c:	2201      	movs	r2, #1
 800025e:	601a      	str	r2, [r3, #0]
		}
	}

	if(counter3>0){
 8000260:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <TimerRun+0x9c>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	2b00      	cmp	r3, #0
 8000266:	dd0b      	ble.n	8000280 <TimerRun+0x64>
		counter3--;
 8000268:	4b13      	ldr	r3, [pc, #76]	; (80002b8 <TimerRun+0x9c>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	3b01      	subs	r3, #1
 800026e:	4a12      	ldr	r2, [pc, #72]	; (80002b8 <TimerRun+0x9c>)
 8000270:	6013      	str	r3, [r2, #0]
		if(counter3<=0){
 8000272:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <TimerRun+0x9c>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	2b00      	cmp	r3, #0
 8000278:	dc02      	bgt.n	8000280 <TimerRun+0x64>
			timer3_flag=1;
 800027a:	4b10      	ldr	r3, [pc, #64]	; (80002bc <TimerRun+0xa0>)
 800027c:	2201      	movs	r2, #1
 800027e:	601a      	str	r2, [r3, #0]
		}
	}

	if(counter4>0){
 8000280:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <TimerRun+0xa4>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	dd0b      	ble.n	80002a0 <TimerRun+0x84>
		counter4--;
 8000288:	4b0d      	ldr	r3, [pc, #52]	; (80002c0 <TimerRun+0xa4>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	3b01      	subs	r3, #1
 800028e:	4a0c      	ldr	r2, [pc, #48]	; (80002c0 <TimerRun+0xa4>)
 8000290:	6013      	str	r3, [r2, #0]
		if(counter4<=0){
 8000292:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <TimerRun+0xa4>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	2b00      	cmp	r3, #0
 8000298:	dc02      	bgt.n	80002a0 <TimerRun+0x84>
			timer4_flag=1;
 800029a:	4b0a      	ldr	r3, [pc, #40]	; (80002c4 <TimerRun+0xa8>)
 800029c:	2201      	movs	r2, #1
 800029e:	601a      	str	r2, [r3, #0]
		}
	}
}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	200000c4 	.word	0x200000c4
 80002ac:	200000c8 	.word	0x200000c8
 80002b0:	200000cc 	.word	0x200000cc
 80002b4:	200000d0 	.word	0x200000d0
 80002b8:	200000d4 	.word	0x200000d4
 80002bc:	200000d8 	.word	0x200000d8
 80002c0:	200000dc 	.word	0x200000dc
 80002c4:	200000e0 	.word	0x200000e0

080002c8 <button1_reading>:
/* 	BUTTON1 PARAMETER START */
int debounceButton1Buffer2=NORMAL_STATE;
int debounceButton1Buffer1=NORMAL_STATE;
int button1Buffer=NORMAL_STATE;
/* 	BUTTON1 PARAMETER END */
void button1_reading(){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	debounceButton1Buffer2 =debounceButton1Buffer1;
 80002cc:	4b0b      	ldr	r3, [pc, #44]	; (80002fc <button1_reading+0x34>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a0b      	ldr	r2, [pc, #44]	; (8000300 <button1_reading+0x38>)
 80002d2:	6013      	str	r3, [r2, #0]
	debounceButton1Buffer1 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80002d4:	2102      	movs	r1, #2
 80002d6:	480b      	ldr	r0, [pc, #44]	; (8000304 <button1_reading+0x3c>)
 80002d8:	f001 fe80 	bl	8001fdc <HAL_GPIO_ReadPin>
 80002dc:	4603      	mov	r3, r0
 80002de:	461a      	mov	r2, r3
 80002e0:	4b06      	ldr	r3, [pc, #24]	; (80002fc <button1_reading+0x34>)
 80002e2:	601a      	str	r2, [r3, #0]
	if(debounceButton1Buffer1 == debounceButton1Buffer2)
 80002e4:	4b05      	ldr	r3, [pc, #20]	; (80002fc <button1_reading+0x34>)
 80002e6:	681a      	ldr	r2, [r3, #0]
 80002e8:	4b05      	ldr	r3, [pc, #20]	; (8000300 <button1_reading+0x38>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	d103      	bne.n	80002f8 <button1_reading+0x30>
		button1Buffer = debounceButton1Buffer1;
 80002f0:	4b02      	ldr	r3, [pc, #8]	; (80002fc <button1_reading+0x34>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a04      	ldr	r2, [pc, #16]	; (8000308 <button1_reading+0x40>)
 80002f6:	6013      	str	r3, [r2, #0]
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	20000008 	.word	0x20000008
 8000300:	20000004 	.word	0x20000004
 8000304:	40010800 	.word	0x40010800
 8000308:	2000000c 	.word	0x2000000c

0800030c <button2_reading>:
int debounceButton2Buffer1=NORMAL_STATE;
int button2Buffer=NORMAL_STATE;
int counterForButton2Press1s=1000;
int flagForButton2Press1s=0;
/* 	BUTTON2 PARAMETER END */
void button2_reading(){
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	debounceButton2Buffer2 =debounceButton2Buffer1;
 8000310:	4b1a      	ldr	r3, [pc, #104]	; (800037c <button2_reading+0x70>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a1a      	ldr	r2, [pc, #104]	; (8000380 <button2_reading+0x74>)
 8000316:	6013      	str	r3, [r2, #0]
	debounceButton2Buffer1 = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8000318:	2110      	movs	r1, #16
 800031a:	481a      	ldr	r0, [pc, #104]	; (8000384 <button2_reading+0x78>)
 800031c:	f001 fe5e 	bl	8001fdc <HAL_GPIO_ReadPin>
 8000320:	4603      	mov	r3, r0
 8000322:	461a      	mov	r2, r3
 8000324:	4b15      	ldr	r3, [pc, #84]	; (800037c <button2_reading+0x70>)
 8000326:	601a      	str	r2, [r3, #0]
	if(debounceButton2Buffer1 == debounceButton2Buffer2)
 8000328:	4b14      	ldr	r3, [pc, #80]	; (800037c <button2_reading+0x70>)
 800032a:	681a      	ldr	r2, [r3, #0]
 800032c:	4b14      	ldr	r3, [pc, #80]	; (8000380 <button2_reading+0x74>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	429a      	cmp	r2, r3
 8000332:	d103      	bne.n	800033c <button2_reading+0x30>
		button2Buffer = debounceButton2Buffer1;
 8000334:	4b11      	ldr	r3, [pc, #68]	; (800037c <button2_reading+0x70>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a13      	ldr	r2, [pc, #76]	; (8000388 <button2_reading+0x7c>)
 800033a:	6013      	str	r3, [r2, #0]

	if(button2Buffer == PRESSED_STATE){
 800033c:	4b12      	ldr	r3, [pc, #72]	; (8000388 <button2_reading+0x7c>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d10d      	bne.n	8000360 <button2_reading+0x54>
	//if a button is pressed, we start counting
		if(counterForButton2Press1s >0){
 8000344:	4b11      	ldr	r3, [pc, #68]	; (800038c <button2_reading+0x80>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2b00      	cmp	r3, #0
 800034a:	dd05      	ble.n	8000358 <button2_reading+0x4c>
			counterForButton2Press1s=counterForButton2Press1s-TIMER_CYCLE;
 800034c:	4b0f      	ldr	r3, [pc, #60]	; (800038c <button2_reading+0x80>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	3b0a      	subs	r3, #10
 8000352:	4a0e      	ldr	r2, [pc, #56]	; (800038c <button2_reading+0x80>)
 8000354:	6013      	str	r3, [r2, #0]
		}
	}else if(button2Buffer == NORMAL_STATE){
		counterForButton2Press1s = 1000;
		flagForButton2Press1s = 0;
	}
}
 8000356:	e00e      	b.n	8000376 <button2_reading+0x6a>
			flagForButton2Press1s = 1;
 8000358:	4b0d      	ldr	r3, [pc, #52]	; (8000390 <button2_reading+0x84>)
 800035a:	2201      	movs	r2, #1
 800035c:	601a      	str	r2, [r3, #0]
}
 800035e:	e00a      	b.n	8000376 <button2_reading+0x6a>
	}else if(button2Buffer == NORMAL_STATE){
 8000360:	4b09      	ldr	r3, [pc, #36]	; (8000388 <button2_reading+0x7c>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	2b01      	cmp	r3, #1
 8000366:	d106      	bne.n	8000376 <button2_reading+0x6a>
		counterForButton2Press1s = 1000;
 8000368:	4b08      	ldr	r3, [pc, #32]	; (800038c <button2_reading+0x80>)
 800036a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800036e:	601a      	str	r2, [r3, #0]
		flagForButton2Press1s = 0;
 8000370:	4b07      	ldr	r3, [pc, #28]	; (8000390 <button2_reading+0x84>)
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	20000014 	.word	0x20000014
 8000380:	20000010 	.word	0x20000010
 8000384:	40010800 	.word	0x40010800
 8000388:	20000018 	.word	0x20000018
 800038c:	2000001c 	.word	0x2000001c
 8000390:	200000e4 	.word	0x200000e4

08000394 <button3_reading>:
/* 	BUTTON3 PARAMETER START */
int debounceButton3Buffer2=NORMAL_STATE;
int debounceButton3Buffer1=NORMAL_STATE;
int button3Buffer=NORMAL_STATE;
/* 	BUTTON3 PARAMETER END */
void button3_reading(){
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
	debounceButton3Buffer2 =debounceButton3Buffer1;
 8000398:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <button3_reading+0x34>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a0b      	ldr	r2, [pc, #44]	; (80003cc <button3_reading+0x38>)
 800039e:	6013      	str	r3, [r2, #0]
	debounceButton3Buffer1 = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 80003a0:	2101      	movs	r1, #1
 80003a2:	480b      	ldr	r0, [pc, #44]	; (80003d0 <button3_reading+0x3c>)
 80003a4:	f001 fe1a 	bl	8001fdc <HAL_GPIO_ReadPin>
 80003a8:	4603      	mov	r3, r0
 80003aa:	461a      	mov	r2, r3
 80003ac:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <button3_reading+0x34>)
 80003ae:	601a      	str	r2, [r3, #0]
	if(debounceButton3Buffer1 == debounceButton3Buffer2)
 80003b0:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <button3_reading+0x34>)
 80003b2:	681a      	ldr	r2, [r3, #0]
 80003b4:	4b05      	ldr	r3, [pc, #20]	; (80003cc <button3_reading+0x38>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d103      	bne.n	80003c4 <button3_reading+0x30>
		button3Buffer = debounceButton3Buffer1;
 80003bc:	4b02      	ldr	r3, [pc, #8]	; (80003c8 <button3_reading+0x34>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a04      	ldr	r2, [pc, #16]	; (80003d4 <button3_reading+0x40>)
 80003c2:	6013      	str	r3, [r2, #0]
}
 80003c4:	bf00      	nop
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	20000024 	.word	0x20000024
 80003cc:	20000020 	.word	0x20000020
 80003d0:	40010c00 	.word	0x40010c00
 80003d4:	20000028 	.word	0x20000028

080003d8 <button4_reading>:
/* 	BUTTON4 PARAMETER START */
int debounceButton4Buffer2=NORMAL_STATE;
int debounceButton4Buffer1=NORMAL_STATE;
int button4Buffer=NORMAL_STATE;
/* 	BUTTON4 PARAMETER END */
void button4_reading(){
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	debounceButton4Buffer2 =debounceButton4Buffer1;
 80003dc:	4b0b      	ldr	r3, [pc, #44]	; (800040c <button4_reading+0x34>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a0b      	ldr	r2, [pc, #44]	; (8000410 <button4_reading+0x38>)
 80003e2:	6013      	str	r3, [r2, #0]
	debounceButton4Buffer1 = HAL_GPIO_ReadPin(Button4_GPIO_Port, Button4_Pin);
 80003e4:	2101      	movs	r1, #1
 80003e6:	480b      	ldr	r0, [pc, #44]	; (8000414 <button4_reading+0x3c>)
 80003e8:	f001 fdf8 	bl	8001fdc <HAL_GPIO_ReadPin>
 80003ec:	4603      	mov	r3, r0
 80003ee:	461a      	mov	r2, r3
 80003f0:	4b06      	ldr	r3, [pc, #24]	; (800040c <button4_reading+0x34>)
 80003f2:	601a      	str	r2, [r3, #0]
	if(debounceButton4Buffer1 == debounceButton4Buffer2)
 80003f4:	4b05      	ldr	r3, [pc, #20]	; (800040c <button4_reading+0x34>)
 80003f6:	681a      	ldr	r2, [r3, #0]
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <button4_reading+0x38>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	429a      	cmp	r2, r3
 80003fe:	d103      	bne.n	8000408 <button4_reading+0x30>
		button4Buffer = debounceButton4Buffer1;
 8000400:	4b02      	ldr	r3, [pc, #8]	; (800040c <button4_reading+0x34>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a04      	ldr	r2, [pc, #16]	; (8000418 <button4_reading+0x40>)
 8000406:	6013      	str	r3, [r2, #0]
}
 8000408:	bf00      	nop
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20000030 	.word	0x20000030
 8000410:	2000002c 	.word	0x2000002c
 8000414:	40010800 	.word	0x40010800
 8000418:	20000034 	.word	0x20000034

0800041c <button1_pressed>:

int button1_pressed(){
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
	return (button1Buffer == PRESSED_STATE);
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <button1_pressed+0x1c>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	2b00      	cmp	r3, #0
 8000426:	bf0c      	ite	eq
 8000428:	2301      	moveq	r3, #1
 800042a:	2300      	movne	r3, #0
 800042c:	b2db      	uxtb	r3, r3
}
 800042e:	4618      	mov	r0, r3
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	2000000c 	.word	0x2000000c

0800043c <button2_pressed>:

int button2_pressed(){
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
	return (button2Buffer == PRESSED_STATE);
 8000440:	4b05      	ldr	r3, [pc, #20]	; (8000458 <button2_pressed+0x1c>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	bf0c      	ite	eq
 8000448:	2301      	moveq	r3, #1
 800044a:	2300      	movne	r3, #0
 800044c:	b2db      	uxtb	r3, r3
}
 800044e:	4618      	mov	r0, r3
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	20000018 	.word	0x20000018

0800045c <button2_pressed_1s>:
int button2_pressed_1s(){
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
	return (flagForButton2Press1s == 1);
 8000460:	4b05      	ldr	r3, [pc, #20]	; (8000478 <button2_pressed_1s+0x1c>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	bf0c      	ite	eq
 8000468:	2301      	moveq	r3, #1
 800046a:	2300      	movne	r3, #0
 800046c:	b2db      	uxtb	r3, r3
}
 800046e:	4618      	mov	r0, r3
 8000470:	46bd      	mov	sp, r7
 8000472:	bc80      	pop	{r7}
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	200000e4 	.word	0x200000e4

0800047c <button3_pressed>:

int button3_pressed(){
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
	return (button3Buffer == PRESSED_STATE);
 8000480:	4b05      	ldr	r3, [pc, #20]	; (8000498 <button3_pressed+0x1c>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2b00      	cmp	r3, #0
 8000486:	bf0c      	ite	eq
 8000488:	2301      	moveq	r3, #1
 800048a:	2300      	movne	r3, #0
 800048c:	b2db      	uxtb	r3, r3
}
 800048e:	4618      	mov	r0, r3
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	20000028 	.word	0x20000028

0800049c <button4_pressed>:

int button4_pressed(){
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
	return (button4Buffer == PRESSED_STATE);
 80004a0:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <button4_pressed+0x1c>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	bf0c      	ite	eq
 80004a8:	2301      	moveq	r3, #1
 80004aa:	2300      	movne	r3, #0
 80004ac:	b2db      	uxtb	r3, r3
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	20000034 	.word	0x20000034

080004bc <fsm_for_input_processing>:
void ToggleRED();
void ToggleGREEN();
void ToggleYELLOW();


void fsm_for_input_processing(UART_HandleTypeDef*huart,TIM_HandleTypeDef*htim3){
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	6039      	str	r1, [r7, #0]
	switch(state){
 80004c6:	4b9c      	ldr	r3, [pc, #624]	; (8000738 <fsm_for_input_processing+0x27c>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	2b07      	cmp	r3, #7
 80004cc:	f200 8438 	bhi.w	8000d40 <fsm_for_input_processing+0x884>
 80004d0:	a201      	add	r2, pc, #4	; (adr r2, 80004d8 <fsm_for_input_processing+0x1c>)
 80004d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004d6:	bf00      	nop
 80004d8:	080004f9 	.word	0x080004f9
 80004dc:	08000591 	.word	0x08000591
 80004e0:	08000795 	.word	0x08000795
 80004e4:	08000891 	.word	0x08000891
 80004e8:	0800098d 	.word	0x0800098d
 80004ec:	08000ac3 	.word	0x08000ac3
 80004f0:	08000ba9 	.word	0x08000ba9
 80004f4:	08000ce1 	.word	0x08000ce1
	case INIT:
		print=0;
 80004f8:	4b90      	ldr	r3, [pc, #576]	; (800073c <fsm_for_input_processing+0x280>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
		/* INIT PORT OUTPUT START */
		turnOffSingleLed();
 80004fe:	f000 fd1d 	bl	8000f3c <turnOffSingleLed>
		/* INIT PORT OUTPUT END */

		/* INITIALIZE TEMPORARY DURATION START */
		red_temp_dur=RED_DURATION;
 8000502:	4b8f      	ldr	r3, [pc, #572]	; (8000740 <fsm_for_input_processing+0x284>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a8f      	ldr	r2, [pc, #572]	; (8000744 <fsm_for_input_processing+0x288>)
 8000508:	6013      	str	r3, [r2, #0]
		yellow_temp_dur=YELLOW_DURATION;
 800050a:	4b8f      	ldr	r3, [pc, #572]	; (8000748 <fsm_for_input_processing+0x28c>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a8f      	ldr	r2, [pc, #572]	; (800074c <fsm_for_input_processing+0x290>)
 8000510:	6013      	str	r3, [r2, #0]
		green_temp_dur=GREEN_DURATION;
 8000512:	4b8f      	ldr	r3, [pc, #572]	; (8000750 <fsm_for_input_processing+0x294>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a8f      	ldr	r2, [pc, #572]	; (8000754 <fsm_for_input_processing+0x298>)
 8000518:	6013      	str	r3, [r2, #0]
		/* INITIALIZE TEMPORARY DURATION END */

		/* INITIALIZE COUNT START */
		leds_way1_count[0]=RED_DURATION;
 800051a:	4b89      	ldr	r3, [pc, #548]	; (8000740 <fsm_for_input_processing+0x284>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a8e      	ldr	r2, [pc, #568]	; (8000758 <fsm_for_input_processing+0x29c>)
 8000520:	6013      	str	r3, [r2, #0]
		leds_way1_count[1]=GREEN_DURATION;
 8000522:	4b8b      	ldr	r3, [pc, #556]	; (8000750 <fsm_for_input_processing+0x294>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a8c      	ldr	r2, [pc, #560]	; (8000758 <fsm_for_input_processing+0x29c>)
 8000528:	6053      	str	r3, [r2, #4]
		leds_way1_count[2]=YELLOW_DURATION;
 800052a:	4b87      	ldr	r3, [pc, #540]	; (8000748 <fsm_for_input_processing+0x28c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a8a      	ldr	r2, [pc, #552]	; (8000758 <fsm_for_input_processing+0x29c>)
 8000530:	6093      	str	r3, [r2, #8]
		turnOnRed1();
 8000532:	f000 fd93 	bl	800105c <turnOnRed1>
		current_led_way1=RED;
 8000536:	4b89      	ldr	r3, [pc, #548]	; (800075c <fsm_for_input_processing+0x2a0>)
 8000538:	2200      	movs	r2, #0
 800053a:	701a      	strb	r2, [r3, #0]
		leds_way2_count[0]=RED_DURATION;
 800053c:	4b80      	ldr	r3, [pc, #512]	; (8000740 <fsm_for_input_processing+0x284>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a87      	ldr	r2, [pc, #540]	; (8000760 <fsm_for_input_processing+0x2a4>)
 8000542:	6013      	str	r3, [r2, #0]
		leds_way2_count[1]=GREEN_DURATION;
 8000544:	4b82      	ldr	r3, [pc, #520]	; (8000750 <fsm_for_input_processing+0x294>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a85      	ldr	r2, [pc, #532]	; (8000760 <fsm_for_input_processing+0x2a4>)
 800054a:	6053      	str	r3, [r2, #4]
		leds_way2_count[2]=YELLOW_DURATION;
 800054c:	4b7e      	ldr	r3, [pc, #504]	; (8000748 <fsm_for_input_processing+0x28c>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a83      	ldr	r2, [pc, #524]	; (8000760 <fsm_for_input_processing+0x2a4>)
 8000552:	6093      	str	r3, [r2, #8]
		turnOnGreen2();
 8000554:	f000 fdbe 	bl	80010d4 <turnOnGreen2>
		current_led_way2=GREEN;
 8000558:	4b82      	ldr	r3, [pc, #520]	; (8000764 <fsm_for_input_processing+0x2a8>)
 800055a:	2202      	movs	r2, #2
 800055c:	701a      	strb	r2, [r3, #0]
		PES_LED_OFF();
 800055e:	f000 fd55 	bl	800100c <PES_LED_OFF>
		/* INITIALIZE COUNT END */

		state=MODE1;
 8000562:	4b75      	ldr	r3, [pc, #468]	; (8000738 <fsm_for_input_processing+0x27c>)
 8000564:	2201      	movs	r2, #1
 8000566:	701a      	strb	r2, [r3, #0]
		setTimer4(1000);  //SET TIMER4 FOR COUNT DOWN
 8000568:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800056c:	f7ff fe3c 	bl	80001e8 <setTimer4>

		/* PES_LED SETUP START */
		pes_led_period=(RED_DURATION+YELLOW_DURATION+GREEN_DURATION)*2;
 8000570:	4b73      	ldr	r3, [pc, #460]	; (8000740 <fsm_for_input_processing+0x284>)
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	4b74      	ldr	r3, [pc, #464]	; (8000748 <fsm_for_input_processing+0x28c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	441a      	add	r2, r3
 800057a:	4b75      	ldr	r3, [pc, #468]	; (8000750 <fsm_for_input_processing+0x294>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4413      	add	r3, r2
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	4a79      	ldr	r2, [pc, #484]	; (8000768 <fsm_for_input_processing+0x2ac>)
 8000584:	6013      	str	r3, [r2, #0]
		pes_led_count=pes_led_period;
 8000586:	4b78      	ldr	r3, [pc, #480]	; (8000768 <fsm_for_input_processing+0x2ac>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a78      	ldr	r2, [pc, #480]	; (800076c <fsm_for_input_processing+0x2b0>)
 800058c:	6013      	str	r3, [r2, #0]
		/* PES_LED_SETUP END */
		break;
 800058e:	e3d7      	b.n	8000d40 <fsm_for_input_processing+0x884>
	case MODE1:
		/* COUNT DOWN START */
		if(timer4_flag==1){
 8000590:	4b77      	ldr	r3, [pc, #476]	; (8000770 <fsm_for_input_processing+0x2b4>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d121      	bne.n	80005dc <fsm_for_input_processing+0x120>
			setTimer4(1000);
 8000598:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800059c:	f7ff fe24 	bl	80001e8 <setTimer4>
			pes_led_count--;
 80005a0:	4b72      	ldr	r3, [pc, #456]	; (800076c <fsm_for_input_processing+0x2b0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	3b01      	subs	r3, #1
 80005a6:	4a71      	ldr	r2, [pc, #452]	; (800076c <fsm_for_input_processing+0x2b0>)
 80005a8:	6013      	str	r3, [r2, #0]
			trafficLightCount(leds_way1_count,&current_led_way1);
 80005aa:	496c      	ldr	r1, [pc, #432]	; (800075c <fsm_for_input_processing+0x2a0>)
 80005ac:	486a      	ldr	r0, [pc, #424]	; (8000758 <fsm_for_input_processing+0x29c>)
 80005ae:	f000 fc73 	bl	8000e98 <trafficLightCount>
			trafficLightCount(leds_way2_count,&current_led_way2);
 80005b2:	496c      	ldr	r1, [pc, #432]	; (8000764 <fsm_for_input_processing+0x2a8>)
 80005b4:	486a      	ldr	r0, [pc, #424]	; (8000760 <fsm_for_input_processing+0x2a4>)
 80005b6:	f000 fc6f 	bl	8000e98 <trafficLightCount>
			displaySingleLedsMode1();
 80005ba:	f000 fc41 	bl	8000e40 <displaySingleLedsMode1>
			HAL_UART_Transmit(huart, traffic_light_num,
			sprintf(traffic_light_num,"!7SEG:%d%d#\r\n",led_buffer1[0],led_buffer1[1]), 100);
 80005be:	4b6d      	ldr	r3, [pc, #436]	; (8000774 <fsm_for_input_processing+0x2b8>)
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	4b6c      	ldr	r3, [pc, #432]	; (8000774 <fsm_for_input_processing+0x2b8>)
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	496c      	ldr	r1, [pc, #432]	; (8000778 <fsm_for_input_processing+0x2bc>)
 80005c8:	486c      	ldr	r0, [pc, #432]	; (800077c <fsm_for_input_processing+0x2c0>)
 80005ca:	f003 fdb9 	bl	8004140 <siprintf>
 80005ce:	4603      	mov	r3, r0
			HAL_UART_Transmit(huart, traffic_light_num,
 80005d0:	b29a      	uxth	r2, r3
 80005d2:	2364      	movs	r3, #100	; 0x64
 80005d4:	4969      	ldr	r1, [pc, #420]	; (800077c <fsm_for_input_processing+0x2c0>)
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f003 f8f5 	bl	80037c6 <HAL_UART_Transmit>
		}
		/* COUNT DOWN END */

		/* UART TRANSMIT START */
		if(current_led_way1==RED){
 80005dc:	4b5f      	ldr	r3, [pc, #380]	; (800075c <fsm_for_input_processing+0x2a0>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d105      	bne.n	80005f0 <fsm_for_input_processing+0x134>
			update_led_buffer(leds_way1_count[0]);
 80005e4:	4b5c      	ldr	r3, [pc, #368]	; (8000758 <fsm_for_input_processing+0x29c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 fdb3 	bl	8001154 <update_led_buffer>
 80005ee:	e012      	b.n	8000616 <fsm_for_input_processing+0x15a>
		}else if(current_led_way1==GREEN){
 80005f0:	4b5a      	ldr	r3, [pc, #360]	; (800075c <fsm_for_input_processing+0x2a0>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b02      	cmp	r3, #2
 80005f6:	d105      	bne.n	8000604 <fsm_for_input_processing+0x148>
			update_led_buffer(leds_way1_count[1]);
 80005f8:	4b57      	ldr	r3, [pc, #348]	; (8000758 <fsm_for_input_processing+0x29c>)
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fda9 	bl	8001154 <update_led_buffer>
 8000602:	e008      	b.n	8000616 <fsm_for_input_processing+0x15a>
		}else if(current_led_way1==YELLOW){
 8000604:	4b55      	ldr	r3, [pc, #340]	; (800075c <fsm_for_input_processing+0x2a0>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d104      	bne.n	8000616 <fsm_for_input_processing+0x15a>
			update_led_buffer(leds_way1_count[2]);
 800060c:	4b52      	ldr	r3, [pc, #328]	; (8000758 <fsm_for_input_processing+0x29c>)
 800060e:	689b      	ldr	r3, [r3, #8]
 8000610:	4618      	mov	r0, r3
 8000612:	f000 fd9f 	bl	8001154 <update_led_buffer>

		/* UART TRANSMIT END */


		/*EXECUTE INPUT BUTTON1 START */
		if(button1_executed==0){
 8000616:	4b5a      	ldr	r3, [pc, #360]	; (8000780 <fsm_for_input_processing+0x2c4>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d124      	bne.n	8000668 <fsm_for_input_processing+0x1ac>
			if(button1_pressed()==TRUE){
 800061e:	f7ff fefd 	bl	800041c <button1_pressed>
 8000622:	4603      	mov	r3, r0
 8000624:	2b01      	cmp	r3, #1
 8000626:	d12b      	bne.n	8000680 <fsm_for_input_processing+0x1c4>
				print=0;
 8000628:	4b44      	ldr	r3, [pc, #272]	; (800073c <fsm_for_input_processing+0x280>)
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
				state=MODE2;
 800062e:	4b42      	ldr	r3, [pc, #264]	; (8000738 <fsm_for_input_processing+0x27c>)
 8000630:	2202      	movs	r2, #2
 8000632:	701a      	strb	r2, [r3, #0]
				button1_executed=1;
 8000634:	4b52      	ldr	r3, [pc, #328]	; (8000780 <fsm_for_input_processing+0x2c4>)
 8000636:	2201      	movs	r2, #1
 8000638:	601a      	str	r2, [r3, #0]
				setTimer1(250);   //set timer for red led blinking
 800063a:	20fa      	movs	r0, #250	; 0xfa
 800063c:	f7ff fd86 	bl	800014c <setTimer1>
				/* INITIALIZE TEMP DURATION START */
				red_temp_dur=RED_DURATION;
 8000640:	4b3f      	ldr	r3, [pc, #252]	; (8000740 <fsm_for_input_processing+0x284>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a3f      	ldr	r2, [pc, #252]	; (8000744 <fsm_for_input_processing+0x288>)
 8000646:	6013      	str	r3, [r2, #0]
				yellow_temp_dur=YELLOW_DURATION;
 8000648:	4b3f      	ldr	r3, [pc, #252]	; (8000748 <fsm_for_input_processing+0x28c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a3f      	ldr	r2, [pc, #252]	; (800074c <fsm_for_input_processing+0x290>)
 800064e:	6013      	str	r3, [r2, #0]
				green_temp_dur=GREEN_DURATION;
 8000650:	4b3f      	ldr	r3, [pc, #252]	; (8000750 <fsm_for_input_processing+0x294>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a3f      	ldr	r2, [pc, #252]	; (8000754 <fsm_for_input_processing+0x298>)
 8000656:	6013      	str	r3, [r2, #0]
				/* INITIALIZE TEMP DURATION END */
				turnOffSingleLed();
 8000658:	f000 fc70 	bl	8000f3c <turnOffSingleLed>
				PES_LED_OFF();
 800065c:	f000 fcd6 	bl	800100c <PES_LED_OFF>
				flag_pes=0;
 8000660:	4b48      	ldr	r3, [pc, #288]	; (8000784 <fsm_for_input_processing+0x2c8>)
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	e00b      	b.n	8000680 <fsm_for_input_processing+0x1c4>
			}
		}else if(button1_executed==1){
 8000668:	4b45      	ldr	r3, [pc, #276]	; (8000780 <fsm_for_input_processing+0x2c4>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d107      	bne.n	8000680 <fsm_for_input_processing+0x1c4>
			if(button1_pressed()==FALSE){
 8000670:	f7ff fed4 	bl	800041c <button1_pressed>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d102      	bne.n	8000680 <fsm_for_input_processing+0x1c4>
				button1_executed=0;
 800067a:	4b41      	ldr	r3, [pc, #260]	; (8000780 <fsm_for_input_processing+0x2c4>)
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
			}
		}
		/*EXECUTE INPUT BUTTON1 END */

		/* PES LED EXCUTION START */
		if(button4_pressed()==1){
 8000680:	f7ff ff0c 	bl	800049c <button4_pressed>
 8000684:	4603      	mov	r3, r0
 8000686:	2b01      	cmp	r3, #1
 8000688:	d111      	bne.n	80006ae <fsm_for_input_processing+0x1f2>
			if(button4_executed==0){
 800068a:	4b3f      	ldr	r3, [pc, #252]	; (8000788 <fsm_for_input_processing+0x2cc>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d115      	bne.n	80006be <fsm_for_input_processing+0x202>
				flag_pes=1;
 8000692:	4b3c      	ldr	r3, [pc, #240]	; (8000784 <fsm_for_input_processing+0x2c8>)
 8000694:	2201      	movs	r2, #1
 8000696:	601a      	str	r2, [r3, #0]
				button4_executed=1;
 8000698:	4b3b      	ldr	r3, [pc, #236]	; (8000788 <fsm_for_input_processing+0x2cc>)
 800069a:	2201      	movs	r2, #1
 800069c:	601a      	str	r2, [r3, #0]
				timer2_flag = 1;
 800069e:	4b3b      	ldr	r3, [pc, #236]	; (800078c <fsm_for_input_processing+0x2d0>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	601a      	str	r2, [r3, #0]
				pes_led_count=pes_led_period;
 80006a4:	4b30      	ldr	r3, [pc, #192]	; (8000768 <fsm_for_input_processing+0x2ac>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a30      	ldr	r2, [pc, #192]	; (800076c <fsm_for_input_processing+0x2b0>)
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	e007      	b.n	80006be <fsm_for_input_processing+0x202>
			}
		}else if(button4_pressed()==0){
 80006ae:	f7ff fef5 	bl	800049c <button4_pressed>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d102      	bne.n	80006be <fsm_for_input_processing+0x202>
			button4_executed=0;
 80006b8:	4b33      	ldr	r3, [pc, #204]	; (8000788 <fsm_for_input_processing+0x2cc>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
		}

		if(flag_pes==1){
 80006be:	4b31      	ldr	r3, [pc, #196]	; (8000784 <fsm_for_input_processing+0x2c8>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	f040 832f 	bne.w	8000d26 <fsm_for_input_processing+0x86a>
			if(current_led_way1==RED){
 80006c8:	4b24      	ldr	r3, [pc, #144]	; (800075c <fsm_for_input_processing+0x2a0>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d117      	bne.n	8000700 <fsm_for_input_processing+0x244>
				PES_LED_ON();
 80006d0:	f000 fc74 	bl	8000fbc <PES_LED_ON>
				if (leds_way1_count[0] <= 3){
 80006d4:	4b20      	ldr	r3, [pc, #128]	; (8000758 <fsm_for_input_processing+0x29c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b03      	cmp	r3, #3
 80006da:	dc19      	bgt.n	8000710 <fsm_for_input_processing+0x254>
					if (timer2_flag == 1){
 80006dc:	4b2b      	ldr	r3, [pc, #172]	; (800078c <fsm_for_input_processing+0x2d0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d115      	bne.n	8000710 <fsm_for_input_processing+0x254>
						pwm = pwm +250;
 80006e4:	4b2a      	ldr	r3, [pc, #168]	; (8000790 <fsm_for_input_processing+0x2d4>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	33fa      	adds	r3, #250	; 0xfa
 80006ea:	4a29      	ldr	r2, [pc, #164]	; (8000790 <fsm_for_input_processing+0x2d4>)
 80006ec:	6013      	str	r3, [r2, #0]
						__HAL_TIM_SetCompare(htim3, TIM_CHANNEL_1, pwm);
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <fsm_for_input_processing+0x2d4>)
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	635a      	str	r2, [r3, #52]	; 0x34
						setTimer2(30);
 80006f8:	201e      	movs	r0, #30
 80006fa:	f7ff fd41 	bl	8000180 <setTimer2>
 80006fe:	e007      	b.n	8000710 <fsm_for_input_processing+0x254>
					}
				}
			}else{
				PES_LED_RED();
 8000700:	f000 fc70 	bl	8000fe4 <PES_LED_RED>
				timer2_flag = 1;
 8000704:	4b21      	ldr	r3, [pc, #132]	; (800078c <fsm_for_input_processing+0x2d0>)
 8000706:	2201      	movs	r2, #1
 8000708:	601a      	str	r2, [r3, #0]
				pwm = 0;
 800070a:	4b21      	ldr	r3, [pc, #132]	; (8000790 <fsm_for_input_processing+0x2d4>)
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
			}
			if(pes_led_count<=0 && current_led_way1!=RED){
 8000710:	4b16      	ldr	r3, [pc, #88]	; (800076c <fsm_for_input_processing+0x2b0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	f300 8306 	bgt.w	8000d26 <fsm_for_input_processing+0x86a>
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <fsm_for_input_processing+0x2a0>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	f000 8301 	beq.w	8000d26 <fsm_for_input_processing+0x86a>
				PES_LED_OFF();
 8000724:	f000 fc72 	bl	800100c <PES_LED_OFF>
				pwm = 0;
 8000728:	4b19      	ldr	r3, [pc, #100]	; (8000790 <fsm_for_input_processing+0x2d4>)
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
				flag_pes=0;
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <fsm_for_input_processing+0x2c8>)
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
			}
		}
		/* PES LED EXCUTION END */
		break;
 8000734:	e2f7      	b.n	8000d26 <fsm_for_input_processing+0x86a>
 8000736:	bf00      	nop
 8000738:	20000140 	.word	0x20000140
 800073c:	20000174 	.word	0x20000174
 8000740:	20000120 	.word	0x20000120
 8000744:	20000134 	.word	0x20000134
 8000748:	20000124 	.word	0x20000124
 800074c:	20000138 	.word	0x20000138
 8000750:	20000128 	.word	0x20000128
 8000754:	2000013c 	.word	0x2000013c
 8000758:	20000144 	.word	0x20000144
 800075c:	20000141 	.word	0x20000141
 8000760:	20000154 	.word	0x20000154
 8000764:	20000150 	.word	0x20000150
 8000768:	2000012c 	.word	0x2000012c
 800076c:	20000130 	.word	0x20000130
 8000770:	200000e0 	.word	0x200000e0
 8000774:	2000017c 	.word	0x2000017c
 8000778:	08004a4c 	.word	0x08004a4c
 800077c:	200000e8 	.word	0x200000e8
 8000780:	20000160 	.word	0x20000160
 8000784:	20000168 	.word	0x20000168
 8000788:	2000016c 	.word	0x2000016c
 800078c:	200000d0 	.word	0x200000d0
 8000790:	2000011c 	.word	0x2000011c
	case MODE2:
		/* UART TRANSMIT START */
		update_led_buffer(red_temp_dur);
 8000794:	4b94      	ldr	r3, [pc, #592]	; (80009e8 <fsm_for_input_processing+0x52c>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4618      	mov	r0, r3
 800079a:	f000 fcdb 	bl	8001154 <update_led_buffer>
		if(print==0){
 800079e:	4b93      	ldr	r3, [pc, #588]	; (80009ec <fsm_for_input_processing+0x530>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d111      	bne.n	80007ca <fsm_for_input_processing+0x30e>
			HAL_UART_Transmit(huart, traffic_light_num,
			sprintf(traffic_light_num,"!7SEG:%d%d#\r\n",led_buffer1[0],led_buffer1[1]), 100);
 80007a6:	4b92      	ldr	r3, [pc, #584]	; (80009f0 <fsm_for_input_processing+0x534>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	4b91      	ldr	r3, [pc, #580]	; (80009f0 <fsm_for_input_processing+0x534>)
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	4991      	ldr	r1, [pc, #580]	; (80009f4 <fsm_for_input_processing+0x538>)
 80007b0:	4891      	ldr	r0, [pc, #580]	; (80009f8 <fsm_for_input_processing+0x53c>)
 80007b2:	f003 fcc5 	bl	8004140 <siprintf>
 80007b6:	4603      	mov	r3, r0
			HAL_UART_Transmit(huart, traffic_light_num,
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	2364      	movs	r3, #100	; 0x64
 80007bc:	498e      	ldr	r1, [pc, #568]	; (80009f8 <fsm_for_input_processing+0x53c>)
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f003 f801 	bl	80037c6 <HAL_UART_Transmit>
			print=1;
 80007c4:	4b89      	ldr	r3, [pc, #548]	; (80009ec <fsm_for_input_processing+0x530>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	601a      	str	r2, [r3, #0]
		}
		/* UART TRANSMIT END */

		/* BLINK SINGLE RED LED START */
		if(timer1_flag==1){
 80007ca:	4b8c      	ldr	r3, [pc, #560]	; (80009fc <fsm_for_input_processing+0x540>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d119      	bne.n	8000806 <fsm_for_input_processing+0x34a>
			setTimer1(250);
 80007d2:	20fa      	movs	r0, #250	; 0xfa
 80007d4:	f7ff fcba 	bl	800014c <setTimer1>
			if(led_state==0){
 80007d8:	4b89      	ldr	r3, [pc, #548]	; (8000a00 <fsm_for_input_processing+0x544>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d107      	bne.n	80007f0 <fsm_for_input_processing+0x334>
				turnOnRed1();
 80007e0:	f000 fc3c 	bl	800105c <turnOnRed1>
				turnOnRed2();
 80007e4:	f000 fc86 	bl	80010f4 <turnOnRed2>
				led_state=1;
 80007e8:	4b85      	ldr	r3, [pc, #532]	; (8000a00 <fsm_for_input_processing+0x544>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	e00a      	b.n	8000806 <fsm_for_input_processing+0x34a>
			}else if(led_state==1){
 80007f0:	4b83      	ldr	r3, [pc, #524]	; (8000a00 <fsm_for_input_processing+0x544>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d106      	bne.n	8000806 <fsm_for_input_processing+0x34a>
				turnOff1();
 80007f8:	f000 fc58 	bl	80010ac <turnOff1>
				turnOff2();
 80007fc:	f000 fc9a 	bl	8001134 <turnOff2>
				led_state=0;
 8000800:	4b7f      	ldr	r3, [pc, #508]	; (8000a00 <fsm_for_input_processing+0x544>)
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
			}
		}
		/* BLINK SINGLE RED LED END */

		/*EXECUTE INPUT BUTTON1 START */
		if(button1_executed==0){
 8000806:	4b7f      	ldr	r3, [pc, #508]	; (8000a04 <fsm_for_input_processing+0x548>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d110      	bne.n	8000830 <fsm_for_input_processing+0x374>
			if(button1_pressed()==TRUE){
 800080e:	f7ff fe05 	bl	800041c <button1_pressed>
 8000812:	4603      	mov	r3, r0
 8000814:	2b01      	cmp	r3, #1
 8000816:	d117      	bne.n	8000848 <fsm_for_input_processing+0x38c>
				state=MODE3;
 8000818:	4b7b      	ldr	r3, [pc, #492]	; (8000a08 <fsm_for_input_processing+0x54c>)
 800081a:	2203      	movs	r2, #3
 800081c:	701a      	strb	r2, [r3, #0]
				button1_executed=1;
 800081e:	4b79      	ldr	r3, [pc, #484]	; (8000a04 <fsm_for_input_processing+0x548>)
 8000820:	2201      	movs	r2, #1
 8000822:	601a      	str	r2, [r3, #0]
				turnOffSingleLed();
 8000824:	f000 fb8a 	bl	8000f3c <turnOffSingleLed>
				print=0;
 8000828:	4b70      	ldr	r3, [pc, #448]	; (80009ec <fsm_for_input_processing+0x530>)
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	e00b      	b.n	8000848 <fsm_for_input_processing+0x38c>
			}
		}else if(button1_executed==1){
 8000830:	4b74      	ldr	r3, [pc, #464]	; (8000a04 <fsm_for_input_processing+0x548>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b01      	cmp	r3, #1
 8000836:	d107      	bne.n	8000848 <fsm_for_input_processing+0x38c>
			if(button1_pressed()==FALSE){
 8000838:	f7ff fdf0 	bl	800041c <button1_pressed>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d102      	bne.n	8000848 <fsm_for_input_processing+0x38c>
				button1_executed=0;
 8000842:	4b70      	ldr	r3, [pc, #448]	; (8000a04 <fsm_for_input_processing+0x548>)
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
			}
		}
		/*EXECUTE INPUT BUTTON1 END */

		/*EXECUTE INPUT BUTTON3 START */
		if(button3_pressed()==TRUE){
 8000848:	f7ff fe18 	bl	800047c <button3_pressed>
 800084c:	4603      	mov	r3, r0
 800084e:	2b01      	cmp	r3, #1
 8000850:	d105      	bne.n	800085e <fsm_for_input_processing+0x3a2>
			state=UPDATE_DURATION;
 8000852:	4b6d      	ldr	r3, [pc, #436]	; (8000a08 <fsm_for_input_processing+0x54c>)
 8000854:	2207      	movs	r2, #7
 8000856:	701a      	strb	r2, [r3, #0]
			LedToChange=RED;
 8000858:	4b6c      	ldr	r3, [pc, #432]	; (8000a0c <fsm_for_input_processing+0x550>)
 800085a:	2200      	movs	r2, #0
 800085c:	701a      	strb	r2, [r3, #0]
		}
		/*EXECUTE INPUT BUTTON3 END */

		/*EXECUTE INPUT BUTTON2 START */
		if(button2_pressed()==TRUE){
 800085e:	f7ff fded 	bl	800043c <button2_pressed>
 8000862:	4603      	mov	r3, r0
 8000864:	2b01      	cmp	r3, #1
 8000866:	d108      	bne.n	800087a <fsm_for_input_processing+0x3be>
			state=INCREASE;
 8000868:	4b67      	ldr	r3, [pc, #412]	; (8000a08 <fsm_for_input_processing+0x54c>)
 800086a:	2205      	movs	r2, #5
 800086c:	701a      	strb	r2, [r3, #0]
			LedToChange=RED;
 800086e:	4b67      	ldr	r3, [pc, #412]	; (8000a0c <fsm_for_input_processing+0x550>)
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]
			button2_increase1=0;
 8000874:	4b66      	ldr	r3, [pc, #408]	; (8000a10 <fsm_for_input_processing+0x554>)
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
		}
		/*EXECUTE INPUT BUTTON2 END */
		//TO DO
		/* UART TRANSMIT START */
		if(LedToChange==RED){
 800087a:	4b64      	ldr	r3, [pc, #400]	; (8000a0c <fsm_for_input_processing+0x550>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	f040 8253 	bne.w	8000d2a <fsm_for_input_processing+0x86e>
			update_led_buffer(red_temp_dur);
 8000884:	4b58      	ldr	r3, [pc, #352]	; (80009e8 <fsm_for_input_processing+0x52c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4618      	mov	r0, r3
 800088a:	f000 fc63 	bl	8001154 <update_led_buffer>
		}
		/* UART TRANSMIT END */

		break;
 800088e:	e24c      	b.n	8000d2a <fsm_for_input_processing+0x86e>
	case MODE3:
		/* UART TRANSMIT START */
		update_led_buffer(green_temp_dur);
 8000890:	4b60      	ldr	r3, [pc, #384]	; (8000a14 <fsm_for_input_processing+0x558>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4618      	mov	r0, r3
 8000896:	f000 fc5d 	bl	8001154 <update_led_buffer>
		if(print==0){
 800089a:	4b54      	ldr	r3, [pc, #336]	; (80009ec <fsm_for_input_processing+0x530>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d111      	bne.n	80008c6 <fsm_for_input_processing+0x40a>
			HAL_UART_Transmit(huart, traffic_light_num,
			sprintf(traffic_light_num,"!7SEG:%d%d#\r\n",led_buffer1[0],led_buffer1[1]), 100);
 80008a2:	4b53      	ldr	r3, [pc, #332]	; (80009f0 <fsm_for_input_processing+0x534>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	4b52      	ldr	r3, [pc, #328]	; (80009f0 <fsm_for_input_processing+0x534>)
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	4952      	ldr	r1, [pc, #328]	; (80009f4 <fsm_for_input_processing+0x538>)
 80008ac:	4852      	ldr	r0, [pc, #328]	; (80009f8 <fsm_for_input_processing+0x53c>)
 80008ae:	f003 fc47 	bl	8004140 <siprintf>
 80008b2:	4603      	mov	r3, r0
			HAL_UART_Transmit(huart, traffic_light_num,
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	2364      	movs	r3, #100	; 0x64
 80008b8:	494f      	ldr	r1, [pc, #316]	; (80009f8 <fsm_for_input_processing+0x53c>)
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f002 ff83 	bl	80037c6 <HAL_UART_Transmit>
			print=1;
 80008c0:	4b4a      	ldr	r3, [pc, #296]	; (80009ec <fsm_for_input_processing+0x530>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	601a      	str	r2, [r3, #0]
		}
		/* UART TRANSMIT END */
		/* BLINK SINGLE GREEN LED START */
		if(timer1_flag==1){
 80008c6:	4b4d      	ldr	r3, [pc, #308]	; (80009fc <fsm_for_input_processing+0x540>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d119      	bne.n	8000902 <fsm_for_input_processing+0x446>
			setTimer1(250);
 80008ce:	20fa      	movs	r0, #250	; 0xfa
 80008d0:	f7ff fc3c 	bl	800014c <setTimer1>
			if(led_state==0){
 80008d4:	4b4a      	ldr	r3, [pc, #296]	; (8000a00 <fsm_for_input_processing+0x544>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d107      	bne.n	80008ec <fsm_for_input_processing+0x430>
				turnOnGreen1();
 80008dc:	f000 fbaa 	bl	8001034 <turnOnGreen1>
				turnOnGreen2();
 80008e0:	f000 fbf8 	bl	80010d4 <turnOnGreen2>
				led_state=1;
 80008e4:	4b46      	ldr	r3, [pc, #280]	; (8000a00 <fsm_for_input_processing+0x544>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	e00a      	b.n	8000902 <fsm_for_input_processing+0x446>
			}else if(led_state==1){
 80008ec:	4b44      	ldr	r3, [pc, #272]	; (8000a00 <fsm_for_input_processing+0x544>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d106      	bne.n	8000902 <fsm_for_input_processing+0x446>
				turnOff1();
 80008f4:	f000 fbda 	bl	80010ac <turnOff1>
				turnOff2();
 80008f8:	f000 fc1c 	bl	8001134 <turnOff2>
				led_state=0;
 80008fc:	4b40      	ldr	r3, [pc, #256]	; (8000a00 <fsm_for_input_processing+0x544>)
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
		}
		/* BLINK SINGLE GREEN LED END */


		/*EXECUTE INPUT BUTTON1 START */
		if(button1_executed==0){
 8000902:	4b40      	ldr	r3, [pc, #256]	; (8000a04 <fsm_for_input_processing+0x548>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d110      	bne.n	800092c <fsm_for_input_processing+0x470>
			if(button1_pressed()==TRUE){
 800090a:	f7ff fd87 	bl	800041c <button1_pressed>
 800090e:	4603      	mov	r3, r0
 8000910:	2b01      	cmp	r3, #1
 8000912:	d117      	bne.n	8000944 <fsm_for_input_processing+0x488>
				state=MODE4;
 8000914:	4b3c      	ldr	r3, [pc, #240]	; (8000a08 <fsm_for_input_processing+0x54c>)
 8000916:	2204      	movs	r2, #4
 8000918:	701a      	strb	r2, [r3, #0]
				button1_executed=1;
 800091a:	4b3a      	ldr	r3, [pc, #232]	; (8000a04 <fsm_for_input_processing+0x548>)
 800091c:	2201      	movs	r2, #1
 800091e:	601a      	str	r2, [r3, #0]
				turnOffSingleLed();
 8000920:	f000 fb0c 	bl	8000f3c <turnOffSingleLed>
				print=0;
 8000924:	4b31      	ldr	r3, [pc, #196]	; (80009ec <fsm_for_input_processing+0x530>)
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	e00b      	b.n	8000944 <fsm_for_input_processing+0x488>
			}
		}else if(button1_executed==1){
 800092c:	4b35      	ldr	r3, [pc, #212]	; (8000a04 <fsm_for_input_processing+0x548>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d107      	bne.n	8000944 <fsm_for_input_processing+0x488>
			if(button1_pressed()==FALSE){
 8000934:	f7ff fd72 	bl	800041c <button1_pressed>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d102      	bne.n	8000944 <fsm_for_input_processing+0x488>
				button1_executed=0;
 800093e:	4b31      	ldr	r3, [pc, #196]	; (8000a04 <fsm_for_input_processing+0x548>)
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
			}
		}
		/*EXECUTE INPUT BUTTON1 END */

		/*EXECUTE INPUT BUTTON3 START */
		if(button3_pressed()==TRUE){
 8000944:	f7ff fd9a 	bl	800047c <button3_pressed>
 8000948:	4603      	mov	r3, r0
 800094a:	2b01      	cmp	r3, #1
 800094c:	d105      	bne.n	800095a <fsm_for_input_processing+0x49e>
			state=UPDATE_DURATION;
 800094e:	4b2e      	ldr	r3, [pc, #184]	; (8000a08 <fsm_for_input_processing+0x54c>)
 8000950:	2207      	movs	r2, #7
 8000952:	701a      	strb	r2, [r3, #0]
			LedToChange=GREEN;
 8000954:	4b2d      	ldr	r3, [pc, #180]	; (8000a0c <fsm_for_input_processing+0x550>)
 8000956:	2202      	movs	r2, #2
 8000958:	701a      	strb	r2, [r3, #0]
		}
		/*EXECUTE INPUT BUTTON3 END */

		/*EXECUTE INPUT BUTTON2 START */
		if(button2_pressed()==TRUE){
 800095a:	f7ff fd6f 	bl	800043c <button2_pressed>
 800095e:	4603      	mov	r3, r0
 8000960:	2b01      	cmp	r3, #1
 8000962:	d108      	bne.n	8000976 <fsm_for_input_processing+0x4ba>
			state=INCREASE;
 8000964:	4b28      	ldr	r3, [pc, #160]	; (8000a08 <fsm_for_input_processing+0x54c>)
 8000966:	2205      	movs	r2, #5
 8000968:	701a      	strb	r2, [r3, #0]
			LedToChange=GREEN;
 800096a:	4b28      	ldr	r3, [pc, #160]	; (8000a0c <fsm_for_input_processing+0x550>)
 800096c:	2202      	movs	r2, #2
 800096e:	701a      	strb	r2, [r3, #0]
			button2_increase1=0;
 8000970:	4b27      	ldr	r3, [pc, #156]	; (8000a10 <fsm_for_input_processing+0x554>)
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
		}
		/*EXECUTE INPUT BUTTON2 END */
		//TO DO
		/* UART TRANSMIT START */
		if(LedToChange==GREEN){
 8000976:	4b25      	ldr	r3, [pc, #148]	; (8000a0c <fsm_for_input_processing+0x550>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b02      	cmp	r3, #2
 800097c:	f040 81d7 	bne.w	8000d2e <fsm_for_input_processing+0x872>
			update_led_buffer(green_temp_dur);
 8000980:	4b24      	ldr	r3, [pc, #144]	; (8000a14 <fsm_for_input_processing+0x558>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4618      	mov	r0, r3
 8000986:	f000 fbe5 	bl	8001154 <update_led_buffer>
		}
		/* UART TRANSMIT END */
		break;
 800098a:	e1d0      	b.n	8000d2e <fsm_for_input_processing+0x872>
	case MODE4:
		/* UART TRANSMIT START */
		update_led_buffer(yellow_temp_dur);
 800098c:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <fsm_for_input_processing+0x55c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4618      	mov	r0, r3
 8000992:	f000 fbdf 	bl	8001154 <update_led_buffer>
		if(print==0){
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <fsm_for_input_processing+0x530>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d111      	bne.n	80009c2 <fsm_for_input_processing+0x506>
			HAL_UART_Transmit(huart, traffic_light_num,
			sprintf(traffic_light_num,"!7SEG:%d%d#\r\n",led_buffer1[0],led_buffer1[1]), 100);
 800099e:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <fsm_for_input_processing+0x534>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <fsm_for_input_processing+0x534>)
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	4913      	ldr	r1, [pc, #76]	; (80009f4 <fsm_for_input_processing+0x538>)
 80009a8:	4813      	ldr	r0, [pc, #76]	; (80009f8 <fsm_for_input_processing+0x53c>)
 80009aa:	f003 fbc9 	bl	8004140 <siprintf>
 80009ae:	4603      	mov	r3, r0
			HAL_UART_Transmit(huart, traffic_light_num,
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	2364      	movs	r3, #100	; 0x64
 80009b4:	4910      	ldr	r1, [pc, #64]	; (80009f8 <fsm_for_input_processing+0x53c>)
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f002 ff05 	bl	80037c6 <HAL_UART_Transmit>
			print=1;
 80009bc:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <fsm_for_input_processing+0x530>)
 80009be:	2201      	movs	r2, #1
 80009c0:	601a      	str	r2, [r3, #0]
		}
		/* UART TRANSMIT END */
		/* BLINK SINGLE YELLOW LED START */
		if(timer1_flag==1){
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <fsm_for_input_processing+0x540>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d133      	bne.n	8000a32 <fsm_for_input_processing+0x576>
			setTimer1(250);
 80009ca:	20fa      	movs	r0, #250	; 0xfa
 80009cc:	f7ff fbbe 	bl	800014c <setTimer1>
			if(led_state==0){
 80009d0:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <fsm_for_input_processing+0x544>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d121      	bne.n	8000a1c <fsm_for_input_processing+0x560>
				turnOnYellow1();
 80009d8:	f000 fb54 	bl	8001084 <turnOnYellow1>
				turnOnYellow2();
 80009dc:	f000 fb9a 	bl	8001114 <turnOnYellow2>
				led_state=1;
 80009e0:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <fsm_for_input_processing+0x544>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	e024      	b.n	8000a32 <fsm_for_input_processing+0x576>
 80009e8:	20000134 	.word	0x20000134
 80009ec:	20000174 	.word	0x20000174
 80009f0:	2000017c 	.word	0x2000017c
 80009f4:	08004a4c 	.word	0x08004a4c
 80009f8:	200000e8 	.word	0x200000e8
 80009fc:	200000c8 	.word	0x200000c8
 8000a00:	20000170 	.word	0x20000170
 8000a04:	20000160 	.word	0x20000160
 8000a08:	20000140 	.word	0x20000140
 8000a0c:	20000178 	.word	0x20000178
 8000a10:	20000164 	.word	0x20000164
 8000a14:	2000013c 	.word	0x2000013c
 8000a18:	20000138 	.word	0x20000138
			}else if(led_state==1){
 8000a1c:	4b9d      	ldr	r3, [pc, #628]	; (8000c94 <fsm_for_input_processing+0x7d8>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d106      	bne.n	8000a32 <fsm_for_input_processing+0x576>
				turnOff1();
 8000a24:	f000 fb42 	bl	80010ac <turnOff1>
				turnOff2();
 8000a28:	f000 fb84 	bl	8001134 <turnOff2>
				led_state=0;
 8000a2c:	4b99      	ldr	r3, [pc, #612]	; (8000c94 <fsm_for_input_processing+0x7d8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
			}
		}
		/* BLINK SINGLE GREEN LED END */

		/*EXECUTE INPUT BUTTON1 START */
		if(button1_executed==0){
 8000a32:	4b99      	ldr	r3, [pc, #612]	; (8000c98 <fsm_for_input_processing+0x7dc>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d113      	bne.n	8000a62 <fsm_for_input_processing+0x5a6>
			if(button1_pressed()==TRUE){
 8000a3a:	f7ff fcef 	bl	800041c <button1_pressed>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d11a      	bne.n	8000a7a <fsm_for_input_processing+0x5be>
				state=INIT;
 8000a44:	4b95      	ldr	r3, [pc, #596]	; (8000c9c <fsm_for_input_processing+0x7e0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
				button1_executed=1;
 8000a4a:	4b93      	ldr	r3, [pc, #588]	; (8000c98 <fsm_for_input_processing+0x7dc>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	601a      	str	r2, [r3, #0]
				setTimer1(0); //turn off or reset timer 1
 8000a50:	2000      	movs	r0, #0
 8000a52:	f7ff fb7b 	bl	800014c <setTimer1>
				turnOffSingleLed();
 8000a56:	f000 fa71 	bl	8000f3c <turnOffSingleLed>
				print=0;
 8000a5a:	4b91      	ldr	r3, [pc, #580]	; (8000ca0 <fsm_for_input_processing+0x7e4>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	e00b      	b.n	8000a7a <fsm_for_input_processing+0x5be>
			}
		}else if(button1_executed==1){
 8000a62:	4b8d      	ldr	r3, [pc, #564]	; (8000c98 <fsm_for_input_processing+0x7dc>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d107      	bne.n	8000a7a <fsm_for_input_processing+0x5be>
			if(button1_pressed()==FALSE){
 8000a6a:	f7ff fcd7 	bl	800041c <button1_pressed>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d102      	bne.n	8000a7a <fsm_for_input_processing+0x5be>
				button1_executed=0;
 8000a74:	4b88      	ldr	r3, [pc, #544]	; (8000c98 <fsm_for_input_processing+0x7dc>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
			}
		}
		/*EXECUTE INPUT BUTTON1 END */

		/*EXECUTE INPUT BUTTON3 START */
		if(button3_pressed()==TRUE){
 8000a7a:	f7ff fcff 	bl	800047c <button3_pressed>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d105      	bne.n	8000a90 <fsm_for_input_processing+0x5d4>
			state=UPDATE_DURATION;
 8000a84:	4b85      	ldr	r3, [pc, #532]	; (8000c9c <fsm_for_input_processing+0x7e0>)
 8000a86:	2207      	movs	r2, #7
 8000a88:	701a      	strb	r2, [r3, #0]
			LedToChange=YELLOW;
 8000a8a:	4b86      	ldr	r3, [pc, #536]	; (8000ca4 <fsm_for_input_processing+0x7e8>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	701a      	strb	r2, [r3, #0]
		}
		/*EXECUTE INPUT BUTTON3 END */

		/*EXECUTE INPUT BUTTON2 START */
		if(button2_pressed()==TRUE){
 8000a90:	f7ff fcd4 	bl	800043c <button2_pressed>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d108      	bne.n	8000aac <fsm_for_input_processing+0x5f0>
			state=INCREASE;
 8000a9a:	4b80      	ldr	r3, [pc, #512]	; (8000c9c <fsm_for_input_processing+0x7e0>)
 8000a9c:	2205      	movs	r2, #5
 8000a9e:	701a      	strb	r2, [r3, #0]
			LedToChange=YELLOW;
 8000aa0:	4b80      	ldr	r3, [pc, #512]	; (8000ca4 <fsm_for_input_processing+0x7e8>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	701a      	strb	r2, [r3, #0]
			button2_increase1=0;
 8000aa6:	4b80      	ldr	r3, [pc, #512]	; (8000ca8 <fsm_for_input_processing+0x7ec>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
		}
		/*EXECUTE INPUT BUTTON2 END */
		//TO DO
		/* UART TRANSMIT START */
		if(LedToChange==YELLOW){
 8000aac:	4b7d      	ldr	r3, [pc, #500]	; (8000ca4 <fsm_for_input_processing+0x7e8>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	f040 813e 	bne.w	8000d32 <fsm_for_input_processing+0x876>
			update_led_buffer(yellow_temp_dur);
 8000ab6:	4b7d      	ldr	r3, [pc, #500]	; (8000cac <fsm_for_input_processing+0x7f0>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 fb4a 	bl	8001154 <update_led_buffer>
		}
		/* UART TRANSMIT END */
		break;
 8000ac0:	e137      	b.n	8000d32 <fsm_for_input_processing+0x876>
	case INCREASE:
		/* BLINK SINGLE LED START */
		if(timer1_flag==1){
 8000ac2:	4b7b      	ldr	r3, [pc, #492]	; (8000cb0 <fsm_for_input_processing+0x7f4>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d107      	bne.n	8000ada <fsm_for_input_processing+0x61e>
			setTimer1(250);
 8000aca:	20fa      	movs	r0, #250	; 0xfa
 8000acc:	f7ff fb3e 	bl	800014c <setTimer1>
			ledBlinking(LedToChange);
 8000ad0:	4b74      	ldr	r3, [pc, #464]	; (8000ca4 <fsm_for_input_processing+0x7e8>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 fa39 	bl	8000f4c <ledBlinking>
		}
		/* BLINK SINGLE LED END */

		/* EXECUTE INPUT BUTTON2 START */
		if(button2_pressed_1s()==TRUE){
 8000ada:	f7ff fcbf 	bl	800045c <button2_pressed_1s>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d10a      	bne.n	8000afa <fsm_for_input_processing+0x63e>
			print=0;
 8000ae4:	4b6e      	ldr	r3, [pc, #440]	; (8000ca0 <fsm_for_input_processing+0x7e4>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
			state=INCREASE_500MS;
 8000aea:	4b6c      	ldr	r3, [pc, #432]	; (8000c9c <fsm_for_input_processing+0x7e0>)
 8000aec:	2206      	movs	r2, #6
 8000aee:	701a      	strb	r2, [r3, #0]
			setTimer3(500);
 8000af0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000af4:	f7ff fb5e 	bl	80001b4 <setTimer3>
 8000af8:	e01c      	b.n	8000b34 <fsm_for_input_processing+0x678>
		}else if(button2_pressed()==FALSE){
 8000afa:	f7ff fc9f 	bl	800043c <button2_pressed>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d116      	bne.n	8000b32 <fsm_for_input_processing+0x676>
			switch(LedToChange){
 8000b04:	4b67      	ldr	r3, [pc, #412]	; (8000ca4 <fsm_for_input_processing+0x7e8>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d00a      	beq.n	8000b22 <fsm_for_input_processing+0x666>
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	dc11      	bgt.n	8000b34 <fsm_for_input_processing+0x678>
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d002      	beq.n	8000b1a <fsm_for_input_processing+0x65e>
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d008      	beq.n	8000b2a <fsm_for_input_processing+0x66e>
 8000b18:	e00c      	b.n	8000b34 <fsm_for_input_processing+0x678>
				case RED:
					state=MODE2;
 8000b1a:	4b60      	ldr	r3, [pc, #384]	; (8000c9c <fsm_for_input_processing+0x7e0>)
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	701a      	strb	r2, [r3, #0]
					break;
 8000b20:	e008      	b.n	8000b34 <fsm_for_input_processing+0x678>
				case GREEN:
					state=MODE3;
 8000b22:	4b5e      	ldr	r3, [pc, #376]	; (8000c9c <fsm_for_input_processing+0x7e0>)
 8000b24:	2203      	movs	r2, #3
 8000b26:	701a      	strb	r2, [r3, #0]
					break;
 8000b28:	e004      	b.n	8000b34 <fsm_for_input_processing+0x678>
				case YELLOW:
					state=MODE4;
 8000b2a:	4b5c      	ldr	r3, [pc, #368]	; (8000c9c <fsm_for_input_processing+0x7e0>)
 8000b2c:	2204      	movs	r2, #4
 8000b2e:	701a      	strb	r2, [r3, #0]
					break;
 8000b30:	e000      	b.n	8000b34 <fsm_for_input_processing+0x678>
			}
		}
 8000b32:	bf00      	nop
		/* EXECUTE INPUT BUTTON2 START */

		/* INCREASE DURATION START */
		if(button2_increase1==0){
 8000b34:	4b5c      	ldr	r3, [pc, #368]	; (8000ca8 <fsm_for_input_processing+0x7ec>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	f040 80fc 	bne.w	8000d36 <fsm_for_input_processing+0x87a>
			increaseTempDur(LedToChange);
 8000b3e:	4b59      	ldr	r3, [pc, #356]	; (8000ca4 <fsm_for_input_processing+0x7e8>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 f906 	bl	8000d54 <increaseTempDur>
			button2_increase1=1;
 8000b48:	4b57      	ldr	r3, [pc, #348]	; (8000ca8 <fsm_for_input_processing+0x7ec>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	601a      	str	r2, [r3, #0]

		/* UART TRANSMIT START */
			switch(LedToChange){
 8000b4e:	4b55      	ldr	r3, [pc, #340]	; (8000ca4 <fsm_for_input_processing+0x7e8>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	d00c      	beq.n	8000b70 <fsm_for_input_processing+0x6b4>
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	dc16      	bgt.n	8000b88 <fsm_for_input_processing+0x6cc>
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d002      	beq.n	8000b64 <fsm_for_input_processing+0x6a8>
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d00c      	beq.n	8000b7c <fsm_for_input_processing+0x6c0>
 8000b62:	e011      	b.n	8000b88 <fsm_for_input_processing+0x6cc>
				case RED:
					update_led_buffer(red_temp_dur);
 8000b64:	4b53      	ldr	r3, [pc, #332]	; (8000cb4 <fsm_for_input_processing+0x7f8>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f000 faf3 	bl	8001154 <update_led_buffer>
					break;
 8000b6e:	e00b      	b.n	8000b88 <fsm_for_input_processing+0x6cc>
				case GREEN:
					update_led_buffer(green_temp_dur);
 8000b70:	4b51      	ldr	r3, [pc, #324]	; (8000cb8 <fsm_for_input_processing+0x7fc>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f000 faed 	bl	8001154 <update_led_buffer>
					break;
 8000b7a:	e005      	b.n	8000b88 <fsm_for_input_processing+0x6cc>
				case YELLOW:
					update_led_buffer(yellow_temp_dur);
 8000b7c:	4b4b      	ldr	r3, [pc, #300]	; (8000cac <fsm_for_input_processing+0x7f0>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 fae7 	bl	8001154 <update_led_buffer>
					break;
 8000b86:	bf00      	nop
			}
			HAL_UART_Transmit(huart, traffic_light_num,
			sprintf(traffic_light_num,"!7SEG:%d%d#\r\n",led_buffer1[0],led_buffer1[1]), 100);
 8000b88:	4b4c      	ldr	r3, [pc, #304]	; (8000cbc <fsm_for_input_processing+0x800>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	4b4b      	ldr	r3, [pc, #300]	; (8000cbc <fsm_for_input_processing+0x800>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	494b      	ldr	r1, [pc, #300]	; (8000cc0 <fsm_for_input_processing+0x804>)
 8000b92:	484c      	ldr	r0, [pc, #304]	; (8000cc4 <fsm_for_input_processing+0x808>)
 8000b94:	f003 fad4 	bl	8004140 <siprintf>
 8000b98:	4603      	mov	r3, r0
			HAL_UART_Transmit(huart, traffic_light_num,
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	2364      	movs	r3, #100	; 0x64
 8000b9e:	4949      	ldr	r1, [pc, #292]	; (8000cc4 <fsm_for_input_processing+0x808>)
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f002 fe10 	bl	80037c6 <HAL_UART_Transmit>
		}
		/* UART TRANSMIT END */
		/* INCREASE DURATION END */
		//TO DO
		break;
 8000ba6:	e0c6      	b.n	8000d36 <fsm_for_input_processing+0x87a>
	case INCREASE_500MS:
		/* BLINK SINGLE LED START */
		if(timer1_flag==1){
 8000ba8:	4b41      	ldr	r3, [pc, #260]	; (8000cb0 <fsm_for_input_processing+0x7f4>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d107      	bne.n	8000bc0 <fsm_for_input_processing+0x704>
			setTimer1(250);
 8000bb0:	20fa      	movs	r0, #250	; 0xfa
 8000bb2:	f7ff facb 	bl	800014c <setTimer1>
			ledBlinking(LedToChange);
 8000bb6:	4b3b      	ldr	r3, [pc, #236]	; (8000ca4 <fsm_for_input_processing+0x7e8>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 f9c6 	bl	8000f4c <ledBlinking>
		}
		/* BLINK SINGLE LED END */

		/* EXECUTE INPUT BUTTON2 START */
		if(button2_pressed()==FALSE){
 8000bc0:	f7ff fc3c 	bl	800043c <button2_pressed>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d116      	bne.n	8000bf8 <fsm_for_input_processing+0x73c>
			switch(LedToChange){
 8000bca:	4b36      	ldr	r3, [pc, #216]	; (8000ca4 <fsm_for_input_processing+0x7e8>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	d00a      	beq.n	8000be8 <fsm_for_input_processing+0x72c>
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	dc11      	bgt.n	8000bfa <fsm_for_input_processing+0x73e>
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d002      	beq.n	8000be0 <fsm_for_input_processing+0x724>
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d008      	beq.n	8000bf0 <fsm_for_input_processing+0x734>
 8000bde:	e00c      	b.n	8000bfa <fsm_for_input_processing+0x73e>
				case RED:
					state=MODE2;
 8000be0:	4b2e      	ldr	r3, [pc, #184]	; (8000c9c <fsm_for_input_processing+0x7e0>)
 8000be2:	2202      	movs	r2, #2
 8000be4:	701a      	strb	r2, [r3, #0]
					break;
 8000be6:	e008      	b.n	8000bfa <fsm_for_input_processing+0x73e>
				case GREEN:
					state=MODE3;
 8000be8:	4b2c      	ldr	r3, [pc, #176]	; (8000c9c <fsm_for_input_processing+0x7e0>)
 8000bea:	2203      	movs	r2, #3
 8000bec:	701a      	strb	r2, [r3, #0]
					break;
 8000bee:	e004      	b.n	8000bfa <fsm_for_input_processing+0x73e>
				case YELLOW:
					state=MODE4;
 8000bf0:	4b2a      	ldr	r3, [pc, #168]	; (8000c9c <fsm_for_input_processing+0x7e0>)
 8000bf2:	2204      	movs	r2, #4
 8000bf4:	701a      	strb	r2, [r3, #0]
					break;
 8000bf6:	e000      	b.n	8000bfa <fsm_for_input_processing+0x73e>
			}
		}
 8000bf8:	bf00      	nop
		/* EXECUTE INPUT BUTTON2 START */

		/* INCREASE TEMP DURATION START */
		if(timer3_flag==1){
 8000bfa:	4b33      	ldr	r3, [pc, #204]	; (8000cc8 <fsm_for_input_processing+0x80c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d134      	bne.n	8000c6c <fsm_for_input_processing+0x7b0>
			setTimer3(500);
 8000c02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c06:	f7ff fad5 	bl	80001b4 <setTimer3>
			increaseTempDur(LedToChange);
 8000c0a:	4b26      	ldr	r3, [pc, #152]	; (8000ca4 <fsm_for_input_processing+0x7e8>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 f8a0 	bl	8000d54 <increaseTempDur>
			/* UART TRANSMIT START */
				switch(LedToChange){
 8000c14:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <fsm_for_input_processing+0x7e8>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d00c      	beq.n	8000c36 <fsm_for_input_processing+0x77a>
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	dc16      	bgt.n	8000c4e <fsm_for_input_processing+0x792>
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d002      	beq.n	8000c2a <fsm_for_input_processing+0x76e>
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d00c      	beq.n	8000c42 <fsm_for_input_processing+0x786>
 8000c28:	e011      	b.n	8000c4e <fsm_for_input_processing+0x792>
					case RED:
						update_led_buffer(red_temp_dur);
 8000c2a:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <fsm_for_input_processing+0x7f8>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 fa90 	bl	8001154 <update_led_buffer>
						break;
 8000c34:	e00b      	b.n	8000c4e <fsm_for_input_processing+0x792>
					case GREEN:
						update_led_buffer(green_temp_dur);
 8000c36:	4b20      	ldr	r3, [pc, #128]	; (8000cb8 <fsm_for_input_processing+0x7fc>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 fa8a 	bl	8001154 <update_led_buffer>
						break;
 8000c40:	e005      	b.n	8000c4e <fsm_for_input_processing+0x792>
					case YELLOW:
						update_led_buffer(yellow_temp_dur);
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <fsm_for_input_processing+0x7f0>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 fa84 	bl	8001154 <update_led_buffer>
						break;
 8000c4c:	bf00      	nop
				}
				HAL_UART_Transmit(huart, traffic_light_num,
				sprintf(traffic_light_num,"!7SEG:%d%d#\r\n",led_buffer1[0],led_buffer1[1]), 100);
 8000c4e:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <fsm_for_input_processing+0x800>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <fsm_for_input_processing+0x800>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	491a      	ldr	r1, [pc, #104]	; (8000cc0 <fsm_for_input_processing+0x804>)
 8000c58:	481a      	ldr	r0, [pc, #104]	; (8000cc4 <fsm_for_input_processing+0x808>)
 8000c5a:	f003 fa71 	bl	8004140 <siprintf>
 8000c5e:	4603      	mov	r3, r0
				HAL_UART_Transmit(huart, traffic_light_num,
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	2364      	movs	r3, #100	; 0x64
 8000c64:	4917      	ldr	r1, [pc, #92]	; (8000cc4 <fsm_for_input_processing+0x808>)
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f002 fdad 	bl	80037c6 <HAL_UART_Transmit>
			/* UART TRANSMIT END */

		/* INCREASE TEMP DURATION END */
		//TO DO
		/* UART TRANSMIT START */
		if(LedToChange==RED){
 8000c6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <fsm_for_input_processing+0x7e8>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d105      	bne.n	8000c80 <fsm_for_input_processing+0x7c4>
			update_led_buffer(red_temp_dur);
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <fsm_for_input_processing+0x7f8>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 fa6b 	bl	8001154 <update_led_buffer>
		}else if(LedToChange==YELLOW){
			update_led_buffer(yellow_temp_dur);
		}

		/* UART TRANSMIT END */
		break;
 8000c7e:	e05c      	b.n	8000d3a <fsm_for_input_processing+0x87e>
		}else if(LedToChange==GREEN){
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <fsm_for_input_processing+0x7e8>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d121      	bne.n	8000ccc <fsm_for_input_processing+0x810>
			update_led_buffer(green_temp_dur);
 8000c88:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <fsm_for_input_processing+0x7fc>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 fa61 	bl	8001154 <update_led_buffer>
		break;
 8000c92:	e052      	b.n	8000d3a <fsm_for_input_processing+0x87e>
 8000c94:	20000170 	.word	0x20000170
 8000c98:	20000160 	.word	0x20000160
 8000c9c:	20000140 	.word	0x20000140
 8000ca0:	20000174 	.word	0x20000174
 8000ca4:	20000178 	.word	0x20000178
 8000ca8:	20000164 	.word	0x20000164
 8000cac:	20000138 	.word	0x20000138
 8000cb0:	200000c8 	.word	0x200000c8
 8000cb4:	20000134 	.word	0x20000134
 8000cb8:	2000013c 	.word	0x2000013c
 8000cbc:	2000017c 	.word	0x2000017c
 8000cc0:	08004a4c 	.word	0x08004a4c
 8000cc4:	200000e8 	.word	0x200000e8
 8000cc8:	200000d8 	.word	0x200000d8
		}else if(LedToChange==YELLOW){
 8000ccc:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <fsm_for_input_processing+0x88c>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d132      	bne.n	8000d3a <fsm_for_input_processing+0x87e>
			update_led_buffer(yellow_temp_dur);
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <fsm_for_input_processing+0x890>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 fa3b 	bl	8001154 <update_led_buffer>
		break;
 8000cde:	e02c      	b.n	8000d3a <fsm_for_input_processing+0x87e>
	case UPDATE_DURATION:
		updateDuration(LedToChange);
 8000ce0:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <fsm_for_input_processing+0x88c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 f87b 	bl	8000de0 <updateDuration>
		if(button3_pressed()==FALSE){
 8000cea:	f7ff fbc7 	bl	800047c <button3_pressed>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d116      	bne.n	8000d22 <fsm_for_input_processing+0x866>
			switch(LedToChange){
 8000cf4:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <fsm_for_input_processing+0x88c>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d00a      	beq.n	8000d12 <fsm_for_input_processing+0x856>
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	dc1e      	bgt.n	8000d3e <fsm_for_input_processing+0x882>
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d002      	beq.n	8000d0a <fsm_for_input_processing+0x84e>
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d008      	beq.n	8000d1a <fsm_for_input_processing+0x85e>
					state=MODE4;
					break;
			}
		}
		//TO DO
		break;
 8000d08:	e019      	b.n	8000d3e <fsm_for_input_processing+0x882>
					state=MODE2;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <fsm_for_input_processing+0x894>)
 8000d0c:	2202      	movs	r2, #2
 8000d0e:	701a      	strb	r2, [r3, #0]
					break;
 8000d10:	e008      	b.n	8000d24 <fsm_for_input_processing+0x868>
					state=MODE3;
 8000d12:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <fsm_for_input_processing+0x894>)
 8000d14:	2203      	movs	r2, #3
 8000d16:	701a      	strb	r2, [r3, #0]
					break;
 8000d18:	e004      	b.n	8000d24 <fsm_for_input_processing+0x868>
					state=MODE4;
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <fsm_for_input_processing+0x894>)
 8000d1c:	2204      	movs	r2, #4
 8000d1e:	701a      	strb	r2, [r3, #0]
					break;
 8000d20:	e000      	b.n	8000d24 <fsm_for_input_processing+0x868>
		}
 8000d22:	bf00      	nop
		break;
 8000d24:	e00b      	b.n	8000d3e <fsm_for_input_processing+0x882>
		break;
 8000d26:	bf00      	nop
 8000d28:	e00a      	b.n	8000d40 <fsm_for_input_processing+0x884>
		break;
 8000d2a:	bf00      	nop
 8000d2c:	e008      	b.n	8000d40 <fsm_for_input_processing+0x884>
		break;
 8000d2e:	bf00      	nop
 8000d30:	e006      	b.n	8000d40 <fsm_for_input_processing+0x884>
		break;
 8000d32:	bf00      	nop
 8000d34:	e004      	b.n	8000d40 <fsm_for_input_processing+0x884>
		break;
 8000d36:	bf00      	nop
 8000d38:	e002      	b.n	8000d40 <fsm_for_input_processing+0x884>
		break;
 8000d3a:	bf00      	nop
 8000d3c:	e000      	b.n	8000d40 <fsm_for_input_processing+0x884>
		break;
 8000d3e:	bf00      	nop
	}
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000178 	.word	0x20000178
 8000d4c:	20000138 	.word	0x20000138
 8000d50:	20000140 	.word	0x20000140

08000d54 <increaseTempDur>:


void increaseTempDur(enum LED color){
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
	switch(color){
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d020      	beq.n	8000da6 <increaseTempDur+0x52>
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	dc30      	bgt.n	8000dca <increaseTempDur+0x76>
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d002      	beq.n	8000d72 <increaseTempDur+0x1e>
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d00d      	beq.n	8000d8c <increaseTempDur+0x38>
			green_temp_dur++;
			if(red_temp_dur>99)
				green_temp_dur=1;
			break;
	}
}
 8000d70:	e02b      	b.n	8000dca <increaseTempDur+0x76>
			red_temp_dur++;
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <increaseTempDur+0x80>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	3301      	adds	r3, #1
 8000d78:	4a16      	ldr	r2, [pc, #88]	; (8000dd4 <increaseTempDur+0x80>)
 8000d7a:	6013      	str	r3, [r2, #0]
			if(red_temp_dur>99)
 8000d7c:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <increaseTempDur+0x80>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b63      	cmp	r3, #99	; 0x63
 8000d82:	dd1d      	ble.n	8000dc0 <increaseTempDur+0x6c>
				red_temp_dur=1;
 8000d84:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <increaseTempDur+0x80>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	601a      	str	r2, [r3, #0]
			break;
 8000d8a:	e019      	b.n	8000dc0 <increaseTempDur+0x6c>
			yellow_temp_dur++;
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <increaseTempDur+0x84>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	3301      	adds	r3, #1
 8000d92:	4a11      	ldr	r2, [pc, #68]	; (8000dd8 <increaseTempDur+0x84>)
 8000d94:	6013      	str	r3, [r2, #0]
			if(yellow_temp_dur>99)
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <increaseTempDur+0x84>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b63      	cmp	r3, #99	; 0x63
 8000d9c:	dd12      	ble.n	8000dc4 <increaseTempDur+0x70>
				yellow_temp_dur=1;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <increaseTempDur+0x84>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	601a      	str	r2, [r3, #0]
			break;
 8000da4:	e00e      	b.n	8000dc4 <increaseTempDur+0x70>
			green_temp_dur++;
 8000da6:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <increaseTempDur+0x88>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	3301      	adds	r3, #1
 8000dac:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <increaseTempDur+0x88>)
 8000dae:	6013      	str	r3, [r2, #0]
			if(red_temp_dur>99)
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <increaseTempDur+0x80>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b63      	cmp	r3, #99	; 0x63
 8000db6:	dd07      	ble.n	8000dc8 <increaseTempDur+0x74>
				green_temp_dur=1;
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <increaseTempDur+0x88>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	601a      	str	r2, [r3, #0]
			break;
 8000dbe:	e003      	b.n	8000dc8 <increaseTempDur+0x74>
			break;
 8000dc0:	bf00      	nop
 8000dc2:	e002      	b.n	8000dca <increaseTempDur+0x76>
			break;
 8000dc4:	bf00      	nop
 8000dc6:	e000      	b.n	8000dca <increaseTempDur+0x76>
			break;
 8000dc8:	bf00      	nop
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr
 8000dd4:	20000134 	.word	0x20000134
 8000dd8:	20000138 	.word	0x20000138
 8000ddc:	2000013c 	.word	0x2000013c

08000de0 <updateDuration>:

void updateDuration(enum LED color){
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
	switch(color){
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d010      	beq.n	8000e12 <updateDuration+0x32>
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	dc13      	bgt.n	8000e1c <updateDuration+0x3c>
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d002      	beq.n	8000dfe <updateDuration+0x1e>
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d005      	beq.n	8000e08 <updateDuration+0x28>
			break;
		case GREEN:
			GREEN_DURATION=green_temp_dur;
			break;
	}
}
 8000dfc:	e00e      	b.n	8000e1c <updateDuration+0x3c>
			RED_DURATION=red_temp_dur;
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <updateDuration+0x48>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <updateDuration+0x4c>)
 8000e04:	6013      	str	r3, [r2, #0]
			break;
 8000e06:	e009      	b.n	8000e1c <updateDuration+0x3c>
			YELLOW_DURATION=yellow_temp_dur;
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <updateDuration+0x50>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a09      	ldr	r2, [pc, #36]	; (8000e34 <updateDuration+0x54>)
 8000e0e:	6013      	str	r3, [r2, #0]
			break;
 8000e10:	e004      	b.n	8000e1c <updateDuration+0x3c>
			GREEN_DURATION=green_temp_dur;
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <updateDuration+0x58>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a09      	ldr	r2, [pc, #36]	; (8000e3c <updateDuration+0x5c>)
 8000e18:	6013      	str	r3, [r2, #0]
			break;
 8000e1a:	bf00      	nop
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000134 	.word	0x20000134
 8000e2c:	20000120 	.word	0x20000120
 8000e30:	20000138 	.word	0x20000138
 8000e34:	20000124 	.word	0x20000124
 8000e38:	2000013c 	.word	0x2000013c
 8000e3c:	20000128 	.word	0x20000128

08000e40 <displaySingleLedsMode1>:



void displaySingleLedsMode1(){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	if(current_led_way1==RED){
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <displaySingleLedsMode1+0x50>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d101      	bne.n	8000e50 <displaySingleLedsMode1+0x10>
		turnOnRed1();  // TURN ON RED LED
 8000e4c:	f000 f906 	bl	800105c <turnOnRed1>
	}
	if(current_led_way1==GREEN){
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <displaySingleLedsMode1+0x50>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d101      	bne.n	8000e5c <displaySingleLedsMode1+0x1c>
		turnOnGreen1();  // TURN ON GREEN LED
 8000e58:	f000 f8ec 	bl	8001034 <turnOnGreen1>
	}
	if(current_led_way1==YELLOW){
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <displaySingleLedsMode1+0x50>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d101      	bne.n	8000e68 <displaySingleLedsMode1+0x28>
		turnOnYellow1();  // TURN ON YELLOW LED
 8000e64:	f000 f90e 	bl	8001084 <turnOnYellow1>
	}

	if(current_led_way2==RED){
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <displaySingleLedsMode1+0x54>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d101      	bne.n	8000e74 <displaySingleLedsMode1+0x34>
		turnOnRed2();  // TURN ON RED LED
 8000e70:	f000 f940 	bl	80010f4 <turnOnRed2>
	}
	if(current_led_way2==GREEN){
 8000e74:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <displaySingleLedsMode1+0x54>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d101      	bne.n	8000e80 <displaySingleLedsMode1+0x40>
		turnOnGreen2();  // TURN ON GREEN LED
 8000e7c:	f000 f92a 	bl	80010d4 <turnOnGreen2>
	}
	if(current_led_way2==YELLOW){
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <displaySingleLedsMode1+0x54>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d101      	bne.n	8000e8c <displaySingleLedsMode1+0x4c>
		turnOnYellow2();  // TURN ON YELLOW LED
 8000e88:	f000 f944 	bl	8001114 <turnOnYellow2>
	}
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000141 	.word	0x20000141
 8000e94:	20000150 	.word	0x20000150

08000e98 <trafficLightCount>:

void trafficLightCount(int*leds_count,enum LED*current_led){
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
	if(*current_led==RED){
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d110      	bne.n	8000ecc <trafficLightCount+0x34>
		leds_count[0]--;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	1e5a      	subs	r2, r3, #1
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	601a      	str	r2, [r3, #0]
		if(leds_count[0]<=0){
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	dc34      	bgt.n	8000f26 <trafficLightCount+0x8e>
			leds_count[0]=RED_DURATION;
 8000ebc:	4b1c      	ldr	r3, [pc, #112]	; (8000f30 <trafficLightCount+0x98>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	601a      	str	r2, [r3, #0]
			*current_led=GREEN;
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	701a      	strb	r2, [r3, #0]
		if(leds_count[2]<=0){
			leds_count[2]=YELLOW_DURATION;
			*current_led=RED;
		}
	}
}
 8000eca:	e02c      	b.n	8000f26 <trafficLightCount+0x8e>
	else if(*current_led==GREEN){
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d112      	bne.n	8000efa <trafficLightCount+0x62>
		leds_count[1]--;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3304      	adds	r3, #4
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	3a01      	subs	r2, #1
 8000edc:	601a      	str	r2, [r3, #0]
		if(leds_count[1]<=0){
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	3304      	adds	r3, #4
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	dc1e      	bgt.n	8000f26 <trafficLightCount+0x8e>
			leds_count[1]=GREEN_DURATION;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3304      	adds	r3, #4
 8000eec:	4a11      	ldr	r2, [pc, #68]	; (8000f34 <trafficLightCount+0x9c>)
 8000eee:	6812      	ldr	r2, [r2, #0]
 8000ef0:	601a      	str	r2, [r3, #0]
			*current_led=YELLOW;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	701a      	strb	r2, [r3, #0]
}
 8000ef8:	e015      	b.n	8000f26 <trafficLightCount+0x8e>
	else if(*current_led==YELLOW){
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d111      	bne.n	8000f26 <trafficLightCount+0x8e>
		leds_count[2]--;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	3308      	adds	r3, #8
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	3a01      	subs	r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]
		if(leds_count[2]<=0){
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3308      	adds	r3, #8
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	dc07      	bgt.n	8000f26 <trafficLightCount+0x8e>
			leds_count[2]=YELLOW_DURATION;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	3308      	adds	r3, #8
 8000f1a:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <trafficLightCount+0xa0>)
 8000f1c:	6812      	ldr	r2, [r2, #0]
 8000f1e:	601a      	str	r2, [r3, #0]
			*current_led=RED;
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	2200      	movs	r2, #0
 8000f24:	701a      	strb	r2, [r3, #0]
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	20000120 	.word	0x20000120
 8000f34:	20000128 	.word	0x20000128
 8000f38:	20000124 	.word	0x20000124

08000f3c <turnOffSingleLed>:

void turnOffSingleLed(){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	turnOff1();
 8000f40:	f000 f8b4 	bl	80010ac <turnOff1>
	turnOff2();
 8000f44:	f000 f8f6 	bl	8001134 <turnOff2>
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <ledBlinking>:

void ledBlinking(enum LED led_to_change){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
	if(led_state==0){
 8000f56:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <ledBlinking+0x6c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d11c      	bne.n	8000f98 <ledBlinking+0x4c>
		switch(led_to_change){
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d010      	beq.n	8000f86 <ledBlinking+0x3a>
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	dc13      	bgt.n	8000f90 <ledBlinking+0x44>
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d002      	beq.n	8000f72 <ledBlinking+0x26>
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d005      	beq.n	8000f7c <ledBlinking+0x30>
 8000f70:	e00e      	b.n	8000f90 <ledBlinking+0x44>
		case RED:
			turnOnRed1();
 8000f72:	f000 f873 	bl	800105c <turnOnRed1>
			turnOnRed2();
 8000f76:	f000 f8bd 	bl	80010f4 <turnOnRed2>
			break;
 8000f7a:	e009      	b.n	8000f90 <ledBlinking+0x44>
		case YELLOW:
			turnOnYellow1();
 8000f7c:	f000 f882 	bl	8001084 <turnOnYellow1>
			turnOnYellow2();
 8000f80:	f000 f8c8 	bl	8001114 <turnOnYellow2>
			break;
 8000f84:	e004      	b.n	8000f90 <ledBlinking+0x44>
		case GREEN:
			turnOnGreen1();
 8000f86:	f000 f855 	bl	8001034 <turnOnGreen1>
			turnOnGreen2();
 8000f8a:	f000 f8a3 	bl	80010d4 <turnOnGreen2>
			break;
 8000f8e:	bf00      	nop
		}
		led_state=1;
 8000f90:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <ledBlinking+0x6c>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	601a      	str	r2, [r3, #0]
		turnOff1();
		turnOff2();
		led_state=0;
	}

}
 8000f96:	e00a      	b.n	8000fae <ledBlinking+0x62>
	}else if(led_state==1){
 8000f98:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <ledBlinking+0x6c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d106      	bne.n	8000fae <ledBlinking+0x62>
		turnOff1();
 8000fa0:	f000 f884 	bl	80010ac <turnOff1>
		turnOff2();
 8000fa4:	f000 f8c6 	bl	8001134 <turnOff2>
		led_state=0;
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <ledBlinking+0x6c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000170 	.word	0x20000170

08000fbc <PES_LED_ON>:

void PES_LED_ON(){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <PES_LED_ON+0x20>)
 8000fc8:	f001 f81f 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 1);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fd2:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <PES_LED_ON+0x24>)
 8000fd4:	f001 f819 	bl	800200a <HAL_GPIO_WritePin>
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40010c00 	.word	0x40010c00
 8000fe0:	40010800 	.word	0x40010800

08000fe4 <PES_LED_RED>:
void PES_LED_RED(){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fee:	4805      	ldr	r0, [pc, #20]	; (8001004 <PES_LED_RED+0x20>)
 8000ff0:	f001 f80b 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ffa:	4803      	ldr	r0, [pc, #12]	; (8001008 <PES_LED_RED+0x24>)
 8000ffc:	f001 f805 	bl	800200a <HAL_GPIO_WritePin>
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40010c00 	.word	0x40010c00
 8001008:	40010800 	.word	0x40010800

0800100c <PES_LED_OFF>:
void PES_LED_OFF(){
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8001010:	2200      	movs	r2, #0
 8001012:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001016:	4805      	ldr	r0, [pc, #20]	; (800102c <PES_LED_OFF+0x20>)
 8001018:	f000 fff7 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 0);
 800101c:	2200      	movs	r2, #0
 800101e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001022:	4803      	ldr	r0, [pc, #12]	; (8001030 <PES_LED_OFF+0x24>)
 8001024:	f000 fff1 	bl	800200a <HAL_GPIO_WritePin>
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40010c00 	.word	0x40010c00
 8001030:	40010800 	.word	0x40010800

08001034 <turnOnGreen1>:
void turnOnGreen1(){
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
 8001038:	2200      	movs	r2, #0
 800103a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <turnOnGreen1+0x20>)
 8001040:	f000 ffe3 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 8001044:	2201      	movs	r2, #1
 8001046:	2108      	movs	r1, #8
 8001048:	4803      	ldr	r0, [pc, #12]	; (8001058 <turnOnGreen1+0x24>)
 800104a:	f000 ffde 	bl	800200a <HAL_GPIO_WritePin>
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40010800 	.word	0x40010800
 8001058:	40010c00 	.word	0x40010c00

0800105c <turnOnRed1>:
void turnOnRed1(){
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 8001060:	2201      	movs	r2, #1
 8001062:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <turnOnRed1+0x20>)
 8001068:	f000 ffcf 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 800106c:	2200      	movs	r2, #0
 800106e:	2108      	movs	r1, #8
 8001070:	4803      	ldr	r0, [pc, #12]	; (8001080 <turnOnRed1+0x24>)
 8001072:	f000 ffca 	bl	800200a <HAL_GPIO_WritePin>
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40010800 	.word	0x40010800
 8001080:	40010c00 	.word	0x40010c00

08001084 <turnOnYellow1>:
void turnOnYellow1(){
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <turnOnYellow1+0x20>)
 8001090:	f000 ffbb 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 8001094:	2201      	movs	r2, #1
 8001096:	2108      	movs	r1, #8
 8001098:	4803      	ldr	r0, [pc, #12]	; (80010a8 <turnOnYellow1+0x24>)
 800109a:	f000 ffb6 	bl	800200a <HAL_GPIO_WritePin>
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40010800 	.word	0x40010800
 80010a8:	40010c00 	.word	0x40010c00

080010ac <turnOff1>:
void turnOff1(){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
 80010b0:	2200      	movs	r2, #0
 80010b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <turnOff1+0x20>)
 80010b8:	f000 ffa7 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 80010bc:	2200      	movs	r2, #0
 80010be:	2108      	movs	r1, #8
 80010c0:	4803      	ldr	r0, [pc, #12]	; (80010d0 <turnOff1+0x24>)
 80010c2:	f000 ffa2 	bl	800200a <HAL_GPIO_WritePin>
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40010800 	.word	0x40010800
 80010d0:	40010c00 	.word	0x40010c00

080010d4 <turnOnGreen2>:
void turnOnGreen2(){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	2120      	movs	r1, #32
 80010dc:	4804      	ldr	r0, [pc, #16]	; (80010f0 <turnOnGreen2+0x1c>)
 80010de:	f000 ff94 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 80010e2:	2201      	movs	r2, #1
 80010e4:	2110      	movs	r1, #16
 80010e6:	4802      	ldr	r0, [pc, #8]	; (80010f0 <turnOnGreen2+0x1c>)
 80010e8:	f000 ff8f 	bl	800200a <HAL_GPIO_WritePin>
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40010c00 	.word	0x40010c00

080010f4 <turnOnRed2>:
void turnOnRed2(){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 80010f8:	2201      	movs	r2, #1
 80010fa:	2120      	movs	r1, #32
 80010fc:	4804      	ldr	r0, [pc, #16]	; (8001110 <turnOnRed2+0x1c>)
 80010fe:	f000 ff84 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2110      	movs	r1, #16
 8001106:	4802      	ldr	r0, [pc, #8]	; (8001110 <turnOnRed2+0x1c>)
 8001108:	f000 ff7f 	bl	800200a <HAL_GPIO_WritePin>
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40010c00 	.word	0x40010c00

08001114 <turnOnYellow2>:
void turnOnYellow2(){
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 8001118:	2201      	movs	r2, #1
 800111a:	2120      	movs	r1, #32
 800111c:	4804      	ldr	r0, [pc, #16]	; (8001130 <turnOnYellow2+0x1c>)
 800111e:	f000 ff74 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8001122:	2201      	movs	r2, #1
 8001124:	2110      	movs	r1, #16
 8001126:	4802      	ldr	r0, [pc, #8]	; (8001130 <turnOnYellow2+0x1c>)
 8001128:	f000 ff6f 	bl	800200a <HAL_GPIO_WritePin>
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40010c00 	.word	0x40010c00

08001134 <turnOff2>:
void turnOff2(){
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8001138:	2200      	movs	r2, #0
 800113a:	2120      	movs	r1, #32
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <turnOff2+0x1c>)
 800113e:	f000 ff64 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2110      	movs	r1, #16
 8001146:	4802      	ldr	r0, [pc, #8]	; (8001150 <turnOff2+0x1c>)
 8001148:	f000 ff5f 	bl	800200a <HAL_GPIO_WritePin>
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40010c00 	.word	0x40010c00

08001154 <update_led_buffer>:
void update_led_buffer(int val){
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	led_buffer1[0]=val/10;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a0d      	ldr	r2, [pc, #52]	; (8001194 <update_led_buffer+0x40>)
 8001160:	fb82 1203 	smull	r1, r2, r2, r3
 8001164:	1092      	asrs	r2, r2, #2
 8001166:	17db      	asrs	r3, r3, #31
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <update_led_buffer+0x44>)
 800116c:	6013      	str	r3, [r2, #0]
	led_buffer1[1]=val%10;
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <update_led_buffer+0x40>)
 8001172:	fb83 2301 	smull	r2, r3, r3, r1
 8001176:	109a      	asrs	r2, r3, #2
 8001178:	17cb      	asrs	r3, r1, #31
 800117a:	1ad2      	subs	r2, r2, r3
 800117c:	4613      	mov	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	1aca      	subs	r2, r1, r3
 8001186:	4b04      	ldr	r3, [pc, #16]	; (8001198 <update_led_buffer+0x44>)
 8001188:	605a      	str	r2, [r3, #4]
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	66666667 	.word	0x66666667
 8001198:	2000017c 	.word	0x2000017c

0800119c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a0:	f000 fb78 	bl	8001894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a4:	f000 f82a 	bl	80011fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a8:	f000 f950 	bl	800144c <MX_GPIO_Init>
  MX_TIM3_Init();
 80011ac:	f000 f8ae 	bl	800130c <MX_TIM3_Init>
  MX_TIM2_Init();
 80011b0:	f000 f860 	bl	8001274 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80011b4:	f000 f920 	bl	80013f8 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 80011b8:	480a      	ldr	r0, [pc, #40]	; (80011e4 <main+0x48>)
 80011ba:	f001 fba9 	bl	8002910 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011be:	2100      	movs	r1, #0
 80011c0:	4809      	ldr	r0, [pc, #36]	; (80011e8 <main+0x4c>)
 80011c2:	f001 fc4f 	bl	8002a64 <HAL_TIM_PWM_Start>
  RED_DURATION=5;
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <main+0x50>)
 80011c8:	2205      	movs	r2, #5
 80011ca:	601a      	str	r2, [r3, #0]
  YELLOW_DURATION=2;
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <main+0x54>)
 80011ce:	2202      	movs	r2, #2
 80011d0:	601a      	str	r2, [r3, #0]
  GREEN_DURATION=3;
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <main+0x58>)
 80011d4:	2203      	movs	r2, #3
 80011d6:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  fsm_for_input_processing(&huart2, &htim3);
 80011d8:	4903      	ldr	r1, [pc, #12]	; (80011e8 <main+0x4c>)
 80011da:	4807      	ldr	r0, [pc, #28]	; (80011f8 <main+0x5c>)
 80011dc:	f7ff f96e 	bl	80004bc <fsm_for_input_processing>
 80011e0:	e7fa      	b.n	80011d8 <main+0x3c>
 80011e2:	bf00      	nop
 80011e4:	20000184 	.word	0x20000184
 80011e8:	200001cc 	.word	0x200001cc
 80011ec:	20000120 	.word	0x20000120
 80011f0:	20000124 	.word	0x20000124
 80011f4:	20000128 	.word	0x20000128
 80011f8:	20000214 	.word	0x20000214

080011fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b090      	sub	sp, #64	; 0x40
 8001200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001202:	f107 0318 	add.w	r3, r7, #24
 8001206:	2228      	movs	r2, #40	; 0x28
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f002 ff90 	bl	8004130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800121e:	2302      	movs	r3, #2
 8001220:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001222:	2301      	movs	r3, #1
 8001224:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001226:	2310      	movs	r3, #16
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800122a:	2300      	movs	r3, #0
 800122c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800122e:	f107 0318 	add.w	r3, r7, #24
 8001232:	4618      	mov	r0, r3
 8001234:	f000 ff02 	bl	800203c <HAL_RCC_OscConfig>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800123e:	f000 f985 	bl	800154c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001242:	230f      	movs	r3, #15
 8001244:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001246:	2300      	movs	r3, #0
 8001248:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f001 f970 	bl	8002540 <HAL_RCC_ClockConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001266:	f000 f971 	bl	800154c <Error_Handler>
  }
}
 800126a:	bf00      	nop
 800126c:	3740      	adds	r7, #64	; 0x40
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127a:	f107 0308 	add.w	r3, r7, #8
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001288:	463b      	mov	r3, r7
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001290:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <MX_TIM2_Init+0x94>)
 8001292:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001296:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001298:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <MX_TIM2_Init+0x94>)
 800129a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800129e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a0:	4b19      	ldr	r3, [pc, #100]	; (8001308 <MX_TIM2_Init+0x94>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80012a6:	4b18      	ldr	r3, [pc, #96]	; (8001308 <MX_TIM2_Init+0x94>)
 80012a8:	2209      	movs	r2, #9
 80012aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ac:	4b16      	ldr	r3, [pc, #88]	; (8001308 <MX_TIM2_Init+0x94>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <MX_TIM2_Init+0x94>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012b8:	4813      	ldr	r0, [pc, #76]	; (8001308 <MX_TIM2_Init+0x94>)
 80012ba:	f001 fad9 	bl	8002870 <HAL_TIM_Base_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012c4:	f000 f942 	bl	800154c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012ce:	f107 0308 	add.w	r3, r7, #8
 80012d2:	4619      	mov	r1, r3
 80012d4:	480c      	ldr	r0, [pc, #48]	; (8001308 <MX_TIM2_Init+0x94>)
 80012d6:	f001 fe2d 	bl	8002f34 <HAL_TIM_ConfigClockSource>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012e0:	f000 f934 	bl	800154c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e4:	2300      	movs	r3, #0
 80012e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ec:	463b      	mov	r3, r7
 80012ee:	4619      	mov	r1, r3
 80012f0:	4805      	ldr	r0, [pc, #20]	; (8001308 <MX_TIM2_Init+0x94>)
 80012f2:	f002 f9ab 	bl	800364c <HAL_TIMEx_MasterConfigSynchronization>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012fc:	f000 f926 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000184 	.word	0x20000184

0800130c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08e      	sub	sp, #56	; 0x38
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001312:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001320:	f107 0320 	add.w	r3, r7, #32
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
 8001338:	615a      	str	r2, [r3, #20]
 800133a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800133c:	4b2c      	ldr	r3, [pc, #176]	; (80013f0 <MX_TIM3_Init+0xe4>)
 800133e:	4a2d      	ldr	r2, [pc, #180]	; (80013f4 <MX_TIM3_Init+0xe8>)
 8001340:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001342:	4b2b      	ldr	r3, [pc, #172]	; (80013f0 <MX_TIM3_Init+0xe4>)
 8001344:	223f      	movs	r2, #63	; 0x3f
 8001346:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001348:	4b29      	ldr	r3, [pc, #164]	; (80013f0 <MX_TIM3_Init+0xe4>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800134e:	4b28      	ldr	r3, [pc, #160]	; (80013f0 <MX_TIM3_Init+0xe4>)
 8001350:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001354:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001356:	4b26      	ldr	r3, [pc, #152]	; (80013f0 <MX_TIM3_Init+0xe4>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135c:	4b24      	ldr	r3, [pc, #144]	; (80013f0 <MX_TIM3_Init+0xe4>)
 800135e:	2200      	movs	r2, #0
 8001360:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001362:	4823      	ldr	r0, [pc, #140]	; (80013f0 <MX_TIM3_Init+0xe4>)
 8001364:	f001 fa84 	bl	8002870 <HAL_TIM_Base_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800136e:	f000 f8ed 	bl	800154c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001376:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001378:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800137c:	4619      	mov	r1, r3
 800137e:	481c      	ldr	r0, [pc, #112]	; (80013f0 <MX_TIM3_Init+0xe4>)
 8001380:	f001 fdd8 	bl	8002f34 <HAL_TIM_ConfigClockSource>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800138a:	f000 f8df 	bl	800154c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800138e:	4818      	ldr	r0, [pc, #96]	; (80013f0 <MX_TIM3_Init+0xe4>)
 8001390:	f001 fb10 	bl	80029b4 <HAL_TIM_PWM_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800139a:	f000 f8d7 	bl	800154c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013a6:	f107 0320 	add.w	r3, r7, #32
 80013aa:	4619      	mov	r1, r3
 80013ac:	4810      	ldr	r0, [pc, #64]	; (80013f0 <MX_TIM3_Init+0xe4>)
 80013ae:	f002 f94d 	bl	800364c <HAL_TIMEx_MasterConfigSynchronization>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80013b8:	f000 f8c8 	bl	800154c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013bc:	2360      	movs	r3, #96	; 0x60
 80013be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2200      	movs	r2, #0
 80013d0:	4619      	mov	r1, r3
 80013d2:	4807      	ldr	r0, [pc, #28]	; (80013f0 <MX_TIM3_Init+0xe4>)
 80013d4:	f001 fcf0 	bl	8002db8 <HAL_TIM_PWM_ConfigChannel>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80013de:	f000 f8b5 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013e2:	4803      	ldr	r0, [pc, #12]	; (80013f0 <MX_TIM3_Init+0xe4>)
 80013e4:	f000 f92a 	bl	800163c <HAL_TIM_MspPostInit>

}
 80013e8:	bf00      	nop
 80013ea:	3738      	adds	r7, #56	; 0x38
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	200001cc 	.word	0x200001cc
 80013f4:	40000400 	.word	0x40000400

080013f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 80013fe:	4a12      	ldr	r2, [pc, #72]	; (8001448 <MX_USART2_UART_Init+0x50>)
 8001400:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 8001404:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001408:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 800141e:	220c      	movs	r2, #12
 8001420:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_USART2_UART_Init+0x4c>)
 8001430:	f002 f97c 	bl	800372c <HAL_UART_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800143a:	f000 f887 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000214 	.word	0x20000214
 8001448:	40004400 	.word	0x40004400

0800144c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001452:	f107 0308 	add.w	r3, r7, #8
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001460:	4b2e      	ldr	r3, [pc, #184]	; (800151c <MX_GPIO_Init+0xd0>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	4a2d      	ldr	r2, [pc, #180]	; (800151c <MX_GPIO_Init+0xd0>)
 8001466:	f043 0304 	orr.w	r3, r3, #4
 800146a:	6193      	str	r3, [r2, #24]
 800146c:	4b2b      	ldr	r3, [pc, #172]	; (800151c <MX_GPIO_Init+0xd0>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001478:	4b28      	ldr	r3, [pc, #160]	; (800151c <MX_GPIO_Init+0xd0>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	4a27      	ldr	r2, [pc, #156]	; (800151c <MX_GPIO_Init+0xd0>)
 800147e:	f043 0308 	orr.w	r3, r3, #8
 8001482:	6193      	str	r3, [r2, #24]
 8001484:	4b25      	ldr	r3, [pc, #148]	; (800151c <MX_GPIO_Init+0xd0>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	f003 0308 	and.w	r3, r3, #8
 800148c:	603b      	str	r3, [r7, #0]
 800148e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001496:	4822      	ldr	r0, [pc, #136]	; (8001520 <MX_GPIO_Init+0xd4>)
 8001498:	f000 fdb7 	bl	800200a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80014a2:	4820      	ldr	r0, [pc, #128]	; (8001524 <MX_GPIO_Init+0xd8>)
 80014a4:	f000 fdb1 	bl	800200a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Button4_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button4_Pin|Button1_Pin|Button2_Pin;
 80014a8:	2313      	movs	r3, #19
 80014aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b0:	2301      	movs	r3, #1
 80014b2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b4:	f107 0308 	add.w	r3, r7, #8
 80014b8:	4619      	mov	r1, r3
 80014ba:	481a      	ldr	r0, [pc, #104]	; (8001524 <MX_GPIO_Init+0xd8>)
 80014bc:	f000 fc0a 	bl	8001cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 80014c0:	2301      	movs	r3, #1
 80014c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014c8:	2301      	movs	r3, #1
 80014ca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 80014cc:	f107 0308 	add.w	r3, r7, #8
 80014d0:	4619      	mov	r1, r3
 80014d2:	4813      	ldr	r0, [pc, #76]	; (8001520 <MX_GPIO_Init+0xd4>)
 80014d4:	f000 fbfe 	bl	8001cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 80014d8:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80014dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014de:	2301      	movs	r3, #1
 80014e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e6:	2302      	movs	r3, #2
 80014e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ea:	f107 0308 	add.w	r3, r7, #8
 80014ee:	4619      	mov	r1, r3
 80014f0:	480b      	ldr	r0, [pc, #44]	; (8001520 <MX_GPIO_Init+0xd4>)
 80014f2:	f000 fbef 	bl	8001cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 80014f6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80014fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fc:	2301      	movs	r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2302      	movs	r3, #2
 8001506:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001508:	f107 0308 	add.w	r3, r7, #8
 800150c:	4619      	mov	r1, r3
 800150e:	4805      	ldr	r0, [pc, #20]	; (8001524 <MX_GPIO_Init+0xd8>)
 8001510:	f000 fbe0 	bl	8001cd4 <HAL_GPIO_Init>

}
 8001514:	bf00      	nop
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40021000 	.word	0x40021000
 8001520:	40010c00 	.word	0x40010c00
 8001524:	40010800 	.word	0x40010800

08001528 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef*htim){
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	TimerRun();
 8001530:	f7fe fe74 	bl	800021c <TimerRun>
	button1_reading();
 8001534:	f7fe fec8 	bl	80002c8 <button1_reading>
	button2_reading();
 8001538:	f7fe fee8 	bl	800030c <button2_reading>
	button3_reading();
 800153c:	f7fe ff2a 	bl	8000394 <button3_reading>
	button4_reading();
 8001540:	f7fe ff4a 	bl	80003d8 <button4_reading>
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001550:	b672      	cpsid	i
}
 8001552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001554:	e7fe      	b.n	8001554 <Error_Handler+0x8>
	...

08001558 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <HAL_MspInit+0x5c>)
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	4a14      	ldr	r2, [pc, #80]	; (80015b4 <HAL_MspInit+0x5c>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6193      	str	r3, [r2, #24]
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_MspInit+0x5c>)
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <HAL_MspInit+0x5c>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	4a0e      	ldr	r2, [pc, #56]	; (80015b4 <HAL_MspInit+0x5c>)
 800157c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001580:	61d3      	str	r3, [r2, #28]
 8001582:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <HAL_MspInit+0x5c>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800158e:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <HAL_MspInit+0x60>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <HAL_MspInit+0x60>)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	40021000 	.word	0x40021000
 80015b8:	40010000 	.word	0x40010000

080015bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015cc:	d114      	bne.n	80015f8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015ce:	4b19      	ldr	r3, [pc, #100]	; (8001634 <HAL_TIM_Base_MspInit+0x78>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	4a18      	ldr	r2, [pc, #96]	; (8001634 <HAL_TIM_Base_MspInit+0x78>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	61d3      	str	r3, [r2, #28]
 80015da:	4b16      	ldr	r3, [pc, #88]	; (8001634 <HAL_TIM_Base_MspInit+0x78>)
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	201c      	movs	r0, #28
 80015ec:	f000 fa8b 	bl	8001b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015f0:	201c      	movs	r0, #28
 80015f2:	f000 faa4 	bl	8001b3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015f6:	e018      	b.n	800162a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a0e      	ldr	r2, [pc, #56]	; (8001638 <HAL_TIM_Base_MspInit+0x7c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d113      	bne.n	800162a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <HAL_TIM_Base_MspInit+0x78>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	4a0b      	ldr	r2, [pc, #44]	; (8001634 <HAL_TIM_Base_MspInit+0x78>)
 8001608:	f043 0302 	orr.w	r3, r3, #2
 800160c:	61d3      	str	r3, [r2, #28]
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <HAL_TIM_Base_MspInit+0x78>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2100      	movs	r1, #0
 800161e:	201d      	movs	r0, #29
 8001620:	f000 fa71 	bl	8001b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001624:	201d      	movs	r0, #29
 8001626:	f000 fa8a 	bl	8001b3e <HAL_NVIC_EnableIRQ>
}
 800162a:	bf00      	nop
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40021000 	.word	0x40021000
 8001638:	40000400 	.word	0x40000400

0800163c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0310 	add.w	r3, r7, #16
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a0f      	ldr	r2, [pc, #60]	; (8001694 <HAL_TIM_MspPostInit+0x58>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d117      	bne.n	800168c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165c:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <HAL_TIM_MspPostInit+0x5c>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	4a0d      	ldr	r2, [pc, #52]	; (8001698 <HAL_TIM_MspPostInit+0x5c>)
 8001662:	f043 0304 	orr.w	r3, r3, #4
 8001666:	6193      	str	r3, [r2, #24]
 8001668:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <HAL_TIM_MspPostInit+0x5c>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001674:	2340      	movs	r3, #64	; 0x40
 8001676:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	2302      	movs	r3, #2
 800167a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	2302      	movs	r3, #2
 800167e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001680:	f107 0310 	add.w	r3, r7, #16
 8001684:	4619      	mov	r1, r3
 8001686:	4805      	ldr	r0, [pc, #20]	; (800169c <HAL_TIM_MspPostInit+0x60>)
 8001688:	f000 fb24 	bl	8001cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800168c:	bf00      	nop
 800168e:	3720      	adds	r7, #32
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40000400 	.word	0x40000400
 8001698:	40021000 	.word	0x40021000
 800169c:	40010800 	.word	0x40010800

080016a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0310 	add.w	r3, r7, #16
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a1f      	ldr	r2, [pc, #124]	; (8001738 <HAL_UART_MspInit+0x98>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d137      	bne.n	8001730 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016c0:	4b1e      	ldr	r3, [pc, #120]	; (800173c <HAL_UART_MspInit+0x9c>)
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	4a1d      	ldr	r2, [pc, #116]	; (800173c <HAL_UART_MspInit+0x9c>)
 80016c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ca:	61d3      	str	r3, [r2, #28]
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <HAL_UART_MspInit+0x9c>)
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d8:	4b18      	ldr	r3, [pc, #96]	; (800173c <HAL_UART_MspInit+0x9c>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	4a17      	ldr	r2, [pc, #92]	; (800173c <HAL_UART_MspInit+0x9c>)
 80016de:	f043 0304 	orr.w	r3, r3, #4
 80016e2:	6193      	str	r3, [r2, #24]
 80016e4:	4b15      	ldr	r3, [pc, #84]	; (800173c <HAL_UART_MspInit+0x9c>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016f0:	2304      	movs	r3, #4
 80016f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f4:	2302      	movs	r3, #2
 80016f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016f8:	2303      	movs	r3, #3
 80016fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fc:	f107 0310 	add.w	r3, r7, #16
 8001700:	4619      	mov	r1, r3
 8001702:	480f      	ldr	r0, [pc, #60]	; (8001740 <HAL_UART_MspInit+0xa0>)
 8001704:	f000 fae6 	bl	8001cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001708:	2308      	movs	r3, #8
 800170a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	4619      	mov	r1, r3
 800171a:	4809      	ldr	r0, [pc, #36]	; (8001740 <HAL_UART_MspInit+0xa0>)
 800171c:	f000 fada 	bl	8001cd4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	2100      	movs	r1, #0
 8001724:	2026      	movs	r0, #38	; 0x26
 8001726:	f000 f9ee 	bl	8001b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800172a:	2026      	movs	r0, #38	; 0x26
 800172c:	f000 fa07 	bl	8001b3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001730:	bf00      	nop
 8001732:	3720      	adds	r7, #32
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40004400 	.word	0x40004400
 800173c:	40021000 	.word	0x40021000
 8001740:	40010800 	.word	0x40010800

08001744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <NMI_Handler+0x4>

0800174a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800174e:	e7fe      	b.n	800174e <HardFault_Handler+0x4>

08001750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <MemManage_Handler+0x4>

08001756 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <BusFault_Handler+0x4>

0800175c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <UsageFault_Handler+0x4>

08001762 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr

0800176e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr

0800177a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr

08001786 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800178a:	f000 f8c9 	bl	8001920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <TIM2_IRQHandler+0x10>)
 800179a:	f001 fa05 	bl	8002ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000184 	.word	0x20000184

080017a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017ac:	4802      	ldr	r0, [pc, #8]	; (80017b8 <TIM3_IRQHandler+0x10>)
 80017ae:	f001 f9fb 	bl	8002ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200001cc 	.word	0x200001cc

080017bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <USART2_IRQHandler+0x10>)
 80017c2:	f002 f893 	bl	80038ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000214 	.word	0x20000214

080017d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017d8:	4a14      	ldr	r2, [pc, #80]	; (800182c <_sbrk+0x5c>)
 80017da:	4b15      	ldr	r3, [pc, #84]	; (8001830 <_sbrk+0x60>)
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e4:	4b13      	ldr	r3, [pc, #76]	; (8001834 <_sbrk+0x64>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d102      	bne.n	80017f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <_sbrk+0x64>)
 80017ee:	4a12      	ldr	r2, [pc, #72]	; (8001838 <_sbrk+0x68>)
 80017f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <_sbrk+0x64>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d207      	bcs.n	8001810 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001800:	f002 fc6c 	bl	80040dc <__errno>
 8001804:	4603      	mov	r3, r0
 8001806:	220c      	movs	r2, #12
 8001808:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800180a:	f04f 33ff 	mov.w	r3, #4294967295
 800180e:	e009      	b.n	8001824 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <_sbrk+0x64>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <_sbrk+0x64>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	4a05      	ldr	r2, [pc, #20]	; (8001834 <_sbrk+0x64>)
 8001820:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001822:	68fb      	ldr	r3, [r7, #12]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20005000 	.word	0x20005000
 8001830:	00000400 	.word	0x00000400
 8001834:	20000258 	.word	0x20000258
 8001838:	20000270 	.word	0x20000270

0800183c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr

08001848 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001848:	480c      	ldr	r0, [pc, #48]	; (800187c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800184a:	490d      	ldr	r1, [pc, #52]	; (8001880 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800184c:	4a0d      	ldr	r2, [pc, #52]	; (8001884 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001850:	e002      	b.n	8001858 <LoopCopyDataInit>

08001852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001856:	3304      	adds	r3, #4

08001858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800185a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800185c:	d3f9      	bcc.n	8001852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185e:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001860:	4c0a      	ldr	r4, [pc, #40]	; (800188c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001864:	e001      	b.n	800186a <LoopFillZerobss>

08001866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001868:	3204      	adds	r2, #4

0800186a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800186a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800186c:	d3fb      	bcc.n	8001866 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800186e:	f7ff ffe5 	bl	800183c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001872:	f002 fc39 	bl	80040e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001876:	f7ff fc91 	bl	800119c <main>
  bx lr
 800187a:	4770      	bx	lr
  ldr r0, =_sdata
 800187c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001880:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001884:	08004ac0 	.word	0x08004ac0
  ldr r2, =_sbss
 8001888:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 800188c:	20000270 	.word	0x20000270

08001890 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001890:	e7fe      	b.n	8001890 <ADC1_2_IRQHandler>
	...

08001894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <HAL_Init+0x28>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a07      	ldr	r2, [pc, #28]	; (80018bc <HAL_Init+0x28>)
 800189e:	f043 0310 	orr.w	r3, r3, #16
 80018a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a4:	2003      	movs	r0, #3
 80018a6:	f000 f923 	bl	8001af0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018aa:	200f      	movs	r0, #15
 80018ac:	f000 f808 	bl	80018c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b0:	f7ff fe52 	bl	8001558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40022000 	.word	0x40022000

080018c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018c8:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_InitTick+0x54>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_InitTick+0x58>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	4619      	mov	r1, r3
 80018d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018da:	fbb2 f3f3 	udiv	r3, r2, r3
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 f93b 	bl	8001b5a <HAL_SYSTICK_Config>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e00e      	b.n	800190c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b0f      	cmp	r3, #15
 80018f2:	d80a      	bhi.n	800190a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f4:	2200      	movs	r2, #0
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	f04f 30ff 	mov.w	r0, #4294967295
 80018fc:	f000 f903 	bl	8001b06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001900:	4a06      	ldr	r2, [pc, #24]	; (800191c <HAL_InitTick+0x5c>)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	e000      	b.n	800190c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
}
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000038 	.word	0x20000038
 8001918:	20000040 	.word	0x20000040
 800191c:	2000003c 	.word	0x2000003c

08001920 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <HAL_IncTick+0x1c>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	4b05      	ldr	r3, [pc, #20]	; (8001940 <HAL_IncTick+0x20>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4413      	add	r3, r2
 8001930:	4a03      	ldr	r2, [pc, #12]	; (8001940 <HAL_IncTick+0x20>)
 8001932:	6013      	str	r3, [r2, #0]
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr
 800193c:	20000040 	.word	0x20000040
 8001940:	2000025c 	.word	0x2000025c

08001944 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return uwTick;
 8001948:	4b02      	ldr	r3, [pc, #8]	; (8001954 <HAL_GetTick+0x10>)
 800194a:	681b      	ldr	r3, [r3, #0]
}
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr
 8001954:	2000025c 	.word	0x2000025c

08001958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001974:	4013      	ands	r3, r2
 8001976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198a:	4a04      	ldr	r2, [pc, #16]	; (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	60d3      	str	r3, [r2, #12]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a4:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <__NVIC_GetPriorityGrouping+0x18>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	0a1b      	lsrs	r3, r3, #8
 80019aa:	f003 0307 	and.w	r3, r3, #7
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	db0b      	blt.n	80019e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	f003 021f 	and.w	r2, r3, #31
 80019d4:	4906      	ldr	r1, [pc, #24]	; (80019f0 <__NVIC_EnableIRQ+0x34>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	095b      	lsrs	r3, r3, #5
 80019dc:	2001      	movs	r0, #1
 80019de:	fa00 f202 	lsl.w	r2, r0, r2
 80019e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	e000e100 	.word	0xe000e100

080019f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	6039      	str	r1, [r7, #0]
 80019fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	db0a      	blt.n	8001a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	490c      	ldr	r1, [pc, #48]	; (8001a40 <__NVIC_SetPriority+0x4c>)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	0112      	lsls	r2, r2, #4
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	440b      	add	r3, r1
 8001a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a1c:	e00a      	b.n	8001a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	4908      	ldr	r1, [pc, #32]	; (8001a44 <__NVIC_SetPriority+0x50>)
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	3b04      	subs	r3, #4
 8001a2c:	0112      	lsls	r2, r2, #4
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	440b      	add	r3, r1
 8001a32:	761a      	strb	r2, [r3, #24]
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000e100 	.word	0xe000e100
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b089      	sub	sp, #36	; 0x24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f1c3 0307 	rsb	r3, r3, #7
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	bf28      	it	cs
 8001a66:	2304      	movcs	r3, #4
 8001a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	2b06      	cmp	r3, #6
 8001a70:	d902      	bls.n	8001a78 <NVIC_EncodePriority+0x30>
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3b03      	subs	r3, #3
 8001a76:	e000      	b.n	8001a7a <NVIC_EncodePriority+0x32>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43da      	mvns	r2, r3
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a90:	f04f 31ff 	mov.w	r1, #4294967295
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9a:	43d9      	mvns	r1, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa0:	4313      	orrs	r3, r2
         );
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3724      	adds	r7, #36	; 0x24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr

08001aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001abc:	d301      	bcc.n	8001ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e00f      	b.n	8001ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <SysTick_Config+0x40>)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aca:	210f      	movs	r1, #15
 8001acc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad0:	f7ff ff90 	bl	80019f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <SysTick_Config+0x40>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ada:	4b04      	ldr	r3, [pc, #16]	; (8001aec <SysTick_Config+0x40>)
 8001adc:	2207      	movs	r2, #7
 8001ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	e000e010 	.word	0xe000e010

08001af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff ff2d 	bl	8001958 <__NVIC_SetPriorityGrouping>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b086      	sub	sp, #24
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	607a      	str	r2, [r7, #4]
 8001b12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b18:	f7ff ff42 	bl	80019a0 <__NVIC_GetPriorityGrouping>
 8001b1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	68b9      	ldr	r1, [r7, #8]
 8001b22:	6978      	ldr	r0, [r7, #20]
 8001b24:	f7ff ff90 	bl	8001a48 <NVIC_EncodePriority>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff5f 	bl	80019f4 <__NVIC_SetPriority>
}
 8001b36:	bf00      	nop
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff35 	bl	80019bc <__NVIC_EnableIRQ>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ffa2 	bl	8001aac <SysTick_Config>
 8001b68:	4603      	mov	r3, r0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b085      	sub	sp, #20
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d008      	beq.n	8001b9a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2204      	movs	r2, #4
 8001b8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e020      	b.n	8001bdc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 020e 	bic.w	r2, r2, #14
 8001ba8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0201 	bic.w	r2, r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr
	...

08001be8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d005      	beq.n	8001c0a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2204      	movs	r2, #4
 8001c02:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	73fb      	strb	r3, [r7, #15]
 8001c08:	e051      	b.n	8001cae <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 020e 	bic.w	r2, r2, #14
 8001c18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 0201 	bic.w	r2, r2, #1
 8001c28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a22      	ldr	r2, [pc, #136]	; (8001cb8 <HAL_DMA_Abort_IT+0xd0>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d029      	beq.n	8001c88 <HAL_DMA_Abort_IT+0xa0>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a20      	ldr	r2, [pc, #128]	; (8001cbc <HAL_DMA_Abort_IT+0xd4>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d022      	beq.n	8001c84 <HAL_DMA_Abort_IT+0x9c>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a1f      	ldr	r2, [pc, #124]	; (8001cc0 <HAL_DMA_Abort_IT+0xd8>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d01a      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x96>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a1d      	ldr	r2, [pc, #116]	; (8001cc4 <HAL_DMA_Abort_IT+0xdc>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d012      	beq.n	8001c78 <HAL_DMA_Abort_IT+0x90>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a1c      	ldr	r2, [pc, #112]	; (8001cc8 <HAL_DMA_Abort_IT+0xe0>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d00a      	beq.n	8001c72 <HAL_DMA_Abort_IT+0x8a>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a1a      	ldr	r2, [pc, #104]	; (8001ccc <HAL_DMA_Abort_IT+0xe4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d102      	bne.n	8001c6c <HAL_DMA_Abort_IT+0x84>
 8001c66:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c6a:	e00e      	b.n	8001c8a <HAL_DMA_Abort_IT+0xa2>
 8001c6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c70:	e00b      	b.n	8001c8a <HAL_DMA_Abort_IT+0xa2>
 8001c72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c76:	e008      	b.n	8001c8a <HAL_DMA_Abort_IT+0xa2>
 8001c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c7c:	e005      	b.n	8001c8a <HAL_DMA_Abort_IT+0xa2>
 8001c7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c82:	e002      	b.n	8001c8a <HAL_DMA_Abort_IT+0xa2>
 8001c84:	2310      	movs	r3, #16
 8001c86:	e000      	b.n	8001c8a <HAL_DMA_Abort_IT+0xa2>
 8001c88:	2301      	movs	r3, #1
 8001c8a:	4a11      	ldr	r2, [pc, #68]	; (8001cd0 <HAL_DMA_Abort_IT+0xe8>)
 8001c8c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	4798      	blx	r3
    } 
  }
  return status;
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40020008 	.word	0x40020008
 8001cbc:	4002001c 	.word	0x4002001c
 8001cc0:	40020030 	.word	0x40020030
 8001cc4:	40020044 	.word	0x40020044
 8001cc8:	40020058 	.word	0x40020058
 8001ccc:	4002006c 	.word	0x4002006c
 8001cd0:	40020000 	.word	0x40020000

08001cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b08b      	sub	sp, #44	; 0x2c
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ce6:	e169      	b.n	8001fbc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ce8:	2201      	movs	r2, #1
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	69fa      	ldr	r2, [r7, #28]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	f040 8158 	bne.w	8001fb6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	4a9a      	ldr	r2, [pc, #616]	; (8001f74 <HAL_GPIO_Init+0x2a0>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d05e      	beq.n	8001dce <HAL_GPIO_Init+0xfa>
 8001d10:	4a98      	ldr	r2, [pc, #608]	; (8001f74 <HAL_GPIO_Init+0x2a0>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d875      	bhi.n	8001e02 <HAL_GPIO_Init+0x12e>
 8001d16:	4a98      	ldr	r2, [pc, #608]	; (8001f78 <HAL_GPIO_Init+0x2a4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d058      	beq.n	8001dce <HAL_GPIO_Init+0xfa>
 8001d1c:	4a96      	ldr	r2, [pc, #600]	; (8001f78 <HAL_GPIO_Init+0x2a4>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d86f      	bhi.n	8001e02 <HAL_GPIO_Init+0x12e>
 8001d22:	4a96      	ldr	r2, [pc, #600]	; (8001f7c <HAL_GPIO_Init+0x2a8>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d052      	beq.n	8001dce <HAL_GPIO_Init+0xfa>
 8001d28:	4a94      	ldr	r2, [pc, #592]	; (8001f7c <HAL_GPIO_Init+0x2a8>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d869      	bhi.n	8001e02 <HAL_GPIO_Init+0x12e>
 8001d2e:	4a94      	ldr	r2, [pc, #592]	; (8001f80 <HAL_GPIO_Init+0x2ac>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d04c      	beq.n	8001dce <HAL_GPIO_Init+0xfa>
 8001d34:	4a92      	ldr	r2, [pc, #584]	; (8001f80 <HAL_GPIO_Init+0x2ac>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d863      	bhi.n	8001e02 <HAL_GPIO_Init+0x12e>
 8001d3a:	4a92      	ldr	r2, [pc, #584]	; (8001f84 <HAL_GPIO_Init+0x2b0>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d046      	beq.n	8001dce <HAL_GPIO_Init+0xfa>
 8001d40:	4a90      	ldr	r2, [pc, #576]	; (8001f84 <HAL_GPIO_Init+0x2b0>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d85d      	bhi.n	8001e02 <HAL_GPIO_Init+0x12e>
 8001d46:	2b12      	cmp	r3, #18
 8001d48:	d82a      	bhi.n	8001da0 <HAL_GPIO_Init+0xcc>
 8001d4a:	2b12      	cmp	r3, #18
 8001d4c:	d859      	bhi.n	8001e02 <HAL_GPIO_Init+0x12e>
 8001d4e:	a201      	add	r2, pc, #4	; (adr r2, 8001d54 <HAL_GPIO_Init+0x80>)
 8001d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d54:	08001dcf 	.word	0x08001dcf
 8001d58:	08001da9 	.word	0x08001da9
 8001d5c:	08001dbb 	.word	0x08001dbb
 8001d60:	08001dfd 	.word	0x08001dfd
 8001d64:	08001e03 	.word	0x08001e03
 8001d68:	08001e03 	.word	0x08001e03
 8001d6c:	08001e03 	.word	0x08001e03
 8001d70:	08001e03 	.word	0x08001e03
 8001d74:	08001e03 	.word	0x08001e03
 8001d78:	08001e03 	.word	0x08001e03
 8001d7c:	08001e03 	.word	0x08001e03
 8001d80:	08001e03 	.word	0x08001e03
 8001d84:	08001e03 	.word	0x08001e03
 8001d88:	08001e03 	.word	0x08001e03
 8001d8c:	08001e03 	.word	0x08001e03
 8001d90:	08001e03 	.word	0x08001e03
 8001d94:	08001e03 	.word	0x08001e03
 8001d98:	08001db1 	.word	0x08001db1
 8001d9c:	08001dc5 	.word	0x08001dc5
 8001da0:	4a79      	ldr	r2, [pc, #484]	; (8001f88 <HAL_GPIO_Init+0x2b4>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d013      	beq.n	8001dce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001da6:	e02c      	b.n	8001e02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	623b      	str	r3, [r7, #32]
          break;
 8001dae:	e029      	b.n	8001e04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	3304      	adds	r3, #4
 8001db6:	623b      	str	r3, [r7, #32]
          break;
 8001db8:	e024      	b.n	8001e04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	3308      	adds	r3, #8
 8001dc0:	623b      	str	r3, [r7, #32]
          break;
 8001dc2:	e01f      	b.n	8001e04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	330c      	adds	r3, #12
 8001dca:	623b      	str	r3, [r7, #32]
          break;
 8001dcc:	e01a      	b.n	8001e04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d102      	bne.n	8001ddc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dd6:	2304      	movs	r3, #4
 8001dd8:	623b      	str	r3, [r7, #32]
          break;
 8001dda:	e013      	b.n	8001e04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d105      	bne.n	8001df0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001de4:	2308      	movs	r3, #8
 8001de6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69fa      	ldr	r2, [r7, #28]
 8001dec:	611a      	str	r2, [r3, #16]
          break;
 8001dee:	e009      	b.n	8001e04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001df0:	2308      	movs	r3, #8
 8001df2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	69fa      	ldr	r2, [r7, #28]
 8001df8:	615a      	str	r2, [r3, #20]
          break;
 8001dfa:	e003      	b.n	8001e04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	623b      	str	r3, [r7, #32]
          break;
 8001e00:	e000      	b.n	8001e04 <HAL_GPIO_Init+0x130>
          break;
 8001e02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	2bff      	cmp	r3, #255	; 0xff
 8001e08:	d801      	bhi.n	8001e0e <HAL_GPIO_Init+0x13a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	e001      	b.n	8001e12 <HAL_GPIO_Init+0x13e>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3304      	adds	r3, #4
 8001e12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	2bff      	cmp	r3, #255	; 0xff
 8001e18:	d802      	bhi.n	8001e20 <HAL_GPIO_Init+0x14c>
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	e002      	b.n	8001e26 <HAL_GPIO_Init+0x152>
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	3b08      	subs	r3, #8
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	210f      	movs	r1, #15
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	fa01 f303 	lsl.w	r3, r1, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	401a      	ands	r2, r3
 8001e38:	6a39      	ldr	r1, [r7, #32]
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e40:	431a      	orrs	r2, r3
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 80b1 	beq.w	8001fb6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e54:	4b4d      	ldr	r3, [pc, #308]	; (8001f8c <HAL_GPIO_Init+0x2b8>)
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	4a4c      	ldr	r2, [pc, #304]	; (8001f8c <HAL_GPIO_Init+0x2b8>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	6193      	str	r3, [r2, #24]
 8001e60:	4b4a      	ldr	r3, [pc, #296]	; (8001f8c <HAL_GPIO_Init+0x2b8>)
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e6c:	4a48      	ldr	r2, [pc, #288]	; (8001f90 <HAL_GPIO_Init+0x2bc>)
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	089b      	lsrs	r3, r3, #2
 8001e72:	3302      	adds	r3, #2
 8001e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	220f      	movs	r2, #15
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a40      	ldr	r2, [pc, #256]	; (8001f94 <HAL_GPIO_Init+0x2c0>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d013      	beq.n	8001ec0 <HAL_GPIO_Init+0x1ec>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a3f      	ldr	r2, [pc, #252]	; (8001f98 <HAL_GPIO_Init+0x2c4>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d00d      	beq.n	8001ebc <HAL_GPIO_Init+0x1e8>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a3e      	ldr	r2, [pc, #248]	; (8001f9c <HAL_GPIO_Init+0x2c8>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d007      	beq.n	8001eb8 <HAL_GPIO_Init+0x1e4>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a3d      	ldr	r2, [pc, #244]	; (8001fa0 <HAL_GPIO_Init+0x2cc>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d101      	bne.n	8001eb4 <HAL_GPIO_Init+0x1e0>
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e006      	b.n	8001ec2 <HAL_GPIO_Init+0x1ee>
 8001eb4:	2304      	movs	r3, #4
 8001eb6:	e004      	b.n	8001ec2 <HAL_GPIO_Init+0x1ee>
 8001eb8:	2302      	movs	r3, #2
 8001eba:	e002      	b.n	8001ec2 <HAL_GPIO_Init+0x1ee>
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e000      	b.n	8001ec2 <HAL_GPIO_Init+0x1ee>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ec4:	f002 0203 	and.w	r2, r2, #3
 8001ec8:	0092      	lsls	r2, r2, #2
 8001eca:	4093      	lsls	r3, r2
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ed2:	492f      	ldr	r1, [pc, #188]	; (8001f90 <HAL_GPIO_Init+0x2bc>)
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	089b      	lsrs	r3, r3, #2
 8001ed8:	3302      	adds	r3, #2
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d006      	beq.n	8001efa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001eec:	4b2d      	ldr	r3, [pc, #180]	; (8001fa4 <HAL_GPIO_Init+0x2d0>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	492c      	ldr	r1, [pc, #176]	; (8001fa4 <HAL_GPIO_Init+0x2d0>)
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	600b      	str	r3, [r1, #0]
 8001ef8:	e006      	b.n	8001f08 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001efa:	4b2a      	ldr	r3, [pc, #168]	; (8001fa4 <HAL_GPIO_Init+0x2d0>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	43db      	mvns	r3, r3
 8001f02:	4928      	ldr	r1, [pc, #160]	; (8001fa4 <HAL_GPIO_Init+0x2d0>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d006      	beq.n	8001f22 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f14:	4b23      	ldr	r3, [pc, #140]	; (8001fa4 <HAL_GPIO_Init+0x2d0>)
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	4922      	ldr	r1, [pc, #136]	; (8001fa4 <HAL_GPIO_Init+0x2d0>)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	604b      	str	r3, [r1, #4]
 8001f20:	e006      	b.n	8001f30 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f22:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <HAL_GPIO_Init+0x2d0>)
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	491e      	ldr	r1, [pc, #120]	; (8001fa4 <HAL_GPIO_Init+0x2d0>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d006      	beq.n	8001f4a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f3c:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <HAL_GPIO_Init+0x2d0>)
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	4918      	ldr	r1, [pc, #96]	; (8001fa4 <HAL_GPIO_Init+0x2d0>)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	608b      	str	r3, [r1, #8]
 8001f48:	e006      	b.n	8001f58 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f4a:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <HAL_GPIO_Init+0x2d0>)
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	4914      	ldr	r1, [pc, #80]	; (8001fa4 <HAL_GPIO_Init+0x2d0>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d021      	beq.n	8001fa8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f64:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <HAL_GPIO_Init+0x2d0>)
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	490e      	ldr	r1, [pc, #56]	; (8001fa4 <HAL_GPIO_Init+0x2d0>)
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	60cb      	str	r3, [r1, #12]
 8001f70:	e021      	b.n	8001fb6 <HAL_GPIO_Init+0x2e2>
 8001f72:	bf00      	nop
 8001f74:	10320000 	.word	0x10320000
 8001f78:	10310000 	.word	0x10310000
 8001f7c:	10220000 	.word	0x10220000
 8001f80:	10210000 	.word	0x10210000
 8001f84:	10120000 	.word	0x10120000
 8001f88:	10110000 	.word	0x10110000
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40010000 	.word	0x40010000
 8001f94:	40010800 	.word	0x40010800
 8001f98:	40010c00 	.word	0x40010c00
 8001f9c:	40011000 	.word	0x40011000
 8001fa0:	40011400 	.word	0x40011400
 8001fa4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <HAL_GPIO_Init+0x304>)
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	4909      	ldr	r1, [pc, #36]	; (8001fd8 <HAL_GPIO_Init+0x304>)
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	3301      	adds	r3, #1
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f47f ae8e 	bne.w	8001ce8 <HAL_GPIO_Init+0x14>
  }
}
 8001fcc:	bf00      	nop
 8001fce:	bf00      	nop
 8001fd0:	372c      	adds	r7, #44	; 0x2c
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr
 8001fd8:	40010400 	.word	0x40010400

08001fdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	887b      	ldrh	r3, [r7, #2]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d002      	beq.n	8001ffa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	73fb      	strb	r3, [r7, #15]
 8001ff8:	e001      	b.n	8001ffe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr

0800200a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
 8002012:	460b      	mov	r3, r1
 8002014:	807b      	strh	r3, [r7, #2]
 8002016:	4613      	mov	r3, r2
 8002018:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800201a:	787b      	ldrb	r3, [r7, #1]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002020:	887a      	ldrh	r2, [r7, #2]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002026:	e003      	b.n	8002030 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002028:	887b      	ldrh	r3, [r7, #2]
 800202a:	041a      	lsls	r2, r3, #16
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	611a      	str	r2, [r3, #16]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr
	...

0800203c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e272      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 8087 	beq.w	800216a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800205c:	4b92      	ldr	r3, [pc, #584]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 030c 	and.w	r3, r3, #12
 8002064:	2b04      	cmp	r3, #4
 8002066:	d00c      	beq.n	8002082 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002068:	4b8f      	ldr	r3, [pc, #572]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 030c 	and.w	r3, r3, #12
 8002070:	2b08      	cmp	r3, #8
 8002072:	d112      	bne.n	800209a <HAL_RCC_OscConfig+0x5e>
 8002074:	4b8c      	ldr	r3, [pc, #560]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800207c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002080:	d10b      	bne.n	800209a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002082:	4b89      	ldr	r3, [pc, #548]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d06c      	beq.n	8002168 <HAL_RCC_OscConfig+0x12c>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d168      	bne.n	8002168 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e24c      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a2:	d106      	bne.n	80020b2 <HAL_RCC_OscConfig+0x76>
 80020a4:	4b80      	ldr	r3, [pc, #512]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a7f      	ldr	r2, [pc, #508]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ae:	6013      	str	r3, [r2, #0]
 80020b0:	e02e      	b.n	8002110 <HAL_RCC_OscConfig+0xd4>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10c      	bne.n	80020d4 <HAL_RCC_OscConfig+0x98>
 80020ba:	4b7b      	ldr	r3, [pc, #492]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a7a      	ldr	r2, [pc, #488]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	4b78      	ldr	r3, [pc, #480]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a77      	ldr	r2, [pc, #476]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	e01d      	b.n	8002110 <HAL_RCC_OscConfig+0xd4>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020dc:	d10c      	bne.n	80020f8 <HAL_RCC_OscConfig+0xbc>
 80020de:	4b72      	ldr	r3, [pc, #456]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a71      	ldr	r2, [pc, #452]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	4b6f      	ldr	r3, [pc, #444]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a6e      	ldr	r2, [pc, #440]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	e00b      	b.n	8002110 <HAL_RCC_OscConfig+0xd4>
 80020f8:	4b6b      	ldr	r3, [pc, #428]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a6a      	ldr	r2, [pc, #424]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80020fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	4b68      	ldr	r3, [pc, #416]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a67      	ldr	r2, [pc, #412]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 800210a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800210e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d013      	beq.n	8002140 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002118:	f7ff fc14 	bl	8001944 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002120:	f7ff fc10 	bl	8001944 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b64      	cmp	r3, #100	; 0x64
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e200      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002132:	4b5d      	ldr	r3, [pc, #372]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0f0      	beq.n	8002120 <HAL_RCC_OscConfig+0xe4>
 800213e:	e014      	b.n	800216a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002140:	f7ff fc00 	bl	8001944 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002148:	f7ff fbfc 	bl	8001944 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b64      	cmp	r3, #100	; 0x64
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e1ec      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800215a:	4b53      	ldr	r3, [pc, #332]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x10c>
 8002166:	e000      	b.n	800216a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d063      	beq.n	800223e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002176:	4b4c      	ldr	r3, [pc, #304]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 030c 	and.w	r3, r3, #12
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00b      	beq.n	800219a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002182:	4b49      	ldr	r3, [pc, #292]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 030c 	and.w	r3, r3, #12
 800218a:	2b08      	cmp	r3, #8
 800218c:	d11c      	bne.n	80021c8 <HAL_RCC_OscConfig+0x18c>
 800218e:	4b46      	ldr	r3, [pc, #280]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d116      	bne.n	80021c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219a:	4b43      	ldr	r3, [pc, #268]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d005      	beq.n	80021b2 <HAL_RCC_OscConfig+0x176>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d001      	beq.n	80021b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e1c0      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b2:	4b3d      	ldr	r3, [pc, #244]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4939      	ldr	r1, [pc, #228]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c6:	e03a      	b.n	800223e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d020      	beq.n	8002212 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021d0:	4b36      	ldr	r3, [pc, #216]	; (80022ac <HAL_RCC_OscConfig+0x270>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d6:	f7ff fbb5 	bl	8001944 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021de:	f7ff fbb1 	bl	8001944 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e1a1      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f0:	4b2d      	ldr	r3, [pc, #180]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0f0      	beq.n	80021de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021fc:	4b2a      	ldr	r3, [pc, #168]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	4927      	ldr	r1, [pc, #156]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 800220c:	4313      	orrs	r3, r2
 800220e:	600b      	str	r3, [r1, #0]
 8002210:	e015      	b.n	800223e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002212:	4b26      	ldr	r3, [pc, #152]	; (80022ac <HAL_RCC_OscConfig+0x270>)
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7ff fb94 	bl	8001944 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002220:	f7ff fb90 	bl	8001944 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e180      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002232:	4b1d      	ldr	r3, [pc, #116]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	2b00      	cmp	r3, #0
 8002248:	d03a      	beq.n	80022c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d019      	beq.n	8002286 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002252:	4b17      	ldr	r3, [pc, #92]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 8002254:	2201      	movs	r2, #1
 8002256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002258:	f7ff fb74 	bl	8001944 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002260:	f7ff fb70 	bl	8001944 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e160      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002272:	4b0d      	ldr	r3, [pc, #52]	; (80022a8 <HAL_RCC_OscConfig+0x26c>)
 8002274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800227e:	2001      	movs	r0, #1
 8002280:	f000 fad8 	bl	8002834 <RCC_Delay>
 8002284:	e01c      	b.n	80022c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002286:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <HAL_RCC_OscConfig+0x274>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228c:	f7ff fb5a 	bl	8001944 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002292:	e00f      	b.n	80022b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002294:	f7ff fb56 	bl	8001944 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d908      	bls.n	80022b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e146      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
 80022a6:	bf00      	nop
 80022a8:	40021000 	.word	0x40021000
 80022ac:	42420000 	.word	0x42420000
 80022b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b4:	4b92      	ldr	r3, [pc, #584]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1e9      	bne.n	8002294 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 80a6 	beq.w	800241a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ce:	2300      	movs	r3, #0
 80022d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022d2:	4b8b      	ldr	r3, [pc, #556]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10d      	bne.n	80022fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022de:	4b88      	ldr	r3, [pc, #544]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	4a87      	ldr	r2, [pc, #540]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 80022e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e8:	61d3      	str	r3, [r2, #28]
 80022ea:	4b85      	ldr	r3, [pc, #532]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022f6:	2301      	movs	r3, #1
 80022f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fa:	4b82      	ldr	r3, [pc, #520]	; (8002504 <HAL_RCC_OscConfig+0x4c8>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002302:	2b00      	cmp	r3, #0
 8002304:	d118      	bne.n	8002338 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002306:	4b7f      	ldr	r3, [pc, #508]	; (8002504 <HAL_RCC_OscConfig+0x4c8>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a7e      	ldr	r2, [pc, #504]	; (8002504 <HAL_RCC_OscConfig+0x4c8>)
 800230c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002310:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002312:	f7ff fb17 	bl	8001944 <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800231a:	f7ff fb13 	bl	8001944 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b64      	cmp	r3, #100	; 0x64
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e103      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232c:	4b75      	ldr	r3, [pc, #468]	; (8002504 <HAL_RCC_OscConfig+0x4c8>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0f0      	beq.n	800231a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d106      	bne.n	800234e <HAL_RCC_OscConfig+0x312>
 8002340:	4b6f      	ldr	r3, [pc, #444]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	4a6e      	ldr	r2, [pc, #440]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	6213      	str	r3, [r2, #32]
 800234c:	e02d      	b.n	80023aa <HAL_RCC_OscConfig+0x36e>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10c      	bne.n	8002370 <HAL_RCC_OscConfig+0x334>
 8002356:	4b6a      	ldr	r3, [pc, #424]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	4a69      	ldr	r2, [pc, #420]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 800235c:	f023 0301 	bic.w	r3, r3, #1
 8002360:	6213      	str	r3, [r2, #32]
 8002362:	4b67      	ldr	r3, [pc, #412]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	4a66      	ldr	r2, [pc, #408]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002368:	f023 0304 	bic.w	r3, r3, #4
 800236c:	6213      	str	r3, [r2, #32]
 800236e:	e01c      	b.n	80023aa <HAL_RCC_OscConfig+0x36e>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	2b05      	cmp	r3, #5
 8002376:	d10c      	bne.n	8002392 <HAL_RCC_OscConfig+0x356>
 8002378:	4b61      	ldr	r3, [pc, #388]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	4a60      	ldr	r2, [pc, #384]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 800237e:	f043 0304 	orr.w	r3, r3, #4
 8002382:	6213      	str	r3, [r2, #32]
 8002384:	4b5e      	ldr	r3, [pc, #376]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	4a5d      	ldr	r2, [pc, #372]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	6213      	str	r3, [r2, #32]
 8002390:	e00b      	b.n	80023aa <HAL_RCC_OscConfig+0x36e>
 8002392:	4b5b      	ldr	r3, [pc, #364]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	4a5a      	ldr	r2, [pc, #360]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002398:	f023 0301 	bic.w	r3, r3, #1
 800239c:	6213      	str	r3, [r2, #32]
 800239e:	4b58      	ldr	r3, [pc, #352]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	4a57      	ldr	r2, [pc, #348]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 80023a4:	f023 0304 	bic.w	r3, r3, #4
 80023a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d015      	beq.n	80023de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b2:	f7ff fac7 	bl	8001944 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b8:	e00a      	b.n	80023d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ba:	f7ff fac3 	bl	8001944 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e0b1      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d0:	4b4b      	ldr	r3, [pc, #300]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0ee      	beq.n	80023ba <HAL_RCC_OscConfig+0x37e>
 80023dc:	e014      	b.n	8002408 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023de:	f7ff fab1 	bl	8001944 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e4:	e00a      	b.n	80023fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e6:	f7ff faad 	bl	8001944 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e09b      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023fc:	4b40      	ldr	r3, [pc, #256]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1ee      	bne.n	80023e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002408:	7dfb      	ldrb	r3, [r7, #23]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d105      	bne.n	800241a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800240e:	4b3c      	ldr	r3, [pc, #240]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	4a3b      	ldr	r2, [pc, #236]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002414:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002418:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 8087 	beq.w	8002532 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002424:	4b36      	ldr	r3, [pc, #216]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 030c 	and.w	r3, r3, #12
 800242c:	2b08      	cmp	r3, #8
 800242e:	d061      	beq.n	80024f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	2b02      	cmp	r3, #2
 8002436:	d146      	bne.n	80024c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002438:	4b33      	ldr	r3, [pc, #204]	; (8002508 <HAL_RCC_OscConfig+0x4cc>)
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243e:	f7ff fa81 	bl	8001944 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002446:	f7ff fa7d 	bl	8001944 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e06d      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002458:	4b29      	ldr	r3, [pc, #164]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1f0      	bne.n	8002446 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800246c:	d108      	bne.n	8002480 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800246e:	4b24      	ldr	r3, [pc, #144]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	4921      	ldr	r1, [pc, #132]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 800247c:	4313      	orrs	r3, r2
 800247e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002480:	4b1f      	ldr	r3, [pc, #124]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a19      	ldr	r1, [r3, #32]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	430b      	orrs	r3, r1
 8002492:	491b      	ldr	r1, [pc, #108]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 8002494:	4313      	orrs	r3, r2
 8002496:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002498:	4b1b      	ldr	r3, [pc, #108]	; (8002508 <HAL_RCC_OscConfig+0x4cc>)
 800249a:	2201      	movs	r2, #1
 800249c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249e:	f7ff fa51 	bl	8001944 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a6:	f7ff fa4d 	bl	8001944 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e03d      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024b8:	4b11      	ldr	r3, [pc, #68]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x46a>
 80024c4:	e035      	b.n	8002532 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c6:	4b10      	ldr	r3, [pc, #64]	; (8002508 <HAL_RCC_OscConfig+0x4cc>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024cc:	f7ff fa3a 	bl	8001944 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d4:	f7ff fa36 	bl	8001944 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e026      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e6:	4b06      	ldr	r3, [pc, #24]	; (8002500 <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_OscConfig+0x498>
 80024f2:	e01e      	b.n	8002532 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d107      	bne.n	800250c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e019      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
 8002500:	40021000 	.word	0x40021000
 8002504:	40007000 	.word	0x40007000
 8002508:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800250c:	4b0b      	ldr	r3, [pc, #44]	; (800253c <HAL_RCC_OscConfig+0x500>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	429a      	cmp	r2, r3
 800251e:	d106      	bne.n	800252e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800252a:	429a      	cmp	r2, r3
 800252c:	d001      	beq.n	8002532 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e000      	b.n	8002534 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40021000 	.word	0x40021000

08002540 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0d0      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002554:	4b6a      	ldr	r3, [pc, #424]	; (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d910      	bls.n	8002584 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002562:	4b67      	ldr	r3, [pc, #412]	; (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f023 0207 	bic.w	r2, r3, #7
 800256a:	4965      	ldr	r1, [pc, #404]	; (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	4313      	orrs	r3, r2
 8002570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002572:	4b63      	ldr	r3, [pc, #396]	; (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	429a      	cmp	r2, r3
 800257e:	d001      	beq.n	8002584 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e0b8      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d020      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800259c:	4b59      	ldr	r3, [pc, #356]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	4a58      	ldr	r2, [pc, #352]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80025a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025b4:	4b53      	ldr	r3, [pc, #332]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	4a52      	ldr	r2, [pc, #328]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c0:	4b50      	ldr	r3, [pc, #320]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	494d      	ldr	r1, [pc, #308]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d040      	beq.n	8002660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d107      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e6:	4b47      	ldr	r3, [pc, #284]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d115      	bne.n	800261e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e07f      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d107      	bne.n	800260e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025fe:	4b41      	ldr	r3, [pc, #260]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d109      	bne.n	800261e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e073      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260e:	4b3d      	ldr	r3, [pc, #244]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e06b      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800261e:	4b39      	ldr	r3, [pc, #228]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f023 0203 	bic.w	r2, r3, #3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	4936      	ldr	r1, [pc, #216]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 800262c:	4313      	orrs	r3, r2
 800262e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002630:	f7ff f988 	bl	8001944 <HAL_GetTick>
 8002634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002636:	e00a      	b.n	800264e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002638:	f7ff f984 	bl	8001944 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	f241 3288 	movw	r2, #5000	; 0x1388
 8002646:	4293      	cmp	r3, r2
 8002648:	d901      	bls.n	800264e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e053      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264e:	4b2d      	ldr	r3, [pc, #180]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f003 020c 	and.w	r2, r3, #12
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	429a      	cmp	r2, r3
 800265e:	d1eb      	bne.n	8002638 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002660:	4b27      	ldr	r3, [pc, #156]	; (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d210      	bcs.n	8002690 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266e:	4b24      	ldr	r3, [pc, #144]	; (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f023 0207 	bic.w	r2, r3, #7
 8002676:	4922      	ldr	r1, [pc, #136]	; (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	4313      	orrs	r3, r2
 800267c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800267e:	4b20      	ldr	r3, [pc, #128]	; (8002700 <HAL_RCC_ClockConfig+0x1c0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d001      	beq.n	8002690 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e032      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	d008      	beq.n	80026ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800269c:	4b19      	ldr	r3, [pc, #100]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4916      	ldr	r1, [pc, #88]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d009      	beq.n	80026ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026ba:	4b12      	ldr	r3, [pc, #72]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	490e      	ldr	r1, [pc, #56]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026ce:	f000 f821 	bl	8002714 <HAL_RCC_GetSysClockFreq>
 80026d2:	4602      	mov	r2, r0
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <HAL_RCC_ClockConfig+0x1c4>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	091b      	lsrs	r3, r3, #4
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	490a      	ldr	r1, [pc, #40]	; (8002708 <HAL_RCC_ClockConfig+0x1c8>)
 80026e0:	5ccb      	ldrb	r3, [r1, r3]
 80026e2:	fa22 f303 	lsr.w	r3, r2, r3
 80026e6:	4a09      	ldr	r2, [pc, #36]	; (800270c <HAL_RCC_ClockConfig+0x1cc>)
 80026e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026ea:	4b09      	ldr	r3, [pc, #36]	; (8002710 <HAL_RCC_ClockConfig+0x1d0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff f8e6 	bl	80018c0 <HAL_InitTick>

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40022000 	.word	0x40022000
 8002704:	40021000 	.word	0x40021000
 8002708:	08004a6c 	.word	0x08004a6c
 800270c:	20000038 	.word	0x20000038
 8002710:	2000003c 	.word	0x2000003c

08002714 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002714:	b490      	push	{r4, r7}
 8002716:	b08a      	sub	sp, #40	; 0x28
 8002718:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800271a:	4b29      	ldr	r3, [pc, #164]	; (80027c0 <HAL_RCC_GetSysClockFreq+0xac>)
 800271c:	1d3c      	adds	r4, r7, #4
 800271e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002720:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002724:	f240 2301 	movw	r3, #513	; 0x201
 8002728:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800272a:	2300      	movs	r3, #0
 800272c:	61fb      	str	r3, [r7, #28]
 800272e:	2300      	movs	r3, #0
 8002730:	61bb      	str	r3, [r7, #24]
 8002732:	2300      	movs	r3, #0
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800273a:	2300      	movs	r3, #0
 800273c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800273e:	4b21      	ldr	r3, [pc, #132]	; (80027c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f003 030c 	and.w	r3, r3, #12
 800274a:	2b04      	cmp	r3, #4
 800274c:	d002      	beq.n	8002754 <HAL_RCC_GetSysClockFreq+0x40>
 800274e:	2b08      	cmp	r3, #8
 8002750:	d003      	beq.n	800275a <HAL_RCC_GetSysClockFreq+0x46>
 8002752:	e02b      	b.n	80027ac <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002754:	4b1c      	ldr	r3, [pc, #112]	; (80027c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002756:	623b      	str	r3, [r7, #32]
      break;
 8002758:	e02b      	b.n	80027b2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	0c9b      	lsrs	r3, r3, #18
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	3328      	adds	r3, #40	; 0x28
 8002764:	443b      	add	r3, r7
 8002766:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800276a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d012      	beq.n	800279c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002776:	4b13      	ldr	r3, [pc, #76]	; (80027c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	0c5b      	lsrs	r3, r3, #17
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	3328      	adds	r3, #40	; 0x28
 8002782:	443b      	add	r3, r7
 8002784:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002788:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	4a0e      	ldr	r2, [pc, #56]	; (80027c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800278e:	fb03 f202 	mul.w	r2, r3, r2
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	fbb2 f3f3 	udiv	r3, r2, r3
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
 800279a:	e004      	b.n	80027a6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	4a0b      	ldr	r2, [pc, #44]	; (80027cc <HAL_RCC_GetSysClockFreq+0xb8>)
 80027a0:	fb02 f303 	mul.w	r3, r2, r3
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	623b      	str	r3, [r7, #32]
      break;
 80027aa:	e002      	b.n	80027b2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027ac:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027ae:	623b      	str	r3, [r7, #32]
      break;
 80027b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027b2:	6a3b      	ldr	r3, [r7, #32]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3728      	adds	r7, #40	; 0x28
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc90      	pop	{r4, r7}
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	08004a5c 	.word	0x08004a5c
 80027c4:	40021000 	.word	0x40021000
 80027c8:	007a1200 	.word	0x007a1200
 80027cc:	003d0900 	.word	0x003d0900

080027d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027d4:	4b02      	ldr	r3, [pc, #8]	; (80027e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80027d6:	681b      	ldr	r3, [r3, #0]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr
 80027e0:	20000038 	.word	0x20000038

080027e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027e8:	f7ff fff2 	bl	80027d0 <HAL_RCC_GetHCLKFreq>
 80027ec:	4602      	mov	r2, r0
 80027ee:	4b05      	ldr	r3, [pc, #20]	; (8002804 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	0a1b      	lsrs	r3, r3, #8
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	4903      	ldr	r1, [pc, #12]	; (8002808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027fa:	5ccb      	ldrb	r3, [r1, r3]
 80027fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002800:	4618      	mov	r0, r3
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000
 8002808:	08004a7c 	.word	0x08004a7c

0800280c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002810:	f7ff ffde 	bl	80027d0 <HAL_RCC_GetHCLKFreq>
 8002814:	4602      	mov	r2, r0
 8002816:	4b05      	ldr	r3, [pc, #20]	; (800282c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	0adb      	lsrs	r3, r3, #11
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	4903      	ldr	r1, [pc, #12]	; (8002830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002822:	5ccb      	ldrb	r3, [r1, r3]
 8002824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002828:	4618      	mov	r0, r3
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40021000 	.word	0x40021000
 8002830:	08004a7c 	.word	0x08004a7c

08002834 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800283c:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <RCC_Delay+0x34>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a0a      	ldr	r2, [pc, #40]	; (800286c <RCC_Delay+0x38>)
 8002842:	fba2 2303 	umull	r2, r3, r2, r3
 8002846:	0a5b      	lsrs	r3, r3, #9
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	fb02 f303 	mul.w	r3, r2, r3
 800284e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002850:	bf00      	nop
  }
  while (Delay --);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	1e5a      	subs	r2, r3, #1
 8002856:	60fa      	str	r2, [r7, #12]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1f9      	bne.n	8002850 <RCC_Delay+0x1c>
}
 800285c:	bf00      	nop
 800285e:	bf00      	nop
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr
 8002868:	20000038 	.word	0x20000038
 800286c:	10624dd3 	.word	0x10624dd3

08002870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e041      	b.n	8002906 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d106      	bne.n	800289c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7fe fe90 	bl	80015bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2202      	movs	r2, #2
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3304      	adds	r3, #4
 80028ac:	4619      	mov	r1, r3
 80028ae:	4610      	mov	r0, r2
 80028b0:	f000 fc28 	bl	8003104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b01      	cmp	r3, #1
 8002922:	d001      	beq.n	8002928 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e03a      	b.n	800299e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a18      	ldr	r2, [pc, #96]	; (80029a8 <HAL_TIM_Base_Start_IT+0x98>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d00e      	beq.n	8002968 <HAL_TIM_Base_Start_IT+0x58>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002952:	d009      	beq.n	8002968 <HAL_TIM_Base_Start_IT+0x58>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a14      	ldr	r2, [pc, #80]	; (80029ac <HAL_TIM_Base_Start_IT+0x9c>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d004      	beq.n	8002968 <HAL_TIM_Base_Start_IT+0x58>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a13      	ldr	r2, [pc, #76]	; (80029b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d111      	bne.n	800298c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2b06      	cmp	r3, #6
 8002978:	d010      	beq.n	800299c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f042 0201 	orr.w	r2, r2, #1
 8002988:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800298a:	e007      	b.n	800299c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0201 	orr.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr
 80029a8:	40012c00 	.word	0x40012c00
 80029ac:	40000400 	.word	0x40000400
 80029b0:	40000800 	.word	0x40000800

080029b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e041      	b.n	8002a4a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d106      	bne.n	80029e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f839 	bl	8002a52 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3304      	adds	r3, #4
 80029f0:	4619      	mov	r1, r3
 80029f2:	4610      	mov	r0, r2
 80029f4:	f000 fb86 	bl	8003104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr

08002a64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d109      	bne.n	8002a88 <HAL_TIM_PWM_Start+0x24>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	bf14      	ite	ne
 8002a80:	2301      	movne	r3, #1
 8002a82:	2300      	moveq	r3, #0
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	e022      	b.n	8002ace <HAL_TIM_PWM_Start+0x6a>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d109      	bne.n	8002aa2 <HAL_TIM_PWM_Start+0x3e>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	bf14      	ite	ne
 8002a9a:	2301      	movne	r3, #1
 8002a9c:	2300      	moveq	r3, #0
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	e015      	b.n	8002ace <HAL_TIM_PWM_Start+0x6a>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d109      	bne.n	8002abc <HAL_TIM_PWM_Start+0x58>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	bf14      	ite	ne
 8002ab4:	2301      	movne	r3, #1
 8002ab6:	2300      	moveq	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	e008      	b.n	8002ace <HAL_TIM_PWM_Start+0x6a>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	bf14      	ite	ne
 8002ac8:	2301      	movne	r3, #1
 8002aca:	2300      	moveq	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e05e      	b.n	8002b94 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d104      	bne.n	8002ae6 <HAL_TIM_PWM_Start+0x82>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ae4:	e013      	b.n	8002b0e <HAL_TIM_PWM_Start+0xaa>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	d104      	bne.n	8002af6 <HAL_TIM_PWM_Start+0x92>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002af4:	e00b      	b.n	8002b0e <HAL_TIM_PWM_Start+0xaa>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d104      	bne.n	8002b06 <HAL_TIM_PWM_Start+0xa2>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2202      	movs	r2, #2
 8002b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b04:	e003      	b.n	8002b0e <HAL_TIM_PWM_Start+0xaa>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2202      	movs	r2, #2
 8002b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2201      	movs	r2, #1
 8002b14:	6839      	ldr	r1, [r7, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 fd74 	bl	8003604 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a1e      	ldr	r2, [pc, #120]	; (8002b9c <HAL_TIM_PWM_Start+0x138>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d107      	bne.n	8002b36 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a18      	ldr	r2, [pc, #96]	; (8002b9c <HAL_TIM_PWM_Start+0x138>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d00e      	beq.n	8002b5e <HAL_TIM_PWM_Start+0xfa>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b48:	d009      	beq.n	8002b5e <HAL_TIM_PWM_Start+0xfa>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a14      	ldr	r2, [pc, #80]	; (8002ba0 <HAL_TIM_PWM_Start+0x13c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d004      	beq.n	8002b5e <HAL_TIM_PWM_Start+0xfa>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a12      	ldr	r2, [pc, #72]	; (8002ba4 <HAL_TIM_PWM_Start+0x140>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d111      	bne.n	8002b82 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2b06      	cmp	r3, #6
 8002b6e:	d010      	beq.n	8002b92 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0201 	orr.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b80:	e007      	b.n	8002b92 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f042 0201 	orr.w	r2, r2, #1
 8002b90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40012c00 	.word	0x40012c00
 8002ba0:	40000400 	.word	0x40000400
 8002ba4:	40000800 	.word	0x40000800

08002ba8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d122      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d11b      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0202 	mvn.w	r2, #2
 8002bd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 fa6f 	bl	80030ce <HAL_TIM_IC_CaptureCallback>
 8002bf0:	e005      	b.n	8002bfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 fa62 	bl	80030bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 fa71 	bl	80030e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d122      	bne.n	8002c58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d11b      	bne.n	8002c58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f06f 0204 	mvn.w	r2, #4
 8002c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 fa45 	bl	80030ce <HAL_TIM_IC_CaptureCallback>
 8002c44:	e005      	b.n	8002c52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 fa38 	bl	80030bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 fa47 	bl	80030e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d122      	bne.n	8002cac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d11b      	bne.n	8002cac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f06f 0208 	mvn.w	r2, #8
 8002c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2204      	movs	r2, #4
 8002c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fa1b 	bl	80030ce <HAL_TIM_IC_CaptureCallback>
 8002c98:	e005      	b.n	8002ca6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 fa0e 	bl	80030bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 fa1d 	bl	80030e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f003 0310 	and.w	r3, r3, #16
 8002cb6:	2b10      	cmp	r3, #16
 8002cb8:	d122      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	2b10      	cmp	r3, #16
 8002cc6:	d11b      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f06f 0210 	mvn.w	r2, #16
 8002cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2208      	movs	r2, #8
 8002cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f9f1 	bl	80030ce <HAL_TIM_IC_CaptureCallback>
 8002cec:	e005      	b.n	8002cfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f9e4 	bl	80030bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f9f3 	bl	80030e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d10e      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d107      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f06f 0201 	mvn.w	r2, #1
 8002d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7fe fbfe 	bl	8001528 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d36:	2b80      	cmp	r3, #128	; 0x80
 8002d38:	d10e      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d44:	2b80      	cmp	r3, #128	; 0x80
 8002d46:	d107      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fce1 	bl	800371a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d62:	2b40      	cmp	r3, #64	; 0x40
 8002d64:	d10e      	bne.n	8002d84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d70:	2b40      	cmp	r3, #64	; 0x40
 8002d72:	d107      	bne.n	8002d84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f9b7 	bl	80030f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	f003 0320 	and.w	r3, r3, #32
 8002d8e:	2b20      	cmp	r3, #32
 8002d90:	d10e      	bne.n	8002db0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	d107      	bne.n	8002db0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f06f 0220 	mvn.w	r2, #32
 8002da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fcac 	bl	8003708 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002db0:	bf00      	nop
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e0ac      	b.n	8002f2c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b0c      	cmp	r3, #12
 8002dde:	f200 809f 	bhi.w	8002f20 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002de2:	a201      	add	r2, pc, #4	; (adr r2, 8002de8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de8:	08002e1d 	.word	0x08002e1d
 8002dec:	08002f21 	.word	0x08002f21
 8002df0:	08002f21 	.word	0x08002f21
 8002df4:	08002f21 	.word	0x08002f21
 8002df8:	08002e5d 	.word	0x08002e5d
 8002dfc:	08002f21 	.word	0x08002f21
 8002e00:	08002f21 	.word	0x08002f21
 8002e04:	08002f21 	.word	0x08002f21
 8002e08:	08002e9f 	.word	0x08002e9f
 8002e0c:	08002f21 	.word	0x08002f21
 8002e10:	08002f21 	.word	0x08002f21
 8002e14:	08002f21 	.word	0x08002f21
 8002e18:	08002edf 	.word	0x08002edf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68b9      	ldr	r1, [r7, #8]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 f9d0 	bl	80031c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	699a      	ldr	r2, [r3, #24]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0208 	orr.w	r2, r2, #8
 8002e36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699a      	ldr	r2, [r3, #24]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0204 	bic.w	r2, r2, #4
 8002e46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6999      	ldr	r1, [r3, #24]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	691a      	ldr	r2, [r3, #16]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	619a      	str	r2, [r3, #24]
      break;
 8002e5a:	e062      	b.n	8002f22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68b9      	ldr	r1, [r7, #8]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 fa16 	bl	8003294 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699a      	ldr	r2, [r3, #24]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699a      	ldr	r2, [r3, #24]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6999      	ldr	r1, [r3, #24]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	021a      	lsls	r2, r3, #8
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	619a      	str	r2, [r3, #24]
      break;
 8002e9c:	e041      	b.n	8002f22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68b9      	ldr	r1, [r7, #8]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 fa5f 	bl	8003368 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	69da      	ldr	r2, [r3, #28]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f042 0208 	orr.w	r2, r2, #8
 8002eb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	69da      	ldr	r2, [r3, #28]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0204 	bic.w	r2, r2, #4
 8002ec8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	69d9      	ldr	r1, [r3, #28]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	691a      	ldr	r2, [r3, #16]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	61da      	str	r2, [r3, #28]
      break;
 8002edc:	e021      	b.n	8002f22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68b9      	ldr	r1, [r7, #8]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f000 faa9 	bl	800343c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	69da      	ldr	r2, [r3, #28]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ef8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	69da      	ldr	r2, [r3, #28]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	69d9      	ldr	r1, [r3, #28]
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	021a      	lsls	r2, r3, #8
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	61da      	str	r2, [r3, #28]
      break;
 8002f1e:	e000      	b.n	8002f22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002f20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <HAL_TIM_ConfigClockSource+0x18>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e0b3      	b.n	80030b4 <HAL_TIM_ConfigClockSource+0x180>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f84:	d03e      	beq.n	8003004 <HAL_TIM_ConfigClockSource+0xd0>
 8002f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f8a:	f200 8087 	bhi.w	800309c <HAL_TIM_ConfigClockSource+0x168>
 8002f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f92:	f000 8085 	beq.w	80030a0 <HAL_TIM_ConfigClockSource+0x16c>
 8002f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f9a:	d87f      	bhi.n	800309c <HAL_TIM_ConfigClockSource+0x168>
 8002f9c:	2b70      	cmp	r3, #112	; 0x70
 8002f9e:	d01a      	beq.n	8002fd6 <HAL_TIM_ConfigClockSource+0xa2>
 8002fa0:	2b70      	cmp	r3, #112	; 0x70
 8002fa2:	d87b      	bhi.n	800309c <HAL_TIM_ConfigClockSource+0x168>
 8002fa4:	2b60      	cmp	r3, #96	; 0x60
 8002fa6:	d050      	beq.n	800304a <HAL_TIM_ConfigClockSource+0x116>
 8002fa8:	2b60      	cmp	r3, #96	; 0x60
 8002faa:	d877      	bhi.n	800309c <HAL_TIM_ConfigClockSource+0x168>
 8002fac:	2b50      	cmp	r3, #80	; 0x50
 8002fae:	d03c      	beq.n	800302a <HAL_TIM_ConfigClockSource+0xf6>
 8002fb0:	2b50      	cmp	r3, #80	; 0x50
 8002fb2:	d873      	bhi.n	800309c <HAL_TIM_ConfigClockSource+0x168>
 8002fb4:	2b40      	cmp	r3, #64	; 0x40
 8002fb6:	d058      	beq.n	800306a <HAL_TIM_ConfigClockSource+0x136>
 8002fb8:	2b40      	cmp	r3, #64	; 0x40
 8002fba:	d86f      	bhi.n	800309c <HAL_TIM_ConfigClockSource+0x168>
 8002fbc:	2b30      	cmp	r3, #48	; 0x30
 8002fbe:	d064      	beq.n	800308a <HAL_TIM_ConfigClockSource+0x156>
 8002fc0:	2b30      	cmp	r3, #48	; 0x30
 8002fc2:	d86b      	bhi.n	800309c <HAL_TIM_ConfigClockSource+0x168>
 8002fc4:	2b20      	cmp	r3, #32
 8002fc6:	d060      	beq.n	800308a <HAL_TIM_ConfigClockSource+0x156>
 8002fc8:	2b20      	cmp	r3, #32
 8002fca:	d867      	bhi.n	800309c <HAL_TIM_ConfigClockSource+0x168>
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d05c      	beq.n	800308a <HAL_TIM_ConfigClockSource+0x156>
 8002fd0:	2b10      	cmp	r3, #16
 8002fd2:	d05a      	beq.n	800308a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002fd4:	e062      	b.n	800309c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6818      	ldr	r0, [r3, #0]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	6899      	ldr	r1, [r3, #8]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	f000 faee 	bl	80035c6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ff8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	609a      	str	r2, [r3, #8]
      break;
 8003002:	e04e      	b.n	80030a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6818      	ldr	r0, [r3, #0]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	6899      	ldr	r1, [r3, #8]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f000 fad7 	bl	80035c6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003026:	609a      	str	r2, [r3, #8]
      break;
 8003028:	e03b      	b.n	80030a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	6859      	ldr	r1, [r3, #4]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	461a      	mov	r2, r3
 8003038:	f000 fa4e 	bl	80034d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2150      	movs	r1, #80	; 0x50
 8003042:	4618      	mov	r0, r3
 8003044:	f000 faa5 	bl	8003592 <TIM_ITRx_SetConfig>
      break;
 8003048:	e02b      	b.n	80030a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6818      	ldr	r0, [r3, #0]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	6859      	ldr	r1, [r3, #4]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	461a      	mov	r2, r3
 8003058:	f000 fa6c 	bl	8003534 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2160      	movs	r1, #96	; 0x60
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fa95 	bl	8003592 <TIM_ITRx_SetConfig>
      break;
 8003068:	e01b      	b.n	80030a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6818      	ldr	r0, [r3, #0]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	6859      	ldr	r1, [r3, #4]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	461a      	mov	r2, r3
 8003078:	f000 fa2e 	bl	80034d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2140      	movs	r1, #64	; 0x40
 8003082:	4618      	mov	r0, r3
 8003084:	f000 fa85 	bl	8003592 <TIM_ITRx_SetConfig>
      break;
 8003088:	e00b      	b.n	80030a2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4619      	mov	r1, r3
 8003094:	4610      	mov	r0, r2
 8003096:	f000 fa7c 	bl	8003592 <TIM_ITRx_SetConfig>
        break;
 800309a:	e002      	b.n	80030a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800309c:	bf00      	nop
 800309e:	e000      	b.n	80030a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80030a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bc80      	pop	{r7}
 80030cc:	4770      	bx	lr

080030ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr

080030e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bc80      	pop	{r7}
 80030f0:	4770      	bx	lr

080030f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr

08003104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a29      	ldr	r2, [pc, #164]	; (80031bc <TIM_Base_SetConfig+0xb8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d00b      	beq.n	8003134 <TIM_Base_SetConfig+0x30>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003122:	d007      	beq.n	8003134 <TIM_Base_SetConfig+0x30>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a26      	ldr	r2, [pc, #152]	; (80031c0 <TIM_Base_SetConfig+0xbc>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d003      	beq.n	8003134 <TIM_Base_SetConfig+0x30>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a25      	ldr	r2, [pc, #148]	; (80031c4 <TIM_Base_SetConfig+0xc0>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d108      	bne.n	8003146 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800313a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	4313      	orrs	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a1c      	ldr	r2, [pc, #112]	; (80031bc <TIM_Base_SetConfig+0xb8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d00b      	beq.n	8003166 <TIM_Base_SetConfig+0x62>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003154:	d007      	beq.n	8003166 <TIM_Base_SetConfig+0x62>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a19      	ldr	r2, [pc, #100]	; (80031c0 <TIM_Base_SetConfig+0xbc>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d003      	beq.n	8003166 <TIM_Base_SetConfig+0x62>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a18      	ldr	r2, [pc, #96]	; (80031c4 <TIM_Base_SetConfig+0xc0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d108      	bne.n	8003178 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800316c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	4313      	orrs	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	4313      	orrs	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a07      	ldr	r2, [pc, #28]	; (80031bc <TIM_Base_SetConfig+0xb8>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d103      	bne.n	80031ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	615a      	str	r2, [r3, #20]
}
 80031b2:	bf00      	nop
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr
 80031bc:	40012c00 	.word	0x40012c00
 80031c0:	40000400 	.word	0x40000400
 80031c4:	40000800 	.word	0x40000800

080031c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	f023 0201 	bic.w	r2, r3, #1
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f023 0303 	bic.w	r3, r3, #3
 80031fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	4313      	orrs	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f023 0302 	bic.w	r3, r3, #2
 8003210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	4313      	orrs	r3, r2
 800321a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a1c      	ldr	r2, [pc, #112]	; (8003290 <TIM_OC1_SetConfig+0xc8>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d10c      	bne.n	800323e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f023 0308 	bic.w	r3, r3, #8
 800322a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	4313      	orrs	r3, r2
 8003234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f023 0304 	bic.w	r3, r3, #4
 800323c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a13      	ldr	r2, [pc, #76]	; (8003290 <TIM_OC1_SetConfig+0xc8>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d111      	bne.n	800326a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800324c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003254:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	4313      	orrs	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	4313      	orrs	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	621a      	str	r2, [r3, #32]
}
 8003284:	bf00      	nop
 8003286:	371c      	adds	r7, #28
 8003288:	46bd      	mov	sp, r7
 800328a:	bc80      	pop	{r7}
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40012c00 	.word	0x40012c00

08003294 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003294:	b480      	push	{r7}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	f023 0210 	bic.w	r2, r3, #16
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	021b      	lsls	r3, r3, #8
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	f023 0320 	bic.w	r3, r3, #32
 80032de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a1d      	ldr	r2, [pc, #116]	; (8003364 <TIM_OC2_SetConfig+0xd0>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d10d      	bne.n	8003310 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	011b      	lsls	r3, r3, #4
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4313      	orrs	r3, r2
 8003306:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800330e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a14      	ldr	r2, [pc, #80]	; (8003364 <TIM_OC2_SetConfig+0xd0>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d113      	bne.n	8003340 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800331e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003326:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	4313      	orrs	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	621a      	str	r2, [r3, #32]
}
 800335a:	bf00      	nop
 800335c:	371c      	adds	r7, #28
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr
 8003364:	40012c00 	.word	0x40012c00

08003368 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003368:	b480      	push	{r7}
 800336a:	b087      	sub	sp, #28
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 0303 	bic.w	r3, r3, #3
 800339e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	021b      	lsls	r3, r3, #8
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a1d      	ldr	r2, [pc, #116]	; (8003438 <TIM_OC3_SetConfig+0xd0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d10d      	bne.n	80033e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	021b      	lsls	r3, r3, #8
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a14      	ldr	r2, [pc, #80]	; (8003438 <TIM_OC3_SetConfig+0xd0>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d113      	bne.n	8003412 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	4313      	orrs	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	621a      	str	r2, [r3, #32]
}
 800342c:	bf00      	nop
 800342e:	371c      	adds	r7, #28
 8003430:	46bd      	mov	sp, r7
 8003432:	bc80      	pop	{r7}
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	40012c00 	.word	0x40012c00

0800343c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800343c:	b480      	push	{r7}
 800343e:	b087      	sub	sp, #28
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800346a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	021b      	lsls	r3, r3, #8
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	4313      	orrs	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003486:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	031b      	lsls	r3, r3, #12
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	4313      	orrs	r3, r2
 8003492:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a0f      	ldr	r2, [pc, #60]	; (80034d4 <TIM_OC4_SetConfig+0x98>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d109      	bne.n	80034b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	019b      	lsls	r3, r3, #6
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	621a      	str	r2, [r3, #32]
}
 80034ca:	bf00      	nop
 80034cc:	371c      	adds	r7, #28
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bc80      	pop	{r7}
 80034d2:	4770      	bx	lr
 80034d4:	40012c00 	.word	0x40012c00

080034d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034d8:	b480      	push	{r7}
 80034da:	b087      	sub	sp, #28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	f023 0201 	bic.w	r2, r3, #1
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f023 030a 	bic.w	r3, r3, #10
 8003514:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4313      	orrs	r3, r2
 800351c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	621a      	str	r2, [r3, #32]
}
 800352a:	bf00      	nop
 800352c:	371c      	adds	r7, #28
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr

08003534 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003534:	b480      	push	{r7}
 8003536:	b087      	sub	sp, #28
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	f023 0210 	bic.w	r2, r3, #16
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800355e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	031b      	lsls	r3, r3, #12
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	4313      	orrs	r3, r2
 8003568:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003570:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	621a      	str	r2, [r3, #32]
}
 8003588:	bf00      	nop
 800358a:	371c      	adds	r7, #28
 800358c:	46bd      	mov	sp, r7
 800358e:	bc80      	pop	{r7}
 8003590:	4770      	bx	lr

08003592 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003592:	b480      	push	{r7}
 8003594:	b085      	sub	sp, #20
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f043 0307 	orr.w	r3, r3, #7
 80035b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	609a      	str	r2, [r3, #8]
}
 80035bc:	bf00      	nop
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bc80      	pop	{r7}
 80035c4:	4770      	bx	lr

080035c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b087      	sub	sp, #28
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	60f8      	str	r0, [r7, #12]
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	607a      	str	r2, [r7, #4]
 80035d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	021a      	lsls	r2, r3, #8
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	431a      	orrs	r2, r3
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	609a      	str	r2, [r3, #8]
}
 80035fa:	bf00      	nop
 80035fc:	371c      	adds	r7, #28
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr

08003604 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003604:	b480      	push	{r7}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f003 031f 	and.w	r3, r3, #31
 8003616:	2201      	movs	r2, #1
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6a1a      	ldr	r2, [r3, #32]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	43db      	mvns	r3, r3
 8003626:	401a      	ands	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a1a      	ldr	r2, [r3, #32]
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	f003 031f 	and.w	r3, r3, #31
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	fa01 f303 	lsl.w	r3, r1, r3
 800363c:	431a      	orrs	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	621a      	str	r2, [r3, #32]
}
 8003642:	bf00      	nop
 8003644:	371c      	adds	r7, #28
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr

0800364c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800365c:	2b01      	cmp	r3, #1
 800365e:	d101      	bne.n	8003664 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003660:	2302      	movs	r3, #2
 8003662:	e046      	b.n	80036f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800368a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	4313      	orrs	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a16      	ldr	r2, [pc, #88]	; (80036fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d00e      	beq.n	80036c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b0:	d009      	beq.n	80036c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a12      	ldr	r2, [pc, #72]	; (8003700 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d004      	beq.n	80036c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a10      	ldr	r2, [pc, #64]	; (8003704 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d10c      	bne.n	80036e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr
 80036fc:	40012c00 	.word	0x40012c00
 8003700:	40000400 	.word	0x40000400
 8003704:	40000800 	.word	0x40000800

08003708 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr

0800371a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr

0800372c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e03f      	b.n	80037be <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7fd ffa4 	bl	80016a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2224      	movs	r2, #36	; 0x24
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800376e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 fc25 	bl	8003fc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	691a      	ldr	r2, [r3, #16]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003784:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	695a      	ldr	r2, [r3, #20]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003794:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68da      	ldr	r2, [r3, #12]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b08a      	sub	sp, #40	; 0x28
 80037ca:	af02      	add	r7, sp, #8
 80037cc:	60f8      	str	r0, [r7, #12]
 80037ce:	60b9      	str	r1, [r7, #8]
 80037d0:	603b      	str	r3, [r7, #0]
 80037d2:	4613      	mov	r3, r2
 80037d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b20      	cmp	r3, #32
 80037e4:	d17c      	bne.n	80038e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d002      	beq.n	80037f2 <HAL_UART_Transmit+0x2c>
 80037ec:	88fb      	ldrh	r3, [r7, #6]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e075      	b.n	80038e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d101      	bne.n	8003804 <HAL_UART_Transmit+0x3e>
 8003800:	2302      	movs	r3, #2
 8003802:	e06e      	b.n	80038e2 <HAL_UART_Transmit+0x11c>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2221      	movs	r2, #33	; 0x21
 8003816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800381a:	f7fe f893 	bl	8001944 <HAL_GetTick>
 800381e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	88fa      	ldrh	r2, [r7, #6]
 8003824:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	88fa      	ldrh	r2, [r7, #6]
 800382a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003834:	d108      	bne.n	8003848 <HAL_UART_Transmit+0x82>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d104      	bne.n	8003848 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800383e:	2300      	movs	r3, #0
 8003840:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	61bb      	str	r3, [r7, #24]
 8003846:	e003      	b.n	8003850 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800384c:	2300      	movs	r3, #0
 800384e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003858:	e02a      	b.n	80038b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	2200      	movs	r2, #0
 8003862:	2180      	movs	r1, #128	; 0x80
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 fa11 	bl	8003c8c <UART_WaitOnFlagUntilTimeout>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e036      	b.n	80038e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10b      	bne.n	8003892 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	881b      	ldrh	r3, [r3, #0]
 800387e:	461a      	mov	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003888:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	3302      	adds	r3, #2
 800388e:	61bb      	str	r3, [r7, #24]
 8003890:	e007      	b.n	80038a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	781a      	ldrb	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	3301      	adds	r3, #1
 80038a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1cf      	bne.n	800385a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2200      	movs	r2, #0
 80038c2:	2140      	movs	r1, #64	; 0x40
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f000 f9e1 	bl	8003c8c <UART_WaitOnFlagUntilTimeout>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e006      	b.n	80038e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80038dc:	2300      	movs	r3, #0
 80038de:	e000      	b.n	80038e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80038e0:	2302      	movs	r3, #2
  }
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3720      	adds	r7, #32
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
	...

080038ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08a      	sub	sp, #40	; 0x28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800390c:	2300      	movs	r3, #0
 800390e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003910:	2300      	movs	r3, #0
 8003912:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10d      	bne.n	800393e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	f003 0320 	and.w	r3, r3, #32
 8003928:	2b00      	cmp	r3, #0
 800392a:	d008      	beq.n	800393e <HAL_UART_IRQHandler+0x52>
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	f003 0320 	and.w	r3, r3, #32
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 fa99 	bl	8003e6e <UART_Receive_IT>
      return;
 800393c:	e17b      	b.n	8003c36 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 80b1 	beq.w	8003aa8 <HAL_UART_IRQHandler+0x1bc>
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b00      	cmp	r3, #0
 800394e:	d105      	bne.n	800395c <HAL_UART_IRQHandler+0x70>
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 80a6 	beq.w	8003aa8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <HAL_UART_IRQHandler+0x90>
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	f043 0201 	orr.w	r2, r3, #1
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <HAL_UART_IRQHandler+0xb0>
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b00      	cmp	r3, #0
 800398e:	d005      	beq.n	800399c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	f043 0202 	orr.w	r2, r3, #2
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00a      	beq.n	80039bc <HAL_UART_IRQHandler+0xd0>
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b4:	f043 0204 	orr.w	r2, r3, #4
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00f      	beq.n	80039e6 <HAL_UART_IRQHandler+0xfa>
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	f003 0320 	and.w	r3, r3, #32
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d104      	bne.n	80039da <HAL_UART_IRQHandler+0xee>
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d005      	beq.n	80039e6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	f043 0208 	orr.w	r2, r3, #8
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f000 811e 	beq.w	8003c2c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	f003 0320 	and.w	r3, r3, #32
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d007      	beq.n	8003a0a <HAL_UART_IRQHandler+0x11e>
 80039fa:	6a3b      	ldr	r3, [r7, #32]
 80039fc:	f003 0320 	and.w	r3, r3, #32
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fa32 	bl	8003e6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	bf14      	ite	ne
 8003a18:	2301      	movne	r3, #1
 8003a1a:	2300      	moveq	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d102      	bne.n	8003a32 <HAL_UART_IRQHandler+0x146>
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d031      	beq.n	8003a96 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f974 	bl	8003d20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d023      	beq.n	8003a8e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695a      	ldr	r2, [r3, #20]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a54:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d013      	beq.n	8003a86 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a62:	4a76      	ldr	r2, [pc, #472]	; (8003c3c <HAL_UART_IRQHandler+0x350>)
 8003a64:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fe f8bc 	bl	8001be8 <HAL_DMA_Abort_IT>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d016      	beq.n	8003aa4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a80:	4610      	mov	r0, r2
 8003a82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a84:	e00e      	b.n	8003aa4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f8ec 	bl	8003c64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a8c:	e00a      	b.n	8003aa4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f8e8 	bl	8003c64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a94:	e006      	b.n	8003aa4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f8e4 	bl	8003c64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003aa2:	e0c3      	b.n	8003c2c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa4:	bf00      	nop
    return;
 8003aa6:	e0c1      	b.n	8003c2c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	f040 80a1 	bne.w	8003bf4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	f003 0310 	and.w	r3, r3, #16
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 809b 	beq.w	8003bf4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	f003 0310 	and.w	r3, r3, #16
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 8095 	beq.w	8003bf4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003aca:	2300      	movs	r3, #0
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d04e      	beq.n	8003b8c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003af8:	8a3b      	ldrh	r3, [r7, #16]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 8098 	beq.w	8003c30 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b04:	8a3a      	ldrh	r2, [r7, #16]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	f080 8092 	bcs.w	8003c30 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8a3a      	ldrh	r2, [r7, #16]
 8003b10:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	2b20      	cmp	r3, #32
 8003b1a:	d02b      	beq.n	8003b74 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68da      	ldr	r2, [r3, #12]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b2a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695a      	ldr	r2, [r3, #20]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0201 	bic.w	r2, r2, #1
 8003b3a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695a      	ldr	r2, [r3, #20]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b4a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0210 	bic.w	r2, r2, #16
 8003b68:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fd ffff 	bl	8001b72 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	4619      	mov	r1, r3
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 f876 	bl	8003c76 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003b8a:	e051      	b.n	8003c30 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d047      	beq.n	8003c34 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003ba4:	8a7b      	ldrh	r3, [r7, #18]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d044      	beq.n	8003c34 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68da      	ldr	r2, [r3, #12]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003bb8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695a      	ldr	r2, [r3, #20]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0201 	bic.w	r2, r2, #1
 8003bc8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68da      	ldr	r2, [r3, #12]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0210 	bic.w	r2, r2, #16
 8003be6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003be8:	8a7b      	ldrh	r3, [r7, #18]
 8003bea:	4619      	mov	r1, r3
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f842 	bl	8003c76 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003bf2:	e01f      	b.n	8003c34 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d008      	beq.n	8003c10 <HAL_UART_IRQHandler+0x324>
 8003bfe:	6a3b      	ldr	r3, [r7, #32]
 8003c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f8c9 	bl	8003da0 <UART_Transmit_IT>
    return;
 8003c0e:	e012      	b.n	8003c36 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00d      	beq.n	8003c36 <HAL_UART_IRQHandler+0x34a>
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d008      	beq.n	8003c36 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f90a 	bl	8003e3e <UART_EndTransmit_IT>
    return;
 8003c2a:	e004      	b.n	8003c36 <HAL_UART_IRQHandler+0x34a>
    return;
 8003c2c:	bf00      	nop
 8003c2e:	e002      	b.n	8003c36 <HAL_UART_IRQHandler+0x34a>
      return;
 8003c30:	bf00      	nop
 8003c32:	e000      	b.n	8003c36 <HAL_UART_IRQHandler+0x34a>
      return;
 8003c34:	bf00      	nop
  }
}
 8003c36:	3728      	adds	r7, #40	; 0x28
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	08003d79 	.word	0x08003d79

08003c40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bc80      	pop	{r7}
 8003c50:	4770      	bx	lr

08003c52 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bc80      	pop	{r7}
 8003c62:	4770      	bx	lr

08003c64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bc80      	pop	{r7}
 8003c74:	4770      	bx	lr

08003c76 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr

08003c8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	603b      	str	r3, [r7, #0]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c9c:	e02c      	b.n	8003cf8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca4:	d028      	beq.n	8003cf8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d007      	beq.n	8003cbc <UART_WaitOnFlagUntilTimeout+0x30>
 8003cac:	f7fd fe4a 	bl	8001944 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d21d      	bcs.n	8003cf8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003cca:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695a      	ldr	r2, [r3, #20]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0201 	bic.w	r2, r2, #1
 8003cda:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e00f      	b.n	8003d18 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	4013      	ands	r3, r2
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	bf0c      	ite	eq
 8003d08:	2301      	moveq	r3, #1
 8003d0a:	2300      	movne	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	461a      	mov	r2, r3
 8003d10:	79fb      	ldrb	r3, [r7, #7]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d0c3      	beq.n	8003c9e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d36:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695a      	ldr	r2, [r3, #20]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0201 	bic.w	r2, r2, #1
 8003d46:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d107      	bne.n	8003d60 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0210 	bic.w	r2, r2, #16
 8003d5e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr

08003d78 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f7ff ff66 	bl	8003c64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d98:	bf00      	nop
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b21      	cmp	r3, #33	; 0x21
 8003db2:	d13e      	bne.n	8003e32 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dbc:	d114      	bne.n	8003de8 <UART_Transmit_IT+0x48>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d110      	bne.n	8003de8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	881b      	ldrh	r3, [r3, #0]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dda:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	1c9a      	adds	r2, r3, #2
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	621a      	str	r2, [r3, #32]
 8003de6:	e008      	b.n	8003dfa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	1c59      	adds	r1, r3, #1
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	6211      	str	r1, [r2, #32]
 8003df2:	781a      	ldrb	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	4619      	mov	r1, r3
 8003e08:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10f      	bne.n	8003e2e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e1c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e2c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	e000      	b.n	8003e34 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e32:	2302      	movs	r3, #2
  }
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3714      	adds	r7, #20
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bc80      	pop	{r7}
 8003e3c:	4770      	bx	lr

08003e3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b082      	sub	sp, #8
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68da      	ldr	r2, [r3, #12]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7ff feee 	bl	8003c40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b086      	sub	sp, #24
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b22      	cmp	r3, #34	; 0x22
 8003e80:	f040 8099 	bne.w	8003fb6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e8c:	d117      	bne.n	8003ebe <UART_Receive_IT+0x50>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d113      	bne.n	8003ebe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e96:	2300      	movs	r3, #0
 8003e98:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb6:	1c9a      	adds	r2, r3, #2
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	629a      	str	r2, [r3, #40]	; 0x28
 8003ebc:	e026      	b.n	8003f0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed0:	d007      	beq.n	8003ee2 <UART_Receive_IT+0x74>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10a      	bne.n	8003ef0 <UART_Receive_IT+0x82>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d106      	bne.n	8003ef0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	701a      	strb	r2, [r3, #0]
 8003eee:	e008      	b.n	8003f02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003efc:	b2da      	uxtb	r2, r3
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f06:	1c5a      	adds	r2, r3, #1
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	3b01      	subs	r3, #1
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	4619      	mov	r1, r3
 8003f1a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d148      	bne.n	8003fb2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68da      	ldr	r2, [r3, #12]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 0220 	bic.w	r2, r2, #32
 8003f2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695a      	ldr	r2, [r3, #20]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0201 	bic.w	r2, r2, #1
 8003f4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2220      	movs	r2, #32
 8003f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d123      	bne.n	8003fa8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68da      	ldr	r2, [r3, #12]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0210 	bic.w	r2, r2, #16
 8003f74:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0310 	and.w	r3, r3, #16
 8003f80:	2b10      	cmp	r3, #16
 8003f82:	d10a      	bne.n	8003f9a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f84:	2300      	movs	r3, #0
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f7ff fe68 	bl	8003c76 <HAL_UARTEx_RxEventCallback>
 8003fa6:	e002      	b.n	8003fae <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f7ff fe52 	bl	8003c52 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	e002      	b.n	8003fb8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	e000      	b.n	8003fb8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003fb6:	2302      	movs	r3, #2
  }
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689a      	ldr	r2, [r3, #8]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ffa:	f023 030c 	bic.w	r3, r3, #12
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6812      	ldr	r2, [r2, #0]
 8004002:	68b9      	ldr	r1, [r7, #8]
 8004004:	430b      	orrs	r3, r1
 8004006:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	699a      	ldr	r2, [r3, #24]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a2c      	ldr	r2, [pc, #176]	; (80040d4 <UART_SetConfig+0x114>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d103      	bne.n	8004030 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004028:	f7fe fbf0 	bl	800280c <HAL_RCC_GetPCLK2Freq>
 800402c:	60f8      	str	r0, [r7, #12]
 800402e:	e002      	b.n	8004036 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004030:	f7fe fbd8 	bl	80027e4 <HAL_RCC_GetPCLK1Freq>
 8004034:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	4613      	mov	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	009a      	lsls	r2, r3, #2
 8004040:	441a      	add	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	fbb2 f3f3 	udiv	r3, r2, r3
 800404c:	4a22      	ldr	r2, [pc, #136]	; (80040d8 <UART_SetConfig+0x118>)
 800404e:	fba2 2303 	umull	r2, r3, r2, r3
 8004052:	095b      	lsrs	r3, r3, #5
 8004054:	0119      	lsls	r1, r3, #4
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	4613      	mov	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4413      	add	r3, r2
 800405e:	009a      	lsls	r2, r3, #2
 8004060:	441a      	add	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	fbb2 f2f3 	udiv	r2, r2, r3
 800406c:	4b1a      	ldr	r3, [pc, #104]	; (80040d8 <UART_SetConfig+0x118>)
 800406e:	fba3 0302 	umull	r0, r3, r3, r2
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	2064      	movs	r0, #100	; 0x64
 8004076:	fb00 f303 	mul.w	r3, r0, r3
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	3332      	adds	r3, #50	; 0x32
 8004080:	4a15      	ldr	r2, [pc, #84]	; (80040d8 <UART_SetConfig+0x118>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800408c:	4419      	add	r1, r3
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	4613      	mov	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	009a      	lsls	r2, r3, #2
 8004098:	441a      	add	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80040a4:	4b0c      	ldr	r3, [pc, #48]	; (80040d8 <UART_SetConfig+0x118>)
 80040a6:	fba3 0302 	umull	r0, r3, r3, r2
 80040aa:	095b      	lsrs	r3, r3, #5
 80040ac:	2064      	movs	r0, #100	; 0x64
 80040ae:	fb00 f303 	mul.w	r3, r0, r3
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	3332      	adds	r3, #50	; 0x32
 80040b8:	4a07      	ldr	r2, [pc, #28]	; (80040d8 <UART_SetConfig+0x118>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	f003 020f 	and.w	r2, r3, #15
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	440a      	add	r2, r1
 80040ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80040cc:	bf00      	nop
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40013800 	.word	0x40013800
 80040d8:	51eb851f 	.word	0x51eb851f

080040dc <__errno>:
 80040dc:	4b01      	ldr	r3, [pc, #4]	; (80040e4 <__errno+0x8>)
 80040de:	6818      	ldr	r0, [r3, #0]
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	20000044 	.word	0x20000044

080040e8 <__libc_init_array>:
 80040e8:	b570      	push	{r4, r5, r6, lr}
 80040ea:	2600      	movs	r6, #0
 80040ec:	4d0c      	ldr	r5, [pc, #48]	; (8004120 <__libc_init_array+0x38>)
 80040ee:	4c0d      	ldr	r4, [pc, #52]	; (8004124 <__libc_init_array+0x3c>)
 80040f0:	1b64      	subs	r4, r4, r5
 80040f2:	10a4      	asrs	r4, r4, #2
 80040f4:	42a6      	cmp	r6, r4
 80040f6:	d109      	bne.n	800410c <__libc_init_array+0x24>
 80040f8:	f000 fc9c 	bl	8004a34 <_init>
 80040fc:	2600      	movs	r6, #0
 80040fe:	4d0a      	ldr	r5, [pc, #40]	; (8004128 <__libc_init_array+0x40>)
 8004100:	4c0a      	ldr	r4, [pc, #40]	; (800412c <__libc_init_array+0x44>)
 8004102:	1b64      	subs	r4, r4, r5
 8004104:	10a4      	asrs	r4, r4, #2
 8004106:	42a6      	cmp	r6, r4
 8004108:	d105      	bne.n	8004116 <__libc_init_array+0x2e>
 800410a:	bd70      	pop	{r4, r5, r6, pc}
 800410c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004110:	4798      	blx	r3
 8004112:	3601      	adds	r6, #1
 8004114:	e7ee      	b.n	80040f4 <__libc_init_array+0xc>
 8004116:	f855 3b04 	ldr.w	r3, [r5], #4
 800411a:	4798      	blx	r3
 800411c:	3601      	adds	r6, #1
 800411e:	e7f2      	b.n	8004106 <__libc_init_array+0x1e>
 8004120:	08004ab8 	.word	0x08004ab8
 8004124:	08004ab8 	.word	0x08004ab8
 8004128:	08004ab8 	.word	0x08004ab8
 800412c:	08004abc 	.word	0x08004abc

08004130 <memset>:
 8004130:	4603      	mov	r3, r0
 8004132:	4402      	add	r2, r0
 8004134:	4293      	cmp	r3, r2
 8004136:	d100      	bne.n	800413a <memset+0xa>
 8004138:	4770      	bx	lr
 800413a:	f803 1b01 	strb.w	r1, [r3], #1
 800413e:	e7f9      	b.n	8004134 <memset+0x4>

08004140 <siprintf>:
 8004140:	b40e      	push	{r1, r2, r3}
 8004142:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004146:	b500      	push	{lr}
 8004148:	b09c      	sub	sp, #112	; 0x70
 800414a:	ab1d      	add	r3, sp, #116	; 0x74
 800414c:	9002      	str	r0, [sp, #8]
 800414e:	9006      	str	r0, [sp, #24]
 8004150:	9107      	str	r1, [sp, #28]
 8004152:	9104      	str	r1, [sp, #16]
 8004154:	4808      	ldr	r0, [pc, #32]	; (8004178 <siprintf+0x38>)
 8004156:	4909      	ldr	r1, [pc, #36]	; (800417c <siprintf+0x3c>)
 8004158:	f853 2b04 	ldr.w	r2, [r3], #4
 800415c:	9105      	str	r1, [sp, #20]
 800415e:	6800      	ldr	r0, [r0, #0]
 8004160:	a902      	add	r1, sp, #8
 8004162:	9301      	str	r3, [sp, #4]
 8004164:	f000 f868 	bl	8004238 <_svfiprintf_r>
 8004168:	2200      	movs	r2, #0
 800416a:	9b02      	ldr	r3, [sp, #8]
 800416c:	701a      	strb	r2, [r3, #0]
 800416e:	b01c      	add	sp, #112	; 0x70
 8004170:	f85d eb04 	ldr.w	lr, [sp], #4
 8004174:	b003      	add	sp, #12
 8004176:	4770      	bx	lr
 8004178:	20000044 	.word	0x20000044
 800417c:	ffff0208 	.word	0xffff0208

08004180 <__ssputs_r>:
 8004180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004184:	688e      	ldr	r6, [r1, #8]
 8004186:	4682      	mov	sl, r0
 8004188:	429e      	cmp	r6, r3
 800418a:	460c      	mov	r4, r1
 800418c:	4690      	mov	r8, r2
 800418e:	461f      	mov	r7, r3
 8004190:	d838      	bhi.n	8004204 <__ssputs_r+0x84>
 8004192:	898a      	ldrh	r2, [r1, #12]
 8004194:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004198:	d032      	beq.n	8004200 <__ssputs_r+0x80>
 800419a:	6825      	ldr	r5, [r4, #0]
 800419c:	6909      	ldr	r1, [r1, #16]
 800419e:	3301      	adds	r3, #1
 80041a0:	eba5 0901 	sub.w	r9, r5, r1
 80041a4:	6965      	ldr	r5, [r4, #20]
 80041a6:	444b      	add	r3, r9
 80041a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041b0:	106d      	asrs	r5, r5, #1
 80041b2:	429d      	cmp	r5, r3
 80041b4:	bf38      	it	cc
 80041b6:	461d      	movcc	r5, r3
 80041b8:	0553      	lsls	r3, r2, #21
 80041ba:	d531      	bpl.n	8004220 <__ssputs_r+0xa0>
 80041bc:	4629      	mov	r1, r5
 80041be:	f000 fb6f 	bl	80048a0 <_malloc_r>
 80041c2:	4606      	mov	r6, r0
 80041c4:	b950      	cbnz	r0, 80041dc <__ssputs_r+0x5c>
 80041c6:	230c      	movs	r3, #12
 80041c8:	f04f 30ff 	mov.w	r0, #4294967295
 80041cc:	f8ca 3000 	str.w	r3, [sl]
 80041d0:	89a3      	ldrh	r3, [r4, #12]
 80041d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041d6:	81a3      	strh	r3, [r4, #12]
 80041d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041dc:	464a      	mov	r2, r9
 80041de:	6921      	ldr	r1, [r4, #16]
 80041e0:	f000 face 	bl	8004780 <memcpy>
 80041e4:	89a3      	ldrh	r3, [r4, #12]
 80041e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ee:	81a3      	strh	r3, [r4, #12]
 80041f0:	6126      	str	r6, [r4, #16]
 80041f2:	444e      	add	r6, r9
 80041f4:	6026      	str	r6, [r4, #0]
 80041f6:	463e      	mov	r6, r7
 80041f8:	6165      	str	r5, [r4, #20]
 80041fa:	eba5 0509 	sub.w	r5, r5, r9
 80041fe:	60a5      	str	r5, [r4, #8]
 8004200:	42be      	cmp	r6, r7
 8004202:	d900      	bls.n	8004206 <__ssputs_r+0x86>
 8004204:	463e      	mov	r6, r7
 8004206:	4632      	mov	r2, r6
 8004208:	4641      	mov	r1, r8
 800420a:	6820      	ldr	r0, [r4, #0]
 800420c:	f000 fac6 	bl	800479c <memmove>
 8004210:	68a3      	ldr	r3, [r4, #8]
 8004212:	2000      	movs	r0, #0
 8004214:	1b9b      	subs	r3, r3, r6
 8004216:	60a3      	str	r3, [r4, #8]
 8004218:	6823      	ldr	r3, [r4, #0]
 800421a:	4433      	add	r3, r6
 800421c:	6023      	str	r3, [r4, #0]
 800421e:	e7db      	b.n	80041d8 <__ssputs_r+0x58>
 8004220:	462a      	mov	r2, r5
 8004222:	f000 fbb1 	bl	8004988 <_realloc_r>
 8004226:	4606      	mov	r6, r0
 8004228:	2800      	cmp	r0, #0
 800422a:	d1e1      	bne.n	80041f0 <__ssputs_r+0x70>
 800422c:	4650      	mov	r0, sl
 800422e:	6921      	ldr	r1, [r4, #16]
 8004230:	f000 face 	bl	80047d0 <_free_r>
 8004234:	e7c7      	b.n	80041c6 <__ssputs_r+0x46>
	...

08004238 <_svfiprintf_r>:
 8004238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800423c:	4698      	mov	r8, r3
 800423e:	898b      	ldrh	r3, [r1, #12]
 8004240:	4607      	mov	r7, r0
 8004242:	061b      	lsls	r3, r3, #24
 8004244:	460d      	mov	r5, r1
 8004246:	4614      	mov	r4, r2
 8004248:	b09d      	sub	sp, #116	; 0x74
 800424a:	d50e      	bpl.n	800426a <_svfiprintf_r+0x32>
 800424c:	690b      	ldr	r3, [r1, #16]
 800424e:	b963      	cbnz	r3, 800426a <_svfiprintf_r+0x32>
 8004250:	2140      	movs	r1, #64	; 0x40
 8004252:	f000 fb25 	bl	80048a0 <_malloc_r>
 8004256:	6028      	str	r0, [r5, #0]
 8004258:	6128      	str	r0, [r5, #16]
 800425a:	b920      	cbnz	r0, 8004266 <_svfiprintf_r+0x2e>
 800425c:	230c      	movs	r3, #12
 800425e:	603b      	str	r3, [r7, #0]
 8004260:	f04f 30ff 	mov.w	r0, #4294967295
 8004264:	e0d1      	b.n	800440a <_svfiprintf_r+0x1d2>
 8004266:	2340      	movs	r3, #64	; 0x40
 8004268:	616b      	str	r3, [r5, #20]
 800426a:	2300      	movs	r3, #0
 800426c:	9309      	str	r3, [sp, #36]	; 0x24
 800426e:	2320      	movs	r3, #32
 8004270:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004274:	2330      	movs	r3, #48	; 0x30
 8004276:	f04f 0901 	mov.w	r9, #1
 800427a:	f8cd 800c 	str.w	r8, [sp, #12]
 800427e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004424 <_svfiprintf_r+0x1ec>
 8004282:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004286:	4623      	mov	r3, r4
 8004288:	469a      	mov	sl, r3
 800428a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800428e:	b10a      	cbz	r2, 8004294 <_svfiprintf_r+0x5c>
 8004290:	2a25      	cmp	r2, #37	; 0x25
 8004292:	d1f9      	bne.n	8004288 <_svfiprintf_r+0x50>
 8004294:	ebba 0b04 	subs.w	fp, sl, r4
 8004298:	d00b      	beq.n	80042b2 <_svfiprintf_r+0x7a>
 800429a:	465b      	mov	r3, fp
 800429c:	4622      	mov	r2, r4
 800429e:	4629      	mov	r1, r5
 80042a0:	4638      	mov	r0, r7
 80042a2:	f7ff ff6d 	bl	8004180 <__ssputs_r>
 80042a6:	3001      	adds	r0, #1
 80042a8:	f000 80aa 	beq.w	8004400 <_svfiprintf_r+0x1c8>
 80042ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042ae:	445a      	add	r2, fp
 80042b0:	9209      	str	r2, [sp, #36]	; 0x24
 80042b2:	f89a 3000 	ldrb.w	r3, [sl]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 80a2 	beq.w	8004400 <_svfiprintf_r+0x1c8>
 80042bc:	2300      	movs	r3, #0
 80042be:	f04f 32ff 	mov.w	r2, #4294967295
 80042c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042c6:	f10a 0a01 	add.w	sl, sl, #1
 80042ca:	9304      	str	r3, [sp, #16]
 80042cc:	9307      	str	r3, [sp, #28]
 80042ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042d2:	931a      	str	r3, [sp, #104]	; 0x68
 80042d4:	4654      	mov	r4, sl
 80042d6:	2205      	movs	r2, #5
 80042d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042dc:	4851      	ldr	r0, [pc, #324]	; (8004424 <_svfiprintf_r+0x1ec>)
 80042de:	f000 fa41 	bl	8004764 <memchr>
 80042e2:	9a04      	ldr	r2, [sp, #16]
 80042e4:	b9d8      	cbnz	r0, 800431e <_svfiprintf_r+0xe6>
 80042e6:	06d0      	lsls	r0, r2, #27
 80042e8:	bf44      	itt	mi
 80042ea:	2320      	movmi	r3, #32
 80042ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042f0:	0711      	lsls	r1, r2, #28
 80042f2:	bf44      	itt	mi
 80042f4:	232b      	movmi	r3, #43	; 0x2b
 80042f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042fa:	f89a 3000 	ldrb.w	r3, [sl]
 80042fe:	2b2a      	cmp	r3, #42	; 0x2a
 8004300:	d015      	beq.n	800432e <_svfiprintf_r+0xf6>
 8004302:	4654      	mov	r4, sl
 8004304:	2000      	movs	r0, #0
 8004306:	f04f 0c0a 	mov.w	ip, #10
 800430a:	9a07      	ldr	r2, [sp, #28]
 800430c:	4621      	mov	r1, r4
 800430e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004312:	3b30      	subs	r3, #48	; 0x30
 8004314:	2b09      	cmp	r3, #9
 8004316:	d94e      	bls.n	80043b6 <_svfiprintf_r+0x17e>
 8004318:	b1b0      	cbz	r0, 8004348 <_svfiprintf_r+0x110>
 800431a:	9207      	str	r2, [sp, #28]
 800431c:	e014      	b.n	8004348 <_svfiprintf_r+0x110>
 800431e:	eba0 0308 	sub.w	r3, r0, r8
 8004322:	fa09 f303 	lsl.w	r3, r9, r3
 8004326:	4313      	orrs	r3, r2
 8004328:	46a2      	mov	sl, r4
 800432a:	9304      	str	r3, [sp, #16]
 800432c:	e7d2      	b.n	80042d4 <_svfiprintf_r+0x9c>
 800432e:	9b03      	ldr	r3, [sp, #12]
 8004330:	1d19      	adds	r1, r3, #4
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	9103      	str	r1, [sp, #12]
 8004336:	2b00      	cmp	r3, #0
 8004338:	bfbb      	ittet	lt
 800433a:	425b      	neglt	r3, r3
 800433c:	f042 0202 	orrlt.w	r2, r2, #2
 8004340:	9307      	strge	r3, [sp, #28]
 8004342:	9307      	strlt	r3, [sp, #28]
 8004344:	bfb8      	it	lt
 8004346:	9204      	strlt	r2, [sp, #16]
 8004348:	7823      	ldrb	r3, [r4, #0]
 800434a:	2b2e      	cmp	r3, #46	; 0x2e
 800434c:	d10c      	bne.n	8004368 <_svfiprintf_r+0x130>
 800434e:	7863      	ldrb	r3, [r4, #1]
 8004350:	2b2a      	cmp	r3, #42	; 0x2a
 8004352:	d135      	bne.n	80043c0 <_svfiprintf_r+0x188>
 8004354:	9b03      	ldr	r3, [sp, #12]
 8004356:	3402      	adds	r4, #2
 8004358:	1d1a      	adds	r2, r3, #4
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	9203      	str	r2, [sp, #12]
 800435e:	2b00      	cmp	r3, #0
 8004360:	bfb8      	it	lt
 8004362:	f04f 33ff 	movlt.w	r3, #4294967295
 8004366:	9305      	str	r3, [sp, #20]
 8004368:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004428 <_svfiprintf_r+0x1f0>
 800436c:	2203      	movs	r2, #3
 800436e:	4650      	mov	r0, sl
 8004370:	7821      	ldrb	r1, [r4, #0]
 8004372:	f000 f9f7 	bl	8004764 <memchr>
 8004376:	b140      	cbz	r0, 800438a <_svfiprintf_r+0x152>
 8004378:	2340      	movs	r3, #64	; 0x40
 800437a:	eba0 000a 	sub.w	r0, r0, sl
 800437e:	fa03 f000 	lsl.w	r0, r3, r0
 8004382:	9b04      	ldr	r3, [sp, #16]
 8004384:	3401      	adds	r4, #1
 8004386:	4303      	orrs	r3, r0
 8004388:	9304      	str	r3, [sp, #16]
 800438a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800438e:	2206      	movs	r2, #6
 8004390:	4826      	ldr	r0, [pc, #152]	; (800442c <_svfiprintf_r+0x1f4>)
 8004392:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004396:	f000 f9e5 	bl	8004764 <memchr>
 800439a:	2800      	cmp	r0, #0
 800439c:	d038      	beq.n	8004410 <_svfiprintf_r+0x1d8>
 800439e:	4b24      	ldr	r3, [pc, #144]	; (8004430 <_svfiprintf_r+0x1f8>)
 80043a0:	bb1b      	cbnz	r3, 80043ea <_svfiprintf_r+0x1b2>
 80043a2:	9b03      	ldr	r3, [sp, #12]
 80043a4:	3307      	adds	r3, #7
 80043a6:	f023 0307 	bic.w	r3, r3, #7
 80043aa:	3308      	adds	r3, #8
 80043ac:	9303      	str	r3, [sp, #12]
 80043ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043b0:	4433      	add	r3, r6
 80043b2:	9309      	str	r3, [sp, #36]	; 0x24
 80043b4:	e767      	b.n	8004286 <_svfiprintf_r+0x4e>
 80043b6:	460c      	mov	r4, r1
 80043b8:	2001      	movs	r0, #1
 80043ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80043be:	e7a5      	b.n	800430c <_svfiprintf_r+0xd4>
 80043c0:	2300      	movs	r3, #0
 80043c2:	f04f 0c0a 	mov.w	ip, #10
 80043c6:	4619      	mov	r1, r3
 80043c8:	3401      	adds	r4, #1
 80043ca:	9305      	str	r3, [sp, #20]
 80043cc:	4620      	mov	r0, r4
 80043ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043d2:	3a30      	subs	r2, #48	; 0x30
 80043d4:	2a09      	cmp	r2, #9
 80043d6:	d903      	bls.n	80043e0 <_svfiprintf_r+0x1a8>
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0c5      	beq.n	8004368 <_svfiprintf_r+0x130>
 80043dc:	9105      	str	r1, [sp, #20]
 80043de:	e7c3      	b.n	8004368 <_svfiprintf_r+0x130>
 80043e0:	4604      	mov	r4, r0
 80043e2:	2301      	movs	r3, #1
 80043e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80043e8:	e7f0      	b.n	80043cc <_svfiprintf_r+0x194>
 80043ea:	ab03      	add	r3, sp, #12
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	462a      	mov	r2, r5
 80043f0:	4638      	mov	r0, r7
 80043f2:	4b10      	ldr	r3, [pc, #64]	; (8004434 <_svfiprintf_r+0x1fc>)
 80043f4:	a904      	add	r1, sp, #16
 80043f6:	f3af 8000 	nop.w
 80043fa:	1c42      	adds	r2, r0, #1
 80043fc:	4606      	mov	r6, r0
 80043fe:	d1d6      	bne.n	80043ae <_svfiprintf_r+0x176>
 8004400:	89ab      	ldrh	r3, [r5, #12]
 8004402:	065b      	lsls	r3, r3, #25
 8004404:	f53f af2c 	bmi.w	8004260 <_svfiprintf_r+0x28>
 8004408:	9809      	ldr	r0, [sp, #36]	; 0x24
 800440a:	b01d      	add	sp, #116	; 0x74
 800440c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004410:	ab03      	add	r3, sp, #12
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	462a      	mov	r2, r5
 8004416:	4638      	mov	r0, r7
 8004418:	4b06      	ldr	r3, [pc, #24]	; (8004434 <_svfiprintf_r+0x1fc>)
 800441a:	a904      	add	r1, sp, #16
 800441c:	f000 f87c 	bl	8004518 <_printf_i>
 8004420:	e7eb      	b.n	80043fa <_svfiprintf_r+0x1c2>
 8004422:	bf00      	nop
 8004424:	08004a84 	.word	0x08004a84
 8004428:	08004a8a 	.word	0x08004a8a
 800442c:	08004a8e 	.word	0x08004a8e
 8004430:	00000000 	.word	0x00000000
 8004434:	08004181 	.word	0x08004181

08004438 <_printf_common>:
 8004438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800443c:	4616      	mov	r6, r2
 800443e:	4699      	mov	r9, r3
 8004440:	688a      	ldr	r2, [r1, #8]
 8004442:	690b      	ldr	r3, [r1, #16]
 8004444:	4607      	mov	r7, r0
 8004446:	4293      	cmp	r3, r2
 8004448:	bfb8      	it	lt
 800444a:	4613      	movlt	r3, r2
 800444c:	6033      	str	r3, [r6, #0]
 800444e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004452:	460c      	mov	r4, r1
 8004454:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004458:	b10a      	cbz	r2, 800445e <_printf_common+0x26>
 800445a:	3301      	adds	r3, #1
 800445c:	6033      	str	r3, [r6, #0]
 800445e:	6823      	ldr	r3, [r4, #0]
 8004460:	0699      	lsls	r1, r3, #26
 8004462:	bf42      	ittt	mi
 8004464:	6833      	ldrmi	r3, [r6, #0]
 8004466:	3302      	addmi	r3, #2
 8004468:	6033      	strmi	r3, [r6, #0]
 800446a:	6825      	ldr	r5, [r4, #0]
 800446c:	f015 0506 	ands.w	r5, r5, #6
 8004470:	d106      	bne.n	8004480 <_printf_common+0x48>
 8004472:	f104 0a19 	add.w	sl, r4, #25
 8004476:	68e3      	ldr	r3, [r4, #12]
 8004478:	6832      	ldr	r2, [r6, #0]
 800447a:	1a9b      	subs	r3, r3, r2
 800447c:	42ab      	cmp	r3, r5
 800447e:	dc28      	bgt.n	80044d2 <_printf_common+0x9a>
 8004480:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004484:	1e13      	subs	r3, r2, #0
 8004486:	6822      	ldr	r2, [r4, #0]
 8004488:	bf18      	it	ne
 800448a:	2301      	movne	r3, #1
 800448c:	0692      	lsls	r2, r2, #26
 800448e:	d42d      	bmi.n	80044ec <_printf_common+0xb4>
 8004490:	4649      	mov	r1, r9
 8004492:	4638      	mov	r0, r7
 8004494:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004498:	47c0      	blx	r8
 800449a:	3001      	adds	r0, #1
 800449c:	d020      	beq.n	80044e0 <_printf_common+0xa8>
 800449e:	6823      	ldr	r3, [r4, #0]
 80044a0:	68e5      	ldr	r5, [r4, #12]
 80044a2:	f003 0306 	and.w	r3, r3, #6
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	bf18      	it	ne
 80044aa:	2500      	movne	r5, #0
 80044ac:	6832      	ldr	r2, [r6, #0]
 80044ae:	f04f 0600 	mov.w	r6, #0
 80044b2:	68a3      	ldr	r3, [r4, #8]
 80044b4:	bf08      	it	eq
 80044b6:	1aad      	subeq	r5, r5, r2
 80044b8:	6922      	ldr	r2, [r4, #16]
 80044ba:	bf08      	it	eq
 80044bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044c0:	4293      	cmp	r3, r2
 80044c2:	bfc4      	itt	gt
 80044c4:	1a9b      	subgt	r3, r3, r2
 80044c6:	18ed      	addgt	r5, r5, r3
 80044c8:	341a      	adds	r4, #26
 80044ca:	42b5      	cmp	r5, r6
 80044cc:	d11a      	bne.n	8004504 <_printf_common+0xcc>
 80044ce:	2000      	movs	r0, #0
 80044d0:	e008      	b.n	80044e4 <_printf_common+0xac>
 80044d2:	2301      	movs	r3, #1
 80044d4:	4652      	mov	r2, sl
 80044d6:	4649      	mov	r1, r9
 80044d8:	4638      	mov	r0, r7
 80044da:	47c0      	blx	r8
 80044dc:	3001      	adds	r0, #1
 80044de:	d103      	bne.n	80044e8 <_printf_common+0xb0>
 80044e0:	f04f 30ff 	mov.w	r0, #4294967295
 80044e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044e8:	3501      	adds	r5, #1
 80044ea:	e7c4      	b.n	8004476 <_printf_common+0x3e>
 80044ec:	2030      	movs	r0, #48	; 0x30
 80044ee:	18e1      	adds	r1, r4, r3
 80044f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044fa:	4422      	add	r2, r4
 80044fc:	3302      	adds	r3, #2
 80044fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004502:	e7c5      	b.n	8004490 <_printf_common+0x58>
 8004504:	2301      	movs	r3, #1
 8004506:	4622      	mov	r2, r4
 8004508:	4649      	mov	r1, r9
 800450a:	4638      	mov	r0, r7
 800450c:	47c0      	blx	r8
 800450e:	3001      	adds	r0, #1
 8004510:	d0e6      	beq.n	80044e0 <_printf_common+0xa8>
 8004512:	3601      	adds	r6, #1
 8004514:	e7d9      	b.n	80044ca <_printf_common+0x92>
	...

08004518 <_printf_i>:
 8004518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800451c:	7e0f      	ldrb	r7, [r1, #24]
 800451e:	4691      	mov	r9, r2
 8004520:	2f78      	cmp	r7, #120	; 0x78
 8004522:	4680      	mov	r8, r0
 8004524:	460c      	mov	r4, r1
 8004526:	469a      	mov	sl, r3
 8004528:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800452a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800452e:	d807      	bhi.n	8004540 <_printf_i+0x28>
 8004530:	2f62      	cmp	r7, #98	; 0x62
 8004532:	d80a      	bhi.n	800454a <_printf_i+0x32>
 8004534:	2f00      	cmp	r7, #0
 8004536:	f000 80d9 	beq.w	80046ec <_printf_i+0x1d4>
 800453a:	2f58      	cmp	r7, #88	; 0x58
 800453c:	f000 80a4 	beq.w	8004688 <_printf_i+0x170>
 8004540:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004544:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004548:	e03a      	b.n	80045c0 <_printf_i+0xa8>
 800454a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800454e:	2b15      	cmp	r3, #21
 8004550:	d8f6      	bhi.n	8004540 <_printf_i+0x28>
 8004552:	a101      	add	r1, pc, #4	; (adr r1, 8004558 <_printf_i+0x40>)
 8004554:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004558:	080045b1 	.word	0x080045b1
 800455c:	080045c5 	.word	0x080045c5
 8004560:	08004541 	.word	0x08004541
 8004564:	08004541 	.word	0x08004541
 8004568:	08004541 	.word	0x08004541
 800456c:	08004541 	.word	0x08004541
 8004570:	080045c5 	.word	0x080045c5
 8004574:	08004541 	.word	0x08004541
 8004578:	08004541 	.word	0x08004541
 800457c:	08004541 	.word	0x08004541
 8004580:	08004541 	.word	0x08004541
 8004584:	080046d3 	.word	0x080046d3
 8004588:	080045f5 	.word	0x080045f5
 800458c:	080046b5 	.word	0x080046b5
 8004590:	08004541 	.word	0x08004541
 8004594:	08004541 	.word	0x08004541
 8004598:	080046f5 	.word	0x080046f5
 800459c:	08004541 	.word	0x08004541
 80045a0:	080045f5 	.word	0x080045f5
 80045a4:	08004541 	.word	0x08004541
 80045a8:	08004541 	.word	0x08004541
 80045ac:	080046bd 	.word	0x080046bd
 80045b0:	682b      	ldr	r3, [r5, #0]
 80045b2:	1d1a      	adds	r2, r3, #4
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	602a      	str	r2, [r5, #0]
 80045b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045c0:	2301      	movs	r3, #1
 80045c2:	e0a4      	b.n	800470e <_printf_i+0x1f6>
 80045c4:	6820      	ldr	r0, [r4, #0]
 80045c6:	6829      	ldr	r1, [r5, #0]
 80045c8:	0606      	lsls	r6, r0, #24
 80045ca:	f101 0304 	add.w	r3, r1, #4
 80045ce:	d50a      	bpl.n	80045e6 <_printf_i+0xce>
 80045d0:	680e      	ldr	r6, [r1, #0]
 80045d2:	602b      	str	r3, [r5, #0]
 80045d4:	2e00      	cmp	r6, #0
 80045d6:	da03      	bge.n	80045e0 <_printf_i+0xc8>
 80045d8:	232d      	movs	r3, #45	; 0x2d
 80045da:	4276      	negs	r6, r6
 80045dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045e0:	230a      	movs	r3, #10
 80045e2:	485e      	ldr	r0, [pc, #376]	; (800475c <_printf_i+0x244>)
 80045e4:	e019      	b.n	800461a <_printf_i+0x102>
 80045e6:	680e      	ldr	r6, [r1, #0]
 80045e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80045ec:	602b      	str	r3, [r5, #0]
 80045ee:	bf18      	it	ne
 80045f0:	b236      	sxthne	r6, r6
 80045f2:	e7ef      	b.n	80045d4 <_printf_i+0xbc>
 80045f4:	682b      	ldr	r3, [r5, #0]
 80045f6:	6820      	ldr	r0, [r4, #0]
 80045f8:	1d19      	adds	r1, r3, #4
 80045fa:	6029      	str	r1, [r5, #0]
 80045fc:	0601      	lsls	r1, r0, #24
 80045fe:	d501      	bpl.n	8004604 <_printf_i+0xec>
 8004600:	681e      	ldr	r6, [r3, #0]
 8004602:	e002      	b.n	800460a <_printf_i+0xf2>
 8004604:	0646      	lsls	r6, r0, #25
 8004606:	d5fb      	bpl.n	8004600 <_printf_i+0xe8>
 8004608:	881e      	ldrh	r6, [r3, #0]
 800460a:	2f6f      	cmp	r7, #111	; 0x6f
 800460c:	bf0c      	ite	eq
 800460e:	2308      	moveq	r3, #8
 8004610:	230a      	movne	r3, #10
 8004612:	4852      	ldr	r0, [pc, #328]	; (800475c <_printf_i+0x244>)
 8004614:	2100      	movs	r1, #0
 8004616:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800461a:	6865      	ldr	r5, [r4, #4]
 800461c:	2d00      	cmp	r5, #0
 800461e:	bfa8      	it	ge
 8004620:	6821      	ldrge	r1, [r4, #0]
 8004622:	60a5      	str	r5, [r4, #8]
 8004624:	bfa4      	itt	ge
 8004626:	f021 0104 	bicge.w	r1, r1, #4
 800462a:	6021      	strge	r1, [r4, #0]
 800462c:	b90e      	cbnz	r6, 8004632 <_printf_i+0x11a>
 800462e:	2d00      	cmp	r5, #0
 8004630:	d04d      	beq.n	80046ce <_printf_i+0x1b6>
 8004632:	4615      	mov	r5, r2
 8004634:	fbb6 f1f3 	udiv	r1, r6, r3
 8004638:	fb03 6711 	mls	r7, r3, r1, r6
 800463c:	5dc7      	ldrb	r7, [r0, r7]
 800463e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004642:	4637      	mov	r7, r6
 8004644:	42bb      	cmp	r3, r7
 8004646:	460e      	mov	r6, r1
 8004648:	d9f4      	bls.n	8004634 <_printf_i+0x11c>
 800464a:	2b08      	cmp	r3, #8
 800464c:	d10b      	bne.n	8004666 <_printf_i+0x14e>
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	07de      	lsls	r6, r3, #31
 8004652:	d508      	bpl.n	8004666 <_printf_i+0x14e>
 8004654:	6923      	ldr	r3, [r4, #16]
 8004656:	6861      	ldr	r1, [r4, #4]
 8004658:	4299      	cmp	r1, r3
 800465a:	bfde      	ittt	le
 800465c:	2330      	movle	r3, #48	; 0x30
 800465e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004662:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004666:	1b52      	subs	r2, r2, r5
 8004668:	6122      	str	r2, [r4, #16]
 800466a:	464b      	mov	r3, r9
 800466c:	4621      	mov	r1, r4
 800466e:	4640      	mov	r0, r8
 8004670:	f8cd a000 	str.w	sl, [sp]
 8004674:	aa03      	add	r2, sp, #12
 8004676:	f7ff fedf 	bl	8004438 <_printf_common>
 800467a:	3001      	adds	r0, #1
 800467c:	d14c      	bne.n	8004718 <_printf_i+0x200>
 800467e:	f04f 30ff 	mov.w	r0, #4294967295
 8004682:	b004      	add	sp, #16
 8004684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004688:	4834      	ldr	r0, [pc, #208]	; (800475c <_printf_i+0x244>)
 800468a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800468e:	6829      	ldr	r1, [r5, #0]
 8004690:	6823      	ldr	r3, [r4, #0]
 8004692:	f851 6b04 	ldr.w	r6, [r1], #4
 8004696:	6029      	str	r1, [r5, #0]
 8004698:	061d      	lsls	r5, r3, #24
 800469a:	d514      	bpl.n	80046c6 <_printf_i+0x1ae>
 800469c:	07df      	lsls	r7, r3, #31
 800469e:	bf44      	itt	mi
 80046a0:	f043 0320 	orrmi.w	r3, r3, #32
 80046a4:	6023      	strmi	r3, [r4, #0]
 80046a6:	b91e      	cbnz	r6, 80046b0 <_printf_i+0x198>
 80046a8:	6823      	ldr	r3, [r4, #0]
 80046aa:	f023 0320 	bic.w	r3, r3, #32
 80046ae:	6023      	str	r3, [r4, #0]
 80046b0:	2310      	movs	r3, #16
 80046b2:	e7af      	b.n	8004614 <_printf_i+0xfc>
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	f043 0320 	orr.w	r3, r3, #32
 80046ba:	6023      	str	r3, [r4, #0]
 80046bc:	2378      	movs	r3, #120	; 0x78
 80046be:	4828      	ldr	r0, [pc, #160]	; (8004760 <_printf_i+0x248>)
 80046c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046c4:	e7e3      	b.n	800468e <_printf_i+0x176>
 80046c6:	0659      	lsls	r1, r3, #25
 80046c8:	bf48      	it	mi
 80046ca:	b2b6      	uxthmi	r6, r6
 80046cc:	e7e6      	b.n	800469c <_printf_i+0x184>
 80046ce:	4615      	mov	r5, r2
 80046d0:	e7bb      	b.n	800464a <_printf_i+0x132>
 80046d2:	682b      	ldr	r3, [r5, #0]
 80046d4:	6826      	ldr	r6, [r4, #0]
 80046d6:	1d18      	adds	r0, r3, #4
 80046d8:	6961      	ldr	r1, [r4, #20]
 80046da:	6028      	str	r0, [r5, #0]
 80046dc:	0635      	lsls	r5, r6, #24
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	d501      	bpl.n	80046e6 <_printf_i+0x1ce>
 80046e2:	6019      	str	r1, [r3, #0]
 80046e4:	e002      	b.n	80046ec <_printf_i+0x1d4>
 80046e6:	0670      	lsls	r0, r6, #25
 80046e8:	d5fb      	bpl.n	80046e2 <_printf_i+0x1ca>
 80046ea:	8019      	strh	r1, [r3, #0]
 80046ec:	2300      	movs	r3, #0
 80046ee:	4615      	mov	r5, r2
 80046f0:	6123      	str	r3, [r4, #16]
 80046f2:	e7ba      	b.n	800466a <_printf_i+0x152>
 80046f4:	682b      	ldr	r3, [r5, #0]
 80046f6:	2100      	movs	r1, #0
 80046f8:	1d1a      	adds	r2, r3, #4
 80046fa:	602a      	str	r2, [r5, #0]
 80046fc:	681d      	ldr	r5, [r3, #0]
 80046fe:	6862      	ldr	r2, [r4, #4]
 8004700:	4628      	mov	r0, r5
 8004702:	f000 f82f 	bl	8004764 <memchr>
 8004706:	b108      	cbz	r0, 800470c <_printf_i+0x1f4>
 8004708:	1b40      	subs	r0, r0, r5
 800470a:	6060      	str	r0, [r4, #4]
 800470c:	6863      	ldr	r3, [r4, #4]
 800470e:	6123      	str	r3, [r4, #16]
 8004710:	2300      	movs	r3, #0
 8004712:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004716:	e7a8      	b.n	800466a <_printf_i+0x152>
 8004718:	462a      	mov	r2, r5
 800471a:	4649      	mov	r1, r9
 800471c:	4640      	mov	r0, r8
 800471e:	6923      	ldr	r3, [r4, #16]
 8004720:	47d0      	blx	sl
 8004722:	3001      	adds	r0, #1
 8004724:	d0ab      	beq.n	800467e <_printf_i+0x166>
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	079b      	lsls	r3, r3, #30
 800472a:	d413      	bmi.n	8004754 <_printf_i+0x23c>
 800472c:	68e0      	ldr	r0, [r4, #12]
 800472e:	9b03      	ldr	r3, [sp, #12]
 8004730:	4298      	cmp	r0, r3
 8004732:	bfb8      	it	lt
 8004734:	4618      	movlt	r0, r3
 8004736:	e7a4      	b.n	8004682 <_printf_i+0x16a>
 8004738:	2301      	movs	r3, #1
 800473a:	4632      	mov	r2, r6
 800473c:	4649      	mov	r1, r9
 800473e:	4640      	mov	r0, r8
 8004740:	47d0      	blx	sl
 8004742:	3001      	adds	r0, #1
 8004744:	d09b      	beq.n	800467e <_printf_i+0x166>
 8004746:	3501      	adds	r5, #1
 8004748:	68e3      	ldr	r3, [r4, #12]
 800474a:	9903      	ldr	r1, [sp, #12]
 800474c:	1a5b      	subs	r3, r3, r1
 800474e:	42ab      	cmp	r3, r5
 8004750:	dcf2      	bgt.n	8004738 <_printf_i+0x220>
 8004752:	e7eb      	b.n	800472c <_printf_i+0x214>
 8004754:	2500      	movs	r5, #0
 8004756:	f104 0619 	add.w	r6, r4, #25
 800475a:	e7f5      	b.n	8004748 <_printf_i+0x230>
 800475c:	08004a95 	.word	0x08004a95
 8004760:	08004aa6 	.word	0x08004aa6

08004764 <memchr>:
 8004764:	4603      	mov	r3, r0
 8004766:	b510      	push	{r4, lr}
 8004768:	b2c9      	uxtb	r1, r1
 800476a:	4402      	add	r2, r0
 800476c:	4293      	cmp	r3, r2
 800476e:	4618      	mov	r0, r3
 8004770:	d101      	bne.n	8004776 <memchr+0x12>
 8004772:	2000      	movs	r0, #0
 8004774:	e003      	b.n	800477e <memchr+0x1a>
 8004776:	7804      	ldrb	r4, [r0, #0]
 8004778:	3301      	adds	r3, #1
 800477a:	428c      	cmp	r4, r1
 800477c:	d1f6      	bne.n	800476c <memchr+0x8>
 800477e:	bd10      	pop	{r4, pc}

08004780 <memcpy>:
 8004780:	440a      	add	r2, r1
 8004782:	4291      	cmp	r1, r2
 8004784:	f100 33ff 	add.w	r3, r0, #4294967295
 8004788:	d100      	bne.n	800478c <memcpy+0xc>
 800478a:	4770      	bx	lr
 800478c:	b510      	push	{r4, lr}
 800478e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004792:	4291      	cmp	r1, r2
 8004794:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004798:	d1f9      	bne.n	800478e <memcpy+0xe>
 800479a:	bd10      	pop	{r4, pc}

0800479c <memmove>:
 800479c:	4288      	cmp	r0, r1
 800479e:	b510      	push	{r4, lr}
 80047a0:	eb01 0402 	add.w	r4, r1, r2
 80047a4:	d902      	bls.n	80047ac <memmove+0x10>
 80047a6:	4284      	cmp	r4, r0
 80047a8:	4623      	mov	r3, r4
 80047aa:	d807      	bhi.n	80047bc <memmove+0x20>
 80047ac:	1e43      	subs	r3, r0, #1
 80047ae:	42a1      	cmp	r1, r4
 80047b0:	d008      	beq.n	80047c4 <memmove+0x28>
 80047b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80047ba:	e7f8      	b.n	80047ae <memmove+0x12>
 80047bc:	4601      	mov	r1, r0
 80047be:	4402      	add	r2, r0
 80047c0:	428a      	cmp	r2, r1
 80047c2:	d100      	bne.n	80047c6 <memmove+0x2a>
 80047c4:	bd10      	pop	{r4, pc}
 80047c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80047ce:	e7f7      	b.n	80047c0 <memmove+0x24>

080047d0 <_free_r>:
 80047d0:	b538      	push	{r3, r4, r5, lr}
 80047d2:	4605      	mov	r5, r0
 80047d4:	2900      	cmp	r1, #0
 80047d6:	d040      	beq.n	800485a <_free_r+0x8a>
 80047d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047dc:	1f0c      	subs	r4, r1, #4
 80047de:	2b00      	cmp	r3, #0
 80047e0:	bfb8      	it	lt
 80047e2:	18e4      	addlt	r4, r4, r3
 80047e4:	f000 f910 	bl	8004a08 <__malloc_lock>
 80047e8:	4a1c      	ldr	r2, [pc, #112]	; (800485c <_free_r+0x8c>)
 80047ea:	6813      	ldr	r3, [r2, #0]
 80047ec:	b933      	cbnz	r3, 80047fc <_free_r+0x2c>
 80047ee:	6063      	str	r3, [r4, #4]
 80047f0:	6014      	str	r4, [r2, #0]
 80047f2:	4628      	mov	r0, r5
 80047f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047f8:	f000 b90c 	b.w	8004a14 <__malloc_unlock>
 80047fc:	42a3      	cmp	r3, r4
 80047fe:	d908      	bls.n	8004812 <_free_r+0x42>
 8004800:	6820      	ldr	r0, [r4, #0]
 8004802:	1821      	adds	r1, r4, r0
 8004804:	428b      	cmp	r3, r1
 8004806:	bf01      	itttt	eq
 8004808:	6819      	ldreq	r1, [r3, #0]
 800480a:	685b      	ldreq	r3, [r3, #4]
 800480c:	1809      	addeq	r1, r1, r0
 800480e:	6021      	streq	r1, [r4, #0]
 8004810:	e7ed      	b.n	80047ee <_free_r+0x1e>
 8004812:	461a      	mov	r2, r3
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	b10b      	cbz	r3, 800481c <_free_r+0x4c>
 8004818:	42a3      	cmp	r3, r4
 800481a:	d9fa      	bls.n	8004812 <_free_r+0x42>
 800481c:	6811      	ldr	r1, [r2, #0]
 800481e:	1850      	adds	r0, r2, r1
 8004820:	42a0      	cmp	r0, r4
 8004822:	d10b      	bne.n	800483c <_free_r+0x6c>
 8004824:	6820      	ldr	r0, [r4, #0]
 8004826:	4401      	add	r1, r0
 8004828:	1850      	adds	r0, r2, r1
 800482a:	4283      	cmp	r3, r0
 800482c:	6011      	str	r1, [r2, #0]
 800482e:	d1e0      	bne.n	80047f2 <_free_r+0x22>
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	4401      	add	r1, r0
 8004836:	6011      	str	r1, [r2, #0]
 8004838:	6053      	str	r3, [r2, #4]
 800483a:	e7da      	b.n	80047f2 <_free_r+0x22>
 800483c:	d902      	bls.n	8004844 <_free_r+0x74>
 800483e:	230c      	movs	r3, #12
 8004840:	602b      	str	r3, [r5, #0]
 8004842:	e7d6      	b.n	80047f2 <_free_r+0x22>
 8004844:	6820      	ldr	r0, [r4, #0]
 8004846:	1821      	adds	r1, r4, r0
 8004848:	428b      	cmp	r3, r1
 800484a:	bf01      	itttt	eq
 800484c:	6819      	ldreq	r1, [r3, #0]
 800484e:	685b      	ldreq	r3, [r3, #4]
 8004850:	1809      	addeq	r1, r1, r0
 8004852:	6021      	streq	r1, [r4, #0]
 8004854:	6063      	str	r3, [r4, #4]
 8004856:	6054      	str	r4, [r2, #4]
 8004858:	e7cb      	b.n	80047f2 <_free_r+0x22>
 800485a:	bd38      	pop	{r3, r4, r5, pc}
 800485c:	20000260 	.word	0x20000260

08004860 <sbrk_aligned>:
 8004860:	b570      	push	{r4, r5, r6, lr}
 8004862:	4e0e      	ldr	r6, [pc, #56]	; (800489c <sbrk_aligned+0x3c>)
 8004864:	460c      	mov	r4, r1
 8004866:	6831      	ldr	r1, [r6, #0]
 8004868:	4605      	mov	r5, r0
 800486a:	b911      	cbnz	r1, 8004872 <sbrk_aligned+0x12>
 800486c:	f000 f8bc 	bl	80049e8 <_sbrk_r>
 8004870:	6030      	str	r0, [r6, #0]
 8004872:	4621      	mov	r1, r4
 8004874:	4628      	mov	r0, r5
 8004876:	f000 f8b7 	bl	80049e8 <_sbrk_r>
 800487a:	1c43      	adds	r3, r0, #1
 800487c:	d00a      	beq.n	8004894 <sbrk_aligned+0x34>
 800487e:	1cc4      	adds	r4, r0, #3
 8004880:	f024 0403 	bic.w	r4, r4, #3
 8004884:	42a0      	cmp	r0, r4
 8004886:	d007      	beq.n	8004898 <sbrk_aligned+0x38>
 8004888:	1a21      	subs	r1, r4, r0
 800488a:	4628      	mov	r0, r5
 800488c:	f000 f8ac 	bl	80049e8 <_sbrk_r>
 8004890:	3001      	adds	r0, #1
 8004892:	d101      	bne.n	8004898 <sbrk_aligned+0x38>
 8004894:	f04f 34ff 	mov.w	r4, #4294967295
 8004898:	4620      	mov	r0, r4
 800489a:	bd70      	pop	{r4, r5, r6, pc}
 800489c:	20000264 	.word	0x20000264

080048a0 <_malloc_r>:
 80048a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048a4:	1ccd      	adds	r5, r1, #3
 80048a6:	f025 0503 	bic.w	r5, r5, #3
 80048aa:	3508      	adds	r5, #8
 80048ac:	2d0c      	cmp	r5, #12
 80048ae:	bf38      	it	cc
 80048b0:	250c      	movcc	r5, #12
 80048b2:	2d00      	cmp	r5, #0
 80048b4:	4607      	mov	r7, r0
 80048b6:	db01      	blt.n	80048bc <_malloc_r+0x1c>
 80048b8:	42a9      	cmp	r1, r5
 80048ba:	d905      	bls.n	80048c8 <_malloc_r+0x28>
 80048bc:	230c      	movs	r3, #12
 80048be:	2600      	movs	r6, #0
 80048c0:	603b      	str	r3, [r7, #0]
 80048c2:	4630      	mov	r0, r6
 80048c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048c8:	4e2e      	ldr	r6, [pc, #184]	; (8004984 <_malloc_r+0xe4>)
 80048ca:	f000 f89d 	bl	8004a08 <__malloc_lock>
 80048ce:	6833      	ldr	r3, [r6, #0]
 80048d0:	461c      	mov	r4, r3
 80048d2:	bb34      	cbnz	r4, 8004922 <_malloc_r+0x82>
 80048d4:	4629      	mov	r1, r5
 80048d6:	4638      	mov	r0, r7
 80048d8:	f7ff ffc2 	bl	8004860 <sbrk_aligned>
 80048dc:	1c43      	adds	r3, r0, #1
 80048de:	4604      	mov	r4, r0
 80048e0:	d14d      	bne.n	800497e <_malloc_r+0xde>
 80048e2:	6834      	ldr	r4, [r6, #0]
 80048e4:	4626      	mov	r6, r4
 80048e6:	2e00      	cmp	r6, #0
 80048e8:	d140      	bne.n	800496c <_malloc_r+0xcc>
 80048ea:	6823      	ldr	r3, [r4, #0]
 80048ec:	4631      	mov	r1, r6
 80048ee:	4638      	mov	r0, r7
 80048f0:	eb04 0803 	add.w	r8, r4, r3
 80048f4:	f000 f878 	bl	80049e8 <_sbrk_r>
 80048f8:	4580      	cmp	r8, r0
 80048fa:	d13a      	bne.n	8004972 <_malloc_r+0xd2>
 80048fc:	6821      	ldr	r1, [r4, #0]
 80048fe:	3503      	adds	r5, #3
 8004900:	1a6d      	subs	r5, r5, r1
 8004902:	f025 0503 	bic.w	r5, r5, #3
 8004906:	3508      	adds	r5, #8
 8004908:	2d0c      	cmp	r5, #12
 800490a:	bf38      	it	cc
 800490c:	250c      	movcc	r5, #12
 800490e:	4638      	mov	r0, r7
 8004910:	4629      	mov	r1, r5
 8004912:	f7ff ffa5 	bl	8004860 <sbrk_aligned>
 8004916:	3001      	adds	r0, #1
 8004918:	d02b      	beq.n	8004972 <_malloc_r+0xd2>
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	442b      	add	r3, r5
 800491e:	6023      	str	r3, [r4, #0]
 8004920:	e00e      	b.n	8004940 <_malloc_r+0xa0>
 8004922:	6822      	ldr	r2, [r4, #0]
 8004924:	1b52      	subs	r2, r2, r5
 8004926:	d41e      	bmi.n	8004966 <_malloc_r+0xc6>
 8004928:	2a0b      	cmp	r2, #11
 800492a:	d916      	bls.n	800495a <_malloc_r+0xba>
 800492c:	1961      	adds	r1, r4, r5
 800492e:	42a3      	cmp	r3, r4
 8004930:	6025      	str	r5, [r4, #0]
 8004932:	bf18      	it	ne
 8004934:	6059      	strne	r1, [r3, #4]
 8004936:	6863      	ldr	r3, [r4, #4]
 8004938:	bf08      	it	eq
 800493a:	6031      	streq	r1, [r6, #0]
 800493c:	5162      	str	r2, [r4, r5]
 800493e:	604b      	str	r3, [r1, #4]
 8004940:	4638      	mov	r0, r7
 8004942:	f104 060b 	add.w	r6, r4, #11
 8004946:	f000 f865 	bl	8004a14 <__malloc_unlock>
 800494a:	f026 0607 	bic.w	r6, r6, #7
 800494e:	1d23      	adds	r3, r4, #4
 8004950:	1af2      	subs	r2, r6, r3
 8004952:	d0b6      	beq.n	80048c2 <_malloc_r+0x22>
 8004954:	1b9b      	subs	r3, r3, r6
 8004956:	50a3      	str	r3, [r4, r2]
 8004958:	e7b3      	b.n	80048c2 <_malloc_r+0x22>
 800495a:	6862      	ldr	r2, [r4, #4]
 800495c:	42a3      	cmp	r3, r4
 800495e:	bf0c      	ite	eq
 8004960:	6032      	streq	r2, [r6, #0]
 8004962:	605a      	strne	r2, [r3, #4]
 8004964:	e7ec      	b.n	8004940 <_malloc_r+0xa0>
 8004966:	4623      	mov	r3, r4
 8004968:	6864      	ldr	r4, [r4, #4]
 800496a:	e7b2      	b.n	80048d2 <_malloc_r+0x32>
 800496c:	4634      	mov	r4, r6
 800496e:	6876      	ldr	r6, [r6, #4]
 8004970:	e7b9      	b.n	80048e6 <_malloc_r+0x46>
 8004972:	230c      	movs	r3, #12
 8004974:	4638      	mov	r0, r7
 8004976:	603b      	str	r3, [r7, #0]
 8004978:	f000 f84c 	bl	8004a14 <__malloc_unlock>
 800497c:	e7a1      	b.n	80048c2 <_malloc_r+0x22>
 800497e:	6025      	str	r5, [r4, #0]
 8004980:	e7de      	b.n	8004940 <_malloc_r+0xa0>
 8004982:	bf00      	nop
 8004984:	20000260 	.word	0x20000260

08004988 <_realloc_r>:
 8004988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800498c:	4680      	mov	r8, r0
 800498e:	4614      	mov	r4, r2
 8004990:	460e      	mov	r6, r1
 8004992:	b921      	cbnz	r1, 800499e <_realloc_r+0x16>
 8004994:	4611      	mov	r1, r2
 8004996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800499a:	f7ff bf81 	b.w	80048a0 <_malloc_r>
 800499e:	b92a      	cbnz	r2, 80049ac <_realloc_r+0x24>
 80049a0:	f7ff ff16 	bl	80047d0 <_free_r>
 80049a4:	4625      	mov	r5, r4
 80049a6:	4628      	mov	r0, r5
 80049a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049ac:	f000 f838 	bl	8004a20 <_malloc_usable_size_r>
 80049b0:	4284      	cmp	r4, r0
 80049b2:	4607      	mov	r7, r0
 80049b4:	d802      	bhi.n	80049bc <_realloc_r+0x34>
 80049b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80049ba:	d812      	bhi.n	80049e2 <_realloc_r+0x5a>
 80049bc:	4621      	mov	r1, r4
 80049be:	4640      	mov	r0, r8
 80049c0:	f7ff ff6e 	bl	80048a0 <_malloc_r>
 80049c4:	4605      	mov	r5, r0
 80049c6:	2800      	cmp	r0, #0
 80049c8:	d0ed      	beq.n	80049a6 <_realloc_r+0x1e>
 80049ca:	42bc      	cmp	r4, r7
 80049cc:	4622      	mov	r2, r4
 80049ce:	4631      	mov	r1, r6
 80049d0:	bf28      	it	cs
 80049d2:	463a      	movcs	r2, r7
 80049d4:	f7ff fed4 	bl	8004780 <memcpy>
 80049d8:	4631      	mov	r1, r6
 80049da:	4640      	mov	r0, r8
 80049dc:	f7ff fef8 	bl	80047d0 <_free_r>
 80049e0:	e7e1      	b.n	80049a6 <_realloc_r+0x1e>
 80049e2:	4635      	mov	r5, r6
 80049e4:	e7df      	b.n	80049a6 <_realloc_r+0x1e>
	...

080049e8 <_sbrk_r>:
 80049e8:	b538      	push	{r3, r4, r5, lr}
 80049ea:	2300      	movs	r3, #0
 80049ec:	4d05      	ldr	r5, [pc, #20]	; (8004a04 <_sbrk_r+0x1c>)
 80049ee:	4604      	mov	r4, r0
 80049f0:	4608      	mov	r0, r1
 80049f2:	602b      	str	r3, [r5, #0]
 80049f4:	f7fc feec 	bl	80017d0 <_sbrk>
 80049f8:	1c43      	adds	r3, r0, #1
 80049fa:	d102      	bne.n	8004a02 <_sbrk_r+0x1a>
 80049fc:	682b      	ldr	r3, [r5, #0]
 80049fe:	b103      	cbz	r3, 8004a02 <_sbrk_r+0x1a>
 8004a00:	6023      	str	r3, [r4, #0]
 8004a02:	bd38      	pop	{r3, r4, r5, pc}
 8004a04:	20000268 	.word	0x20000268

08004a08 <__malloc_lock>:
 8004a08:	4801      	ldr	r0, [pc, #4]	; (8004a10 <__malloc_lock+0x8>)
 8004a0a:	f000 b811 	b.w	8004a30 <__retarget_lock_acquire_recursive>
 8004a0e:	bf00      	nop
 8004a10:	2000026c 	.word	0x2000026c

08004a14 <__malloc_unlock>:
 8004a14:	4801      	ldr	r0, [pc, #4]	; (8004a1c <__malloc_unlock+0x8>)
 8004a16:	f000 b80c 	b.w	8004a32 <__retarget_lock_release_recursive>
 8004a1a:	bf00      	nop
 8004a1c:	2000026c 	.word	0x2000026c

08004a20 <_malloc_usable_size_r>:
 8004a20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a24:	1f18      	subs	r0, r3, #4
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	bfbc      	itt	lt
 8004a2a:	580b      	ldrlt	r3, [r1, r0]
 8004a2c:	18c0      	addlt	r0, r0, r3
 8004a2e:	4770      	bx	lr

08004a30 <__retarget_lock_acquire_recursive>:
 8004a30:	4770      	bx	lr

08004a32 <__retarget_lock_release_recursive>:
 8004a32:	4770      	bx	lr

08004a34 <_init>:
 8004a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a36:	bf00      	nop
 8004a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a3a:	bc08      	pop	{r3}
 8004a3c:	469e      	mov	lr, r3
 8004a3e:	4770      	bx	lr

08004a40 <_fini>:
 8004a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a42:	bf00      	nop
 8004a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a46:	bc08      	pop	{r3}
 8004a48:	469e      	mov	lr, r3
 8004a4a:	4770      	bx	lr
